#include "..\headers\define.h"
//---------------------

#define NAME                            SCRIPT_RCDumOvr
#define TOWN_REP_VAR                    GVAR_TOWN_REP_RANGERS // привязка к репутации (-1, если не нужно)

#define NUM_TEAM                        TEAM_RANGERS          // группа, к которой принадлежит персонаж (-1 если нужно оставить Team, заданный в редакторе)
#define NUM_AI                          AI_PERSON_TOUGH       // AI персонажа (-1 если нужно оставить AI, заданный в редакторе)
#define KILL_SLAVA                      SLAVA_KILL_GOOD       // слава за убийство этого персонажа (SLAVA_KILL_GOOD, SLAVA_KILL_BAD, SLAVA_KILL_NEITRAL, SLAVA_KILL_CHILD)
#define KILL_TOWN_REP                   REP_KILL_CRITICAL     // репутация за убийство этого персонажа (-100 для враждебности всего поселения)
#define KILL_FRAC_REP                   FRAC_RANGER           // принадлежность определенной фракции (-1, если не нужно)

#define FLAG_STEAL                      40 // Нижний порог навыка для кражи (для торговцев 200, для животных 300)
#define FLAG_ALCOHOL                    1  // Примет ли алкоголь от ГГ: 0 - принимает, 1 - не принимает
#define FLAG_FOOD                       1  // Примет ли пищу от ГГ: 0 - принимает, 1 - не принимает

//---------------------

procedure start;
procedure map_enter_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure timed_event_p_proc;
procedure critter_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure pickup_p_proc;
procedure combat_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;

procedure Node998;
procedure Node999;
procedure NodeStartDialog;
procedure NodeFstDialog;
procedure NodeFstDialog2;
procedure NodeFstDialog3;
procedure NodeSndDialog;
procedure NodeAnswer100;
procedure NodeAnswer101;
procedure NodeAnswer102;
procedure NodeAnswer103;
procedure NodeQuestA100;
procedure NodeQuestA101;
procedure NodeQuestA102;
procedure NodeQuestA200;
procedure NodeQuestA201;
procedure NodeQuestA202;
procedure NodeQuestA202b;
procedure NodeQuestA203;
procedure NodeQuestA204;
procedure NodeQuestA205;
procedure NodeQuestA206;
procedure NodeQuestA207;
procedure NodeQuestA208;
procedure NodeQuestB100;
procedure NodeQuestB101;
procedure NodeQuestB102;
procedure NodeQuestB103;
procedure NodeQuestB104;
procedure NodeQuestB200;
procedure NodeQuestB201;
procedure NodeQuestB300;
procedure NodeQuestB301;

//---------------------

//#define LVAR_Flag_A                     (6) // отвечает за ...

//---------------------



procedure start begin
end

procedure map_enter_p_proc begin
   if (is_loading_game == false) then begin
       set_start_home
   end
end

procedure look_at_p_proc begin
   lookProcMsg
end

procedure description_p_proc begin
   dsrptProcMsg
end

procedure timed_event_p_proc begin
   // Таймер за номером 1 рарезервирован под перемещение персонажа по локации
   // Таймер за номером 2 рарезервирован под всплывающие реплики
   if (fixed_param == 1) then begin
       timer_move_random_home(3)
   end
   if (fixed_param == 2) then begin
       //timer_float_reply(110,119)
   end
end

procedure critter_p_proc begin
   set_critter_options(1,0) //условие нападения (0 личная вражда, 1 вражда клановая, 2 всегда), разворот к ГГ
end

procedure use_skill_on_p_proc begin
   skillUseSteal
   skillUseFAid
end

procedure pickup_p_proc begin
   pickupProcCritter
end

procedure use_obj_on_p_proc begin
   UsedItemToCrit_Proc
end

procedure combat_p_proc begin
   effectAttak(0,0,1,1,1) //отравление min, облучение min, травма ног %, травма рук %, травма глаз %
end

procedure damage_p_proc begin
   set_damage_dude
end

procedure destroy_p_proc begin
   if (getQuest(GVAR_RANGERS_QST_REPAIR_DUM) == qStart) then begin
   setQuest(GVAR_RANGERS_QST_REPAIR_DUM,qZero);
   end
   if (getQuest(GVAR_RANGERS_QST_EUGENE_DUM) == qStart) then begin
   setQuest(GVAR_RANGERS_QST_EUGENE_DUM,qZero);
   end
   kill_critter_opt
end

procedure talk_p_proc begin
   setReaction(1) // Отношение к ГГ(1 - персонаж положительный, -1 отрицательный, 0 нейтральный)

   fracReaction(GVAR_TITUL_ARIZONA_RANGER,40) // Поправка к отношению за принадлежность к фракциям
   fracReaction(GVAR_TITUL_BOS,-40) // Поправка к отношению за принадлежность к фракциям
   fracReaction(GVAR_TITUL_PHENIX_CULT,-40) // Поправка к отношению за принадлежность к фракциям

   dialog_proc(0,0,NodeStartDialog,-1,-1)
end

procedure Node998 begin
   set_enemy_dude;
end

procedure Node999 begin
end

procedure NodeStartDialog begin
   if (bitDialog(bit_1) == 0) then begin
   call NodeFstDialog;
   end
   else begin
   call NodeSndDialog;
   end
end

//--- ПЕРВЫЙ ДИАЛОГ

procedure NodeFstDialog begin
   bitDialogExp(bit_1,0)
   Reply(200)
   NAnswer(201,1,NodeFstDialog2)
end

procedure NodeFstDialog2 begin
   Reply(202)
   NAnswer(203,1,NodeFstDialog3)
end

procedure NodeFstDialog3 begin
   Reply(204)
   NAnswer(205,1,NodeAnswer100)
   NAnswer(206,1,Node999)
end

//--- ПОВТОРНЫЙ ДИАЛОГ

procedure NodeSndDialog begin
   Reply(210)

   if (bitDialog(bit_4) == 0) then begin
   NAnswer(220,1,NodeAnswer100)
   end
   else begin
   NAnswer(229,1,NodeAnswer100)
   end

   if (getQuest(GVAR_RANGERS_QST_REPAIR_DUM) == qStart) then begin
      NAnswer(260,1,NodeQuestA200)
   end
   if (getQuest(GVAR_RANGERS_QST_REPAIR_DUM) == qEnd) then begin
      if (getQuest(GVAR_RANGERS_QST_EUGENE_DUM) == qZero) then begin
      NAnswer(300,1,NodeQuestB100)
      end
   end
   if (getQuest(GVAR_RANGERS_QST_EUGENE_DUM) == qStart) then begin
      if (global_var(GVAR_GARAGE_EUGENE_STATUS) == -1) then begin
      NAnswer(320,1,NodeQuestB200)
      end
      if (global_var(GVAR_GARAGE_EUGENE_STATUS) == 1) then begin
      GAnswer(330,1,NodeQuestB300)
      end
   end
   /*
   if (ГГ посетил Акведук на 1 или 2 уровен) then begin
      NAnswer(260,1,NodeAnswer200)
   end
   */
   NAnswer(211,1,Node999)
end

//--- РАССПРОСЫ

procedure NodeAnswer100 begin
   if (bitDialog(bit_4) != 0) then begin
   Reply(228)
   end
   else begin
   bitDialogExp(bit_4,0)
   Reply(221)
   end

   if (getQuest(GVAR_RANGERS_QST_REPAIR_DUM) == qZero) then begin
   NAnswer(250,1,NodeQuestA100)
   end
   NAnswer(222,3,NodeAnswer101)
   NAnswer(224,3,NodeAnswer102)
   NAnswer(226,3,NodeAnswer103)
   NAnswer(212,1,NodeSndDialog)
end

procedure NodeAnswer101 begin
   Reply(223)
   NAnswer(213,1,NodeAnswer100)
end

procedure NodeAnswer102 begin
   Reply(225)
   NAnswer(213,1,NodeAnswer100)
end

procedure NodeAnswer103 begin
   Reply(227)
   NAnswer(213,1,NodeAnswer100)
end

//--- ПЕРВЫЙ КВЕСТ

procedure NodeQuestA100 begin
   Reply(251)
   NAnswer(252,1,NodeQuestA101)
end

procedure NodeQuestA101 begin
   bitDialogExp(bit_2,0)
   Reply(253)
   NAnswer(254,1,NodeQuestA102)
   NAnswer(255,1,NodeQuestA102)
end

procedure NodeQuestA102 begin
   setQuest(GVAR_RANGERS_QST_REPAIR_DUM,qStart);
   Reply(256)
   NAnswer(257,1,NodeSndDialog)
   NAnswer(258,1,Node999)
end

procedure NodeQuestA200 begin
   zReply(261)
   NAnswer(263,1,NodeQuestA201)
   NAnswer(265,1,NodeQuestA202)
   NAnswer(283,1,NodeQuestA203)
   if (map_var(MVAR_RNGRS_RprDum) == 1) then begin
   BAnswer(270,1,NodeQuestA204)
   end
   NAnswer(262,1,Node999)
end

procedure NodeQuestA201 begin
   Reply(264)
   NAnswer(269,1,NodeQuestA200)
end

procedure NodeQuestA202 begin
   Reply(266)
   NAnswer(267,1,NodeQuestA202b)
end

procedure NodeQuestA202b begin
   Reply(268)
   NAnswer(269,1,NodeQuestA200)
end

procedure NodeQuestA203 begin
   Reply(284)
   NAnswer(269,1,NodeQuestA200)
end

procedure NodeQuestA204 begin
   Reply(271)
   NAnswer(272,1,NodeQuestA205)
end

procedure NodeQuestA205 begin
   setQuest(GVAR_RANGERS_QST_REPAIR_DUM,qEnd);
   bitDialogExp(bit_3,100)
   Reply(273)
   NAnswer(274,1,NodeQuestA206)
   NAnswer(276,1,NodeQuestA207)
end

procedure NodeQuestA206 begin
   item_add(dude_obj,PID_AMMO_MICRO_FUSION_CELL,24)
   setBonusReaction(5)
   set_REP(-2)
   Reply(275)
   NAnswer(278,1,NodeQuestA208)
end

procedure NodeQuestA207 begin
   item_add(dude_obj,PID_AMMO_MICRO_FUSION_CELL,12)
   setBonusReaction(25)
   set_REP(5)
   Reply(277)
   NAnswer(278,1,NodeQuestA208)
end

procedure NodeQuestA208 begin
   Reply(279)
   NAnswer(280,1,Node999)
   NAnswer(281,1,Node999)
end

//--- ВТОРОЙ КВЕСТ

procedure NodeQuestB100 begin
   Reply(301)
   NAnswer(302,1,NodeQuestB101)
end

procedure NodeQuestB101 begin
   Reply(303)
   NAnswer(304,1,NodeQuestB102)
end

procedure NodeQuestB102 begin
   zReply(305)
   NAnswer(306,1,NodeQuestB103)
end

procedure NodeQuestB103 begin
   Reply(307)
   NAnswer(308,1,NodeQuestB104)
   NAnswer(309,1,NodeQuestB104)
   NAnswer(310,1,Node999)
end

procedure NodeQuestB104 begin
   setQuest(GVAR_RANGERS_QST_EUGENE_DUM,qStart);
   Reply(311)
   NAnswer(312,1,Node999)
end

procedure NodeQuestB200 begin
   setQuest(GVAR_RANGERS_QST_EUGENE_DUM,-1);
   exp_add(100); // игрок провалил задание, поэтому опыта выдаётся так мало
   setBonusReaction(-25)
   set_REP(-2)
   Reply(321)
   NAnswer(322,1,NodeQuestB201)
end

procedure NodeQuestB201 begin
   Reply(323)
   NAnswer(324,1,Node999)
end

procedure NodeQuestB300 begin
   set_global_var(GVAR_GARAGE_EUGENE_STATUS,2);
   setQuest(GVAR_RANGERS_QST_EUGENE_DUM,qEnd);
   exp_add(1000);
   setBonusReaction(25)
   Reply(331)
   NAnswer(332,1,NodeQuestB301)
end

procedure NodeQuestB301 begin
   zReply(333)
   NAnswer(334,1,Node999)
end
