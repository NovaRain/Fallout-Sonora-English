#include "..\headers\define.h"
//---------------------

#define NAME                            SCRIPT_PCBdLoh
#define TOWN_REP_VAR                    GVAR_TOWN_REP_PHOENIX // привязка к репутации (-1, если не нужно)

#define NUM_TEAM                        TEAM_PHOENIX_JUNK     // группа, к которой принадлежит персонаж (-1 если нужно оставить Team, заданный в редакторе)
#define NUM_AI                          AI_PERSON_WIMPY       // AI персонажа (-1 если нужно оставить AI, заданный в редакторе)
#define KILL_SLAVA                      SLAVA_KILL_NEITRAL    // слава за убийство этого персонажа (SLAVA_KILL_GOOD, SLAVA_KILL_BAD, SLAVA_KILL_NEITRAL, SLAVA_KILL_CHILD)
#define KILL_TOWN_REP                   REP_KILL_NEITRAL      // репутация за убийство этого персонажа (-100 для враждебности всего поселения)
#define KILL_FRAC_REP                   FRAC_NON              // принадлежность определенной фракции (-1, если не нужно)

#define FLAG_STEAL                      10 // Нижний порог навыка для кражи (для торговцев 200, для животных 300)
#define FLAG_ALCOHOL                    0  // Примет ли алкоголь от ГГ: 0 - принимает, 1 - не принимает
#define FLAG_FOOD                       0  // Примет ли пищу от ГГ: 0 - принимает, 1 - не принимает

//---------------------

procedure start;
procedure map_enter_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure timed_event_p_proc;
procedure critter_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure pickup_p_proc;
procedure combat_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;

procedure Node998;
procedure Node999;
procedure NodeStartDialog;
procedure NodeFstDialog;
procedure NodeFstDialog2;
procedure NodeFstDialog3;
procedure NodeFstDialog4;
procedure NodeSndDialog;
procedure NodeDialog100;
procedure NodeDialog101;
procedure NodeDialog102;
procedure NodeDialog103;
procedure NodeDialog104;
procedure NodeDialog105;
procedure NodeDialog200;
procedure NodeDialog201;
procedure NodeDialog202;
procedure NodeDialog203;
procedure NodeDialog204;
procedure NodeDialog205;
procedure NodeDialog206;
procedure NodeDialog207;
procedure NodeDialog208;
procedure NodeDialog209;
procedure NodeDialog210;
procedure NodeDialog211;

//---------------------

//#define LVAR_Flag_A                     (6) // отвечает за ...

//---------------------



procedure start begin
end

procedure map_enter_p_proc begin
   if (is_loading_game == false) then begin
       set_start_home
       set_obj_visibility(self_obj, 0);
       if (global_var(GVAR_PHENIX_STATUS_LOH) < 0) then begin
       rm_timer_event(self_obj);
       set_obj_visibility(self_obj, 1);
       destroy_object(self_obj);
       end
   end
end

procedure look_at_p_proc begin
   lookProcMsg
end

procedure description_p_proc begin
   dsrptProcMsg
end

procedure timed_event_p_proc begin
   // Таймер за номером 1 рарезервирован под перемещение персонажа по локации
   // Таймер за номером 2 рарезервирован под всплывающие реплики
   if (fixed_param == 1) then begin
       if (map_var(MVAR_PNX_LOH_HOME) == 0) then begin
       timer_move_random_home(3)
       end
       else begin
       timer_move_to_home
       end
   end
   if (fixed_param == 2) then begin
       //timer_float_reply(110,111)
   end
   if (fixed_param == 3) then begin
       setQuest(GVAR_PHENIX_QST_LOH,qStart);
       set_global_var(GVAR_PHENIX_STATUS_LOH,1);
       dude_teleport_map(1,1,MAP_PHOENIX_COLA,7);
   end
end

procedure critter_p_proc begin
   set_critter_options(0,0) //условие нападения (0 личная вражда, 1 вражда клановая, 2 всегда), разворот к ГГ
end

procedure use_skill_on_p_proc begin
   skillUseSteal
   skillUseFAid
end

procedure pickup_p_proc begin
   pickupProcCritter
end

procedure use_obj_on_p_proc begin
   UsedItemToCrit_Proc
end

procedure combat_p_proc begin
   effectAttak(0,0,0,0,0) //отравление min, облучение min, травма ног %, травма рук %, травма глаз %
end

procedure damage_p_proc begin
   set_damage_dude
end

procedure destroy_p_proc begin
   set_global_var(GVAR_PHENIX_STATUS_LOH,-1);
   set_map_var(MVAR_PNX_LOH_HOME,-1);
   setQuest(GVAR_PHENIX_QST_LOH,qStop);
   kill_critter_opt
end

procedure talk_p_proc begin
   if (global_var(GVAR_PHENIX_STATUS_LOH) < 0) then begin
   floater(self_obj,103,COLOR_MSG_RED);
   end
   else if ((getQuest(GVAR_PHENIX_QST_CASINO_DEBT) <= qZero) and (getQuest(GVAR_PHENIX_QST_BNDCS_B) <= qZero)) then begin
   floater(self_obj,random(110,119),COLOR_MSG_NORMAL);
   end
   else if (getQuest(GVAR_PHENIX_QST_CASINO_DEBT) >= qEnd) then begin
   floater(self_obj,102,COLOR_MSG_NORMAL);
   end
   else if (getQuest(GVAR_PHENIX_QST_LOH) != qZero) then begin
   floater(self_obj,102,COLOR_MSG_NORMAL);
   end
   else if (global_var(GVAR_PHENIX_STATUS_LOH) > 0) then begin
   floater(self_obj,102,COLOR_MSG_NORMAL);
   end
   else begin
   setReaction(0) // Отношение к ГГ (1 - персонаж положительный, -1 отрицательный, 0 нейтральный)
   dialog_proc(0,0,NodeStartDialog,-1,-1)
   end
end

procedure Node998 begin
   set_global_var(GVAR_PHENIX_STATUS_LOH,0);
   set_enemy_dude;
end

procedure Node999 begin
end

procedure NodeStartDialog begin
   if (bitDialog(bit_1) == 0) then begin
   call NodeFstDialog;
   end
   else begin
   call NodeSndDialog;
   end
end

//--- ПЕРВЫЙ ДИАЛОГ

procedure NodeFstDialog begin
   bitDialogExp(bit_1,0)
   Reply(200)
   NAnswer(201,1,NodeFstDialog2)
end

procedure NodeFstDialog2 begin
   Reply(202)
   BAnswer(203,1,NodeFstDialog3)
   NAnswer(mstr(204)+dude_name+mstr(205),1,NodeFstDialog4)
end

procedure NodeFstDialog3 begin
   setBonusReaction(-25)
   call NodeSndDialog;
end

procedure NodeFstDialog4 begin
   setBonusReaction(5)
   call NodeSndDialog;
end

//--- ПОВТОРНЫЙ ДИАЛОГ

procedure NodeSndDialog begin
   Reply(210)
   if (getQuest(GVAR_PHENIX_QST_CASINO_DEBT) == qStart) then begin
      if (bitDialog(bit_2) == 0) then begin
      NAnswer(250,1,NodeDialog200)
      end
      else begin
      NAnswer(280,1,NodeDialog210)
      end
   end
   if (getQuest(GVAR_PHENIX_QST_BNDCS_B) == qStart) then begin
      if (map_var(MVAR_PNX_LOH_HOME) == 0) then begin
      NAnswer(220,1,NodeDialog100)
      end
   end
   NAnswer(211,1,Node999)
end

procedure NodeDialog100 begin
   Reply(221)
   NAnswer(222,1,NodeDialog101)
end

procedure NodeDialog101 begin
   Reply(223)
   BAnswer(224,1,NodeDialog103)
   NAnswer(227,1,NodeDialog102)
   NAnswer(234,1,NodeDialog105)
end

procedure NodeDialog102 begin
   Reply(228)
   if (item_amnt(dude_obj,PID_BOOTLE_CAPS)>=37) then begin
   GAnswer(229,1,NodeDialog104)
   end
   BAnswer(224,1,NodeDialog103)
   NAnswer(234,1,NodeDialog105)
end

procedure NodeDialog103 begin
   set_map_var(MVAR_PNX_LOH_HOME,1);
   set_local_var(LVAR_Home_Tile,19696);
   set_local_var(LVAR_Home_Rotat,4);
   set_SLAVA(-10)
   setBonusReaction(-50)

   Reply(225)
   NAnswer(226,1,Node999)
end

procedure NodeDialog104 begin
   set_map_var(MVAR_PNX_LOH_HOME,2);
   item_remove(dude_obj,PID_BOOTLE_CAPS,37)
   set_SLAVA(10)
   setBonusReaction(50)

   Reply(230)
   BAnswer(mstr(231)+dude_name+mstr(232),1,Node999)
   NAnswer(233,1,Node999)
end

procedure NodeDialog105 begin
   Reply(235)
   NAnswer(236,1,Node999)
end

procedure NodeDialog200 begin
   Reply(251)
   NAnswer(252,1,NodeDialog201)
   BAnswer(255,1,NodeDialog202)
   NAnswer(258,1,NodeDialog203)
   NAnswer(254,1,Node999)
end

procedure NodeDialog201 begin
   Reply(253)
   BAnswer(255,1,NodeDialog202)
   NAnswer(258,1,NodeDialog203)
   NAnswer(254,1,Node999)
end

procedure NodeDialog202 begin
   Reply(256)
   NAnswer(252,1,NodeDialog201)
   NAnswer(258,1,NodeDialog203)
   NAnswer(257,1,Node999)
end

procedure NodeDialog203 begin
   Reply(259)
   NAnswer(260,1,NodeDialog204)
   NAnswer(261,1,NodeDialog204)
   BAnswer(262,1,NodeDialog202)
end

procedure NodeDialog204 begin
   Reply(263)
   NAnswer(264,1,NodeDialog205)
   BAnswer(265,1,NodeDialog205)
end

procedure NodeDialog205 begin
   Reply(266)
   NAnswer(267,1,NodeDialog206)
   BAnswer(268,1,NodeDialog206)
end

procedure NodeDialog206 begin
   Reply(269)
   NAnswer(270,1,NodeDialog207)
   BAnswer(271,1,NodeDialog207)
end

procedure NodeDialog207 begin
   bitDialogExp(bit_2,0)
   Reply(272)
   NAnswer(273,1,NodeDialog208)
   BAnswer(276,1,NodeDialog209)
end

procedure NodeDialog208 begin
   Reply(274)
   NAnswer(275,1,Node999)
end

procedure NodeDialog209 begin
   Reply(277)
   NAnswer(278,1,Node999)
end

procedure NodeDialog210 begin
   Reply(281)
   NAnswer(282,1,NodeDialog211)
end

procedure NodeDialog211 begin
   add_timer_event(self_obj, 2, 3);
   call Node999;
end
