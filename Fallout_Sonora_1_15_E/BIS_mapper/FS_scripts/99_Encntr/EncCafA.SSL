#include "..\headers\define.h"
//---------------------

#define NAME                            SCRIPT_EncCafA
#define TOWN_REP_VAR                    -1  // привязка к репутации (-1, если не нужно)

#define NUM_TEAM                        TEAM_CARAVAN          // группа, к которой принадлежит персонаж (-1 если нужно оставить Team, заданный в редакторе)
#define NUM_AI                          -1                    // AI персонажа (-1 если нужно оставить AI, заданный в редакторе)
#define KILL_SLAVA                      (SLAVA_KILL_BAD*4)    // слава за убийство этого персонажа (SLAVA_KILL_GOOD, SLAVA_KILL_BAD, SLAVA_KILL_NEITRAL, SLAVA_KILL_CHILD)
#define KILL_TOWN_REP                   REP_KILL_BAD          // репутация за убийство этого персонажа (REP_KILL_GOOD, REP_KILL_NEITRAL, REP_KILL_BAD, REP_KILL_CHILD, REP_KILL_CRITICAL)
#define KILL_FRAC_REP                   FRAC_NON              // принадлежность определенной фракции (-1, если не нужно)

#define FLAG_STEAL                      100 // Нижний порог навыка для кражи (для торговцев 200, для животных 300)
#define FLAG_ALCOHOL                    1  // Примет ли алкоголь от ГГ: 0 - принимает, 1 - не принимает
#define FLAG_FOOD                       0  // Примет ли пищу от ГГ: 0 - принимает, 1 - не принимает

//---------------------

procedure start;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure timed_event_p_proc;
procedure critter_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure pickup_p_proc;
procedure combat_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;

procedure Node998;
procedure Node999;
procedure NodeStartDialog;
procedure NodeStopDialog;
procedure NodeStopDialog1;
procedure NodeStopDialog2;
procedure NodeStopDialog3;
procedure NodeStopDialog4;
procedure NodeStopDialog5;
procedure NodeFstDialog;
procedure NodeFstDialog2;
procedure NodeSndDialog;
procedure NodeSndDialog2;
procedure NodeAnswer;
procedure NodeAnswer1;
procedure NodeAnswer2;
procedure NodeAnswer3;
procedure NodeAnswer4;
procedure NodeAnswer5;
procedure NodeAnswer6;
procedure NodeAnswer7;
procedure NodeAnswer8;

//---------------------

//#define LVAR_Flag_A                     (6) // отвечает за ...

import variable box_stop_use;

//---------------------



procedure start begin
end

procedure map_enter_p_proc begin
   if (is_loading_game == false) then begin
       set_start_home
   end
end

procedure map_update_p_proc begin
   if (gvar_bit(GVAR_DIALOGS_FLAGS_BIT, bit_12) == 0) then begin
      if (dude_elevation == 1) then begin
      //floater(dude_obj,103,COLOR_MSG_RED);
      display_mstr(103);
      set_gvar_bit_on(GVAR_DIALOGS_FLAGS_BIT, bit_12);
      move_to(self_obj,10904,0);
      end
   end
end

procedure look_at_p_proc begin
   lookProcMsg
end

procedure description_p_proc begin
   dsrptProcMsg
end

procedure timed_event_p_proc begin
   // Таймер за номером 1 зарезервирован под перемещение персонажа по локации
   // Таймер за номером 2 зарезервирован под всплывающие реплики
   if (fixed_param == 1) then begin
       timer_move_to_home
       //timer_move_random
   end
   if (fixed_param == 2) then begin
       //timer_float_reply(120,121)
   end
end

procedure critter_p_proc begin
   set_using_stop // привязка хозяина и объекта (удалить, если не нужно)
   set_critter_options(0,1) //условие нападения (0 личная вражда, 1 вражда клановая, 2 всегда), разворот к ГГ

   if (bitDialog(bit_4) == 0) then begin
      if (bitDialog(bit_5) == 0) then begin
         if (gvar_bit(GVAR_DIALOGS_FLAGS_BIT, bit_12) != 0) then begin
         dialogue_system_forcing(10)
         end
      end
   end
end

procedure use_skill_on_p_proc begin
   skillUseSteal
   skillUseFAid
end

procedure pickup_p_proc begin
   pickupProcCritter
end

procedure use_obj_on_p_proc begin
   UsedItemToCrit_Proc
end

procedure combat_p_proc begin
   effectAttak(0,0,1,1,1) //отравление min, облучение min, травма ног %, травма рук %, травма глаз %
end

procedure damage_p_proc begin
   set_damage_dude
end

procedure destroy_p_proc begin
   set_gvar_bit_on(GVAR_DIALOGS_FLAGS_BIT, bit_12);
   kill_critter_dude_reply(106,105)
   kill_critter_opt
end

procedure talk_p_proc begin
   setReaction(-1) // Отношение к ГГ (1 - персонаж положительный, -1 отрицательный, 0 нейтральный)
   if (bitDialog(bit_5) == 0) then begin
   dialog_proc(0,0,NodeStartDialog,-1,-1)
   end
   else begin
   floater(self_obj,102,COLOR_MSG_RED);
   end
end

procedure Node998 begin
   setNodeCombat;
   floater(self_obj,104,COLOR_MSG_RED);
end

procedure Node999 begin
end

procedure NodeStartDialog begin
   if (gvar_bit(GVAR_DIALOGS_FLAGS_BIT, bit_12) != 0) then begin
      if (bitDialog(bit_1) == 0) then begin
      call NodeStopDialog1;
      end
      else begin
      call NodeStopDialog;
      end
   end
   else begin
      if (bitDialog(bit_1) == 0) then begin
      call NodeFstDialog;
      end
      else begin
      call NodeSndDialog;
      end
   end
end

//--- СТОП-ДИАЛОГ

procedure NodeStopDialog begin
   bitDialogExp(bit_4,0)
   Reply(250)
   if (bitDialog(bit_3) == 0) then begin
   NAnswer(259,1,NodeStopDialog2)
   end else begin
   zNAnswer(251,1,NodeStopDialog2)
   end
   zBAnswer(258,1,Node998)
end

procedure NodeStopDialog1 begin
   Reply(267)
   NAnswer(259,1,NodeStopDialog2)
   BAnswer(268,1,Node998)
end

procedure NodeStopDialog2 begin
   Reply(252)
   NAnswer(253,1,NodeStopDialog3)
   BAnswer(260,1,Node998)
end

procedure NodeStopDialog3 begin
   Reply(254)
   NAnswer(255,1,NodeStopDialog4)
   BAnswer(261,1,Node998)
end

procedure NodeStopDialog4 begin
   Reply(256)
   NAnswerSkill(263,4,NodeStopDialog5,SKILL_CONVERSANT,80,262,Node998)
   BAnswer(257,1,Node998)
end

procedure NodeStopDialog5 begin
   bitDialogExp(bit_5,350)
   Reply(264)
   NAnswer(265,1,Node999)
   BAnswer(266,1,Node998)
end

//--- ПЕРВЫЙ ДИАЛОГ

procedure NodeFstDialog begin
   bitDialogExp(bit_1,0)
   Reply(200)
   NAnswer(201,1,NodeFstDialog2)
   BAnswer(202,1,NodeFstDialog2)
end

procedure NodeFstDialog2 begin
   Reply(203)
   NAnswer(204,1,NodeSndDialog)
end

//--- ПОВТОРНЫЙ ДИАЛОГ

procedure NodeSndDialog begin
   Reply(210)
   call NodeAnswer;
   if (bitDialog(bit_2) == 0) then begin
   NAnswer(212,1,NodeSndDialog2)
   end else begin
   NAnswer(211,1,Node999)
   end
end

procedure NodeSndDialog2 begin
   bitDialogExp(bit_2,0)
   Reply(213)
   //call NodeAnswer;
   NAnswer(214,1,Node999)
   BAnswer(215,1,Node999)
end

procedure NodeAnswer begin
   NAnswer(216,3,NodeAnswer2)
   NAnswer(218,3,NodeAnswer3)
   NAnswer(220,4,NodeAnswer4)
   NAnswer(222,4,NodeAnswer5)
   if (bitDialog(bit_2) != 0) then begin
   NAnswer(224,5,NodeAnswer6)
   end
   NAnswer(226,3,NodeAnswer7)
end

procedure NodeAnswer1 begin
   Reply(231)
   call NodeAnswer;
   if (bitDialog(bit_2) == 0) then begin
   NAnswer(212,1,NodeSndDialog2)
   end else begin
   NAnswer(232,1,Node999)
   end
end

procedure NodeAnswer2 begin
   Reply(217)
   NAnswer(230,1,NodeAnswer1)
end

procedure NodeAnswer3 begin
   Reply(219)
   NAnswer(230,1,NodeAnswer1)
end

procedure NodeAnswer4 begin
   bitDialogExp(bit_3,0)
   Reply(221)
   NAnswer(230,1,NodeAnswer1)
end

procedure NodeAnswer5 begin
   Reply(223)
   NAnswer(230,1,NodeAnswer1)
end

procedure NodeAnswer6 begin
   Reply(225)
   NAnswer(230,1,NodeAnswer1)
end

procedure NodeAnswer7 begin
   Reply(227)
   NAnswer(228,1,NodeAnswer8)
end

procedure NodeAnswer8 begin
   Reply(229)
   NAnswer(230,1,NodeAnswer1)
end
