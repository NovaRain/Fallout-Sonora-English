#include "..\headers\define.h"
//---------------------

#define NAME                            SCRIPT_DCWtrBos
#define TOWN_REP_VAR                    GVAR_TOWN_REP_CASA_GRANDE // привязка к репутации (-1, если не нужно)

#define NUM_TEAM                        TEAM_CASAGRANDE_CITYHALL // группа, к которой принадлежит персонаж (-1 если нужно оставить Team, заданный в редакторе)
#define NUM_AI                          AI_PERSON_TOUGH       // AI персонажа (-1 если нужно оставить AI, заданный в редакторе)
#define KILL_SLAVA                      SLAVA_KILL_GOOD       // слава за убийство этого персонажа (SLAVA_KILL_GOOD, SLAVA_KILL_BAD, SLAVA_KILL_NEITRAL, SLAVA_KILL_CHILD)
#define KILL_TOWN_REP                   REP_KILL_CRITICAL     // репутация за убийство этого персонажа (REP_KILL_GOOD, REP_KILL_BAD, REP_KILL_NEITRAL, REP_KILL_CRITICAL для враждебности всего поселения, REP_KILL_CHILD)
#define KILL_FRAC_REP                   FRAC_NON              // принадлежность определенной фракции (-1, если не нужно)

#define FLAG_STEAL                      75 // Нижний порог навыка для кражи (для торговцев 200, для животных 300)
#define FLAG_ALCOHOL                    0  // Примет ли алкоголь от ГГ: 0 - принимает, 1 - не принимает
#define FLAG_FOOD                       1  // Примет ли пищу от ГГ: 0 - принимает, 1 - не принимает

//---------------------

procedure start;
procedure map_enter_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure timed_event_p_proc;
procedure critter_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure pickup_p_proc;
procedure combat_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;

procedure Node998;
procedure Node999;
procedure NodeStartDialog;
procedure NodeStopDialog100;
procedure NodeStopDialog101;
procedure NodeStopDialog102;
procedure NodeStopDialog103;
procedure NodeStopDialog104;
procedure NodeFstDialog;
procedure NodeFstDialog2;
procedure NodeFstDialog3;
procedure NodeFstDialog4;
procedure NodeFstDialog5;
procedure NodeFstDialog6;
procedure NodeFstDialog7;
procedure NodeFstDialog8;
procedure NodeFstDialog9;
procedure NodeFstDialog10;
procedure NodeFstDialog11;
procedure NodeFstDialog12;
procedure NodeFstDialog13;
procedure NodeSndDialog;
procedure NodeAnswer100;
procedure NodeAnswer101;
procedure NodeAnswer102;
procedure NodeAnswer103;
procedure NodeAnswer103;
procedure NodeAnswer104;
procedure NodeAnswer105;
procedure NodeAnswer106;
procedure NodeAnswer200;
procedure NodeAnswer201;
procedure NodeAnswer202;
procedure NodeAnswer203;
procedure NodeAnswer300;
procedure NodeAnswer301;
procedure NodeAnswer302;
procedure NodeAnswer303;
procedure NodeAnswer304;

//---------------------

//#define LVAR_Flag_A                     (6) // отвечает за ...

import variable box_stop_use;

//---------------------



procedure start begin
end

procedure map_enter_p_proc begin
   if (is_loading_game == false) then begin
       set_start_home
       if (map_first_run) then begin
       item_add(self_obj,PID_BOOTLE_CAPS,random(80,100))
       end
       set_obj_visibility(self_obj, 0);
       if (getQuest(GVAR_CGRANDE_ATTAK_TO_BAR) == qStart) then begin
       rm_timer_event(self_obj);
       set_obj_visibility(self_obj, 1);
       end
       if (global_var(GVAR_CGRANDE_STATUS_SHEFF) < 0) then begin
       rm_timer_event(self_obj);
       set_obj_visibility(self_obj, 1);
       end
   end
end

procedure look_at_p_proc begin
   lookProcMsg
end

procedure description_p_proc begin
   dsrptProcMsg
end

procedure timed_event_p_proc begin
   // Таймер за номером 1 рарезервирован под перемещение персонажа по локации
   // Таймер за номером 2 рарезервирован под всплывающие реплики
   if (fixed_param == 1) then begin
       timer_move_to_home
   end
   if (fixed_param == 2) then begin
       //timer_float_reply(110,119)
   end
end

procedure critter_p_proc begin
   set_using_stop // привязка хозяина и объекта (удалить, если не нужно)
   set_critter_options(0,0) //условие нападения (0 личная вражда, 1 вражда клановая, 2 всегда), разворот к ГГ
end

procedure use_skill_on_p_proc begin
   skillUseSteal
   skillUseFAid
end

procedure pickup_p_proc begin
   pickupProcCritter
end

procedure use_obj_on_p_proc begin
   UsedItemToCrit_Proc
end

procedure combat_p_proc begin
   effectAttak(0,0,1,1,1) //отравление min, облучение min, травма ног %, травма рук %, травма глаз %
end

procedure damage_p_proc begin
   set_damage_dude
end

procedure destroy_p_proc begin
   dec_global_var(GVAR_CGRANDE_STATUS_CTZN);
   set_global_var(GVAR_CGRANDE_STATUS_SHEFF,-1);
   if (getQuest(GVAR_CGRANDE_WATER_REPAIR) == qStart) then begin
   setQuest(GVAR_CGRANDE_WATER_REPAIR,qStop);
   end
   kill_critter_opt
end

procedure talk_p_proc begin
   if ((armor_pid_dude_var == PID_ARMOR_ROAD) or (global_var(GVAR_TITUL_WARRIOR_ROAD) > 0)) then begin
   floater(self_obj,103,COLOR_MSG_RED);
   end
   else begin
   setReaction(0) // Отношение к ГГ (1 - персонаж положительный, -1 отрицательный, 0 нейтральный)
   fracReaction(GVAR_TITUL_ARIZONA_RANGER,-20) // Поправка к отношению за принадлежность к фракциям
   fracReaction(GVAR_TITUL_PHENIX_CULT,20) // Поправка к отношению за принадлежность к фракциям
   fracReaction(GVAR_TITUL_WARRIOR_ROAD,-90) // Поправка к отношению за принадлежность к фракциям
   dialog_proc(0,0,NodeStartDialog,-1,-1)
   end
end

procedure Node998 begin
   setNodeCombat;
end

procedure Node999 begin
end

procedure NodeStartDialog begin
   if (getQuest(GVAR_CGRANDE_WATER_REPAIR) > qStart) then begin
   bitDialogExp(bit_1,0)
   bitDialogExp(bit_2,0) // эта опция служит только для удобства теста в маппере
   end

   if (bitDialog(bit_1) == 0) then begin
      call NodeFstDialog;
   end
   else if ((bitDialog(bit_6) == 0) and (map_var(MVAR_CGRANDE_WATER_ATTAK_A) < 0)) then begin
      call NodeStopDialog100;
   end
   else if (bitDialog(bit_2) == 0) then begin
      call NodeFstDialog8;
   end
   else begin
      call NodeSndDialog;
   end
end

procedure NodeStopDialog100 begin
   bitDialogExp(bit_6,0)
   Reply(300)
   NAnswer(301,1,NodeStopDialog101)
end

procedure NodeStopDialog101 begin
   Reply(302)
   BAnswerSkill(309,1,NodeStopDialog104,SKILL_CONVERSANT,40,306,NodeStopDialog103)
   zGAnswer(303,1,NodeStopDialog102)
end

procedure NodeStopDialog102 begin
   setBonusReaction(10)
   Reply(304)
   GAnswer(305,1,Node999)
end

procedure NodeStopDialog103 begin
   setBonusReaction(-20)
   Reply(307)
   NAnswer(308,1,Node999)
end

procedure NodeStopDialog104 begin
   setBonusReaction(-10)
   item_add(dude_obj,PID_BOOTLE_CAPS,10)
   Reply(310)
   NAnswer(311,1,Node999)
end

//--- ПЕРВЫЙ ДИАЛОГ

procedure NodeFstDialog begin
   bitDialogExp(bit_1,0)
   zReply(200)
   NAnswer(201,1,NodeFstDialog2)
end

procedure NodeFstDialog2 begin
   Reply(202)
   NAnswer(204,3,NodeFstDialog3)
   NAnswer(210,1,NodeFstDialog5)
   NAnswer(203,1,Node999)
end

procedure NodeFstDialog3 begin
   Reply(205)
   NAnswer(207,3,NodeFstDialog4)
   NAnswer(210,1,NodeFstDialog5)
   NAnswer(206,1,Node999)
end

procedure NodeFstDialog4 begin
   Reply(208)
   NAnswer(211,1,NodeFstDialog5)
   NAnswer(209,1,Node999)
end

procedure NodeFstDialog5 begin
   Reply(212)
   NAnswer(214,3,NodeFstDialog6)
   NAnswer(216,3,NodeFstDialog7)
   NAnswer(213,1,Node999)
end

procedure NodeFstDialog6 begin
   Reply(215)
   NAnswer(216,3,NodeFstDialog7)
   NAnswer(213,1,Node999)
end

procedure NodeFstDialog7 begin
   setQuest(GVAR_CGRANDE_WATER_REPAIR,qStart);
   Reply(217)
   NAnswer(218,1,Node999)
   NAnswer(219,1,Node999)
end

procedure NodeFstDialog8 begin
   Reply(220)
   if (getQuest(GVAR_CGRANDE_WATER_REPAIR) == qZero) then begin
   NAnswer(222,1,NodeFstDialog5)
   end
   if (getQuest(GVAR_CGRANDE_WATER_REPAIR) == qStart) then begin
   if (map_var(MVAR_CGRANDE_WATER_REPAIR) > 0) then begin
   GAnswer(223,1,NodeFstDialog9)
   end
   end
   if (getQuest(GVAR_TWOSUN_QST_LOST_TIN) == qStart) then begin
   NAnswer(234,3,NodeFstDialog12)
   end
   NAnswer(204,1,NodeFstDialog13)
   BAnswer(221,1,Node999)
end

procedure NodeFstDialog9 begin
   bitDialogExp(bit_2,0)
   setQuest(GVAR_CGRANDE_WATER_REPAIR,qEnd);
   setBonusReaction(35)
   set_REP(7)
   item_add(dude_obj,PID_BOOTLE_CAPS,200)
   Reply(224)
   NAnswerSkill(230,3,NodeFstDialog11,SKILL_CONVERSANT,50,226,NodeFstDialog10)
   NAnswer(225,1,Node999)
end

procedure NodeFstDialog10 begin
   Reply(227)
   BAnswer(228,1,Node999)
   NAnswer(229,1,Node999)
end

procedure NodeFstDialog11 begin
   item_add(dude_obj,PID_BOOTLE_CAPS,50)
   Reply(231)
   BAnswer(232,1,Node999)
   NAnswer(233,1,Node999)
end

procedure NodeFstDialog12 begin
   Reply(235)
   NAnswer(236,1,Node999)
end

procedure NodeFstDialog13 begin
   Reply(244)
   NAnswer(245,1,Node999)
end

//--- ПОВТОРНЫЙ ДИАЛОГ

procedure NodeSndDialog begin
   if ((armor_pid_dude_var == PID_ARMOR_POWER_A) or (armor_pid_dude_var == PID_ARMOR_POWER_B) or (armor_pid_dude_var == PID_ARMOR_POWER_C)) then begin
   Reply(102)
   end
   else begin
   Reply(250)
   end

   if (global_var(GVAR_CGRANDE_STATUS_MER) < 0) then begin
   if (getQuest(GVAR_CGRANDE_ATTAK_TO_BAR) != qZero) then begin
   NAnswer(241,1,NodeAnswer304)
   end
   end

   NAnswer(260,3,NodeAnswer100)
   NAnswer(280,3,NodeAnswer200)
   if (getQuest(GVAR_CGRANDE_WATER_REPAIR) == qStart) then begin
   if (map_var(MVAR_CGRANDE_WATER_REPAIR) > 0) then begin
   GAnswer(223,1,NodeFstDialog9)
   end
   end
   if (getQuest(GVAR_CGRANDE_WATER_REPAIR) > qStart) then begin
   NAnswer(292,3,NodeAnswer300)
   end
   if (getQuest(GVAR_CGRANDE_WATER_REPAIR) == qZero) then begin
   NAnswer(292,3,NodeAnswer301)
   end

   if (getQuest(GVAR_TWOSUN_QST_LOST_TIN) == qStart) then begin
   NAnswer(234,3,NodeAnswer302)
   end
   if (getQuest(GVAR_MAIN_QUEST_TWOSUN) == qStart) then begin
   NAnswer(237,1,NodeAnswer303)
   end

   NAnswer(251,1,Node999)
end

procedure NodeAnswer100 begin
   Reply(261)
   NAnswer(262,3,NodeAnswer101)
   NAnswer(271,3,NodeAnswer104)
   NAnswer(264,1,NodeSndDialog)
   NAnswer(263,1,Node999)
end

procedure NodeAnswer101 begin
   Reply(265)
   NAnswer(266,4,NodeAnswer102)
   NAnswer(264,1,NodeSndDialog)
   NAnswer(263,1,Node999)
end

procedure NodeAnswer102 begin
   Reply(267)
   NAnswer(268,5,NodeAnswer103)
   NAnswer(264,1,NodeSndDialog)
   NAnswer(263,1,Node999)
end

procedure NodeAnswer103 begin
   bitDialogExp(bit_3,20)
   Reply(269)
   NAnswer(270,1,NodeAnswer100)
end

procedure NodeAnswer104 begin
   Reply(272)
   NAnswer(275,4,NodeAnswer105)
   NAnswer(264,1,NodeSndDialog)
   NAnswer(263,1,Node999)
end

procedure NodeAnswer105 begin
   Reply(276)
   if (global_var(GVAR_TWOSUN_STATUS_ZAX) > 0) then begin
   NAnswer(277,5,NodeAnswer106)
   end
   NAnswer(264,1,NodeSndDialog)
   NAnswer(263,1,Node999)
end

procedure NodeAnswer106 begin
   bitDialogExp(bit_4,20)
   Reply(278)
   NAnswer(279,1,NodeAnswer100)
end

procedure NodeAnswer200 begin
   if (global_var(GVAR_CGRANDE_STATUS_MER) < 0) then begin
   Reply(281)
   NAnswer(282,1,NodeSndDialog)
   end
   else begin
   Reply(283)
   NAnswerReaction(284,4,NodeAnswer201,20,289,NodeAnswer203)
   NAnswer(288,1,NodeSndDialog)
   end
end

procedure NodeAnswer201 begin
   Reply(285)
   NAnswer(286,5,NodeAnswer202)
   NAnswer(288,1,NodeSndDialog)
end

procedure NodeAnswer202 begin
   bitDialogExp(bit_5,20)
   Reply(287)
   NAnswer(288,1,NodeSndDialog)
end

procedure NodeAnswer203 begin
   Reply(290)
   NAnswer(291,1,NodeSndDialog)
end

procedure NodeAnswer300 begin
   if (global_var(GVAR_CGRANDE_STATUS_MER) < 0) then begin
   Reply(294)
   end
   else begin
   Reply(293)
   end
   NAnswer(295,1,NodeSndDialog)
   NAnswer(296,1,Node999)
end

procedure NodeAnswer301 begin
   setQuest(GVAR_CGRANDE_WATER_REPAIR,qStart);
   Reply(297)
   NAnswer(298,1,NodeSndDialog)
   NAnswer(299,1,Node999)
end

procedure NodeAnswer302 begin
   Reply(235)
   NAnswer(236,1,Node999)
end

procedure NodeAnswer303 begin
   Reply(238)
   NAnswer(239,1,Node999)
   NAnswer(240,1,Node999)
end

procedure NodeAnswer304 begin
   Reply(242)
   NAnswer(243,1,NodeSndDialog)
end
