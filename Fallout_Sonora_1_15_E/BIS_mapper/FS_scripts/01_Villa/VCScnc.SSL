#include "..\headers\define.h"
//---------------------

#define NAME                            SCRIPT_VCScnc
#define TOWN_REP_VAR                    GVAR_TOWN_REP_VILLA   // привязка к репутации (-1, если не нужно)

#define NUM_TEAM                        TEAM_CULT_ATOMIC      // группа, к которой принадлежит персонаж (-1 если нужно оставить Team, заданный в редакторе)
#define NUM_AI                          AI_PERSON_TOUGH       // AI персонажа (-1 если нужно оставить AI, заданный в редакторе)
#define KILL_SLAVA                      SLAVA_KILL_GOOD       // слава за убийство этого персонажа (SLAVA_KILL_GOOD, SLAVA_KILL_BAD, SLAVA_KILL_NEITRAL, SLAVA_KILL_CHILD)
#define KILL_TOWN_REP                   REP_KILL_NEITRAL      // репутация за убийство этого персонажа (REP_KILL_GOOD, REP_KILL_NEITRAL, REP_KILL_BAD, REP_KILL_CHILD, REP_KILL_CRITICAL)
#define KILL_FRAC_REP                   FRAC_NON              // принадлежность определенной фракции (-1, если не нужно)

#define FLAG_STEAL                      40 // Нижний порог навыка для кражи (для торговцев 200, для животных 300)
#define FLAG_ALCOHOL                    1  // Примет ли алкоголь от ГГ: 0 - принимает, 1 - не принимает
#define FLAG_FOOD                       1  // Примет ли пищу от ГГ: 0 - принимает, 1 - не принимает

//---------------------

procedure start;
procedure map_enter_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure timed_event_p_proc;
procedure critter_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure pickup_p_proc;
procedure combat_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;

procedure Node998;
procedure Node999;
procedure NodeStartDialog;
procedure NodeFstDialog;
procedure NodeSndDialog;
procedure NodeMeteo;
procedure NodeMeteo2;
procedure NodeMedic;
procedure NodeMedic2;
procedure NodeAnswer1;
procedure NodeAnswer2;
procedure NodeAnswer3;
procedure NodeAnswer4;

//---------------------

//#define LVAR_Flag_A                     (6) // отвечает за ...

//---------------------



procedure start begin
end

procedure map_enter_p_proc begin
   if (is_loading_game == false) then begin
       set_start_home
       set_obj_visibility(self_obj, 1);

       if (global_var(GVAR_VAULT27_GO_MERC) == 2) then begin
       //set_obj_visibility(self_obj, 0);
       end
   end
end

procedure look_at_p_proc begin
   lookProcMsg
end

procedure description_p_proc begin
   dsrptProcMsg
end

procedure timed_event_p_proc begin
   // Таймер за номером 1 зарезервирован под перемещение персонажа по локации
   // Таймер за номером 2 зарезервирован под всплывающие реплики
   if (fixed_param == 1) then begin
       timer_move_random_home(5)
   end
   if (fixed_param == 2) then begin
       //timer_float_reply(120,121)
   end
end

procedure critter_p_proc begin
   set_critter_options(0,0) //условие нападения (0 личная вражда, 1 вражда клановая, 2 всегда), разворот к ГГ
end

procedure use_skill_on_p_proc begin
   skillUseSteal
   skillUseFAid
end

procedure pickup_p_proc begin
   pickupProcCritter
end

procedure use_obj_on_p_proc begin
   UsedItemToCrit_Proc
end

procedure combat_p_proc begin
   effectAttak(0,0,1,1,1) //отравление min, облучение min, травма ног %, травма рук %, травма глаз %
end

procedure damage_p_proc begin
   set_damage_dude
end

procedure destroy_p_proc begin
   set_global_var(GVAR_VAULT27_GO_MERC,-1);
   kill_critter_opt
end

procedure talk_p_proc begin
   setReaction(0) // Отношение к ГГ(1 - персонаж положительный, -1 отрицательный, 0 нейтральный)
   dialog_proc(0,0,NodeStartDialog,-1,-1)
end

procedure Node998 begin
   set_enemy_dude;
end

procedure Node999 begin
end

procedure NodeStartDialog begin
   if (bitDialog(bit_1) == 0) then begin
   call NodeFstDialog;
   end
   else begin
   call NodeSndDialog;
   end
end

//--- ПЕРВЫЙ ДИАЛОГ

procedure NodeFstDialog begin
   bitDialogExp(bit_1,0)
   Reply(200)
   NAnswer(201,1,NodeSndDialog)
end

//--- ВТОРОЙ ДИАЛОГ

procedure NodeSndDialog begin
   Reply(210)
   NAnswer(220,1,NodeAnswer1)
   NAnswer(222,1,NodeAnswer2)
   if ((getQuest(GVAR_VILLA_MEDIC_HELP) == qStart) and (map_var(MVAR_Plaza_MedicMetod) == 0)) then begin
   NAnswer(230,1,NodeMedic)
   end
   if ((getQuest(GVAR_VILLA_METEO) == qStart) and (map_var(MVAR_Plaza_Meteo) == 0)) then begin
   NAnswer(234,1,NodeMeteo)
   end
   NAnswer(211,1,Node999)
end

procedure NodeMeteo begin
   Reply(235)
   NAnswer(236,1,NodeMeteo2)
   NAnswer(237,1,Node999)
end

procedure NodeMeteo2 begin
   set_map_var(MVAR_Plaza_Meteo,999);
   call Node999;
end

procedure NodeMedic begin
   Reply(231)
   NAnswer(232,1,NodeMedic2)
   NAnswer(233,1,Node999)
end

procedure NodeMedic2 begin
   set_map_var(MVAR_Plaza_MedicMetod,3);
   call Node999;
end

procedure NodeAnswer1 begin
   Reply(221)
   NAnswer(212,1,NodeSndDialog)
end

procedure NodeAnswer2 begin
   Reply(223)
   NAnswer(224,3,NodeAnswer3)
   NAnswer(212,1,NodeSndDialog)
end

procedure NodeAnswer3 begin
   Reply(225)
   NAnswer(226,4,NodeAnswer4)
   NAnswer(212,1,NodeSndDialog)
end

procedure NodeAnswer4 begin
   bitDialogExp(bit_2,50)
   Reply(227)
   NAnswer(212,1,NodeSndDialog)
end
