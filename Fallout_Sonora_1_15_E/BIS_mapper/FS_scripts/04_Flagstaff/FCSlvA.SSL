#include "..\headers\define.h"
//---------------------

#define NAME                            SCRIPT_FCSlvA
#define TOWN_REP_VAR                    GVAR_TOWN_REP_FLAGSTAFF   // привязка к репутации (-1, если не нужно)

#define NUM_TEAM                        TEAM_FLAGSTAFF_CITIZEN // группа, к которой принадлежит персонаж (-1 если нужно оставить Team, заданный в редакторе)
#define NUM_AI                          AI_PERSON_NORMAL      // AI персонажа (-1 если нужно оставить AI, заданный в редакторе)
#define KILL_SLAVA                      SLAVA_KILL_GOOD       // слава за убийство этого персонажа (SLAVA_KILL_GOOD, SLAVA_KILL_BAD, SLAVA_KILL_NEITRAL, SLAVA_KILL_CHILD)
#define KILL_TOWN_REP                   REP_KILL_GOOD         // репутация за убийство этого персонажа (REP_KILL_GOOD, REP_KILL_BAD, REP_KILL_NEITRAL, REP_KILL_CRITICAL для враждебности всего поселения, REP_KILL_CHILD)
#define KILL_FRAC_REP                   FRAC_NON              // принадлежность определенной фракции (-1, если не нужно)

#define FLAG_STEAL                      20  // Нижний порог навыка для кражи (для торговцев 200, для животных 300)
#define FLAG_ALCOHOL                    1  // Примет ли алкоголь от ГГ: 0 - принимает, 1 - не принимает
#define FLAG_FOOD                       1  // Примет ли пищу от ГГ: 0 - принимает, 1 - не принимает

//---------------------

procedure start;
procedure map_enter_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure timed_event_p_proc;
procedure critter_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure pickup_p_proc;
procedure combat_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;

procedure Node998;
procedure Node999;
procedure NodeStartDialog;
procedure NodeDialog;
procedure NodeDialog2;
procedure NodeDialog100;
procedure NodeDialog201;
procedure NodeDialog202;
procedure NodeDialog300;
procedure NodeDialog301;
procedure NodeDialog401;
procedure NodeDialog402;
procedure NodeFreedom;
procedure NodeNonFreedom;

//---------------------

//#define LVAR_Flag_A                     (6) // отвечает за ...

import variable box_stop_use;

//---------------------



procedure start begin
end

procedure map_enter_p_proc begin
   if (is_loading_game == false) then begin
       set_start_home
   end
end

procedure look_at_p_proc begin
   lookProcMsg
end

procedure description_p_proc begin
   dsrptProcMsg
end

procedure timed_event_p_proc begin
   // Таймер за номером 1 рарезервирован под перемещение персонажа по локации
   // Таймер за номером 2 рарезервирован под всплывающие реплики
   if (fixed_param == 1) then begin
       timer_move_to_home
   end
   if (fixed_param == 2) then begin
       if (self_tile == HomeTile) then begin
          if ((map_var(MVAR_SlavStoryA) == 0) and (map_var(MVAR_SlavStoryB) == 0)) then begin
          timer_floater(110,119,COLOR_MSG_RED,random(40,60))
          end
       end
   end
end

procedure critter_p_proc begin
   set_using_stop // привязка хозяина и объекта (удалить, если не нужно)
   set_critter_options(0,0) //условие нападения (0 личная вражда, 1 вражда клановая, 2 всегда), разворот к ГГ
end

procedure use_skill_on_p_proc begin
   skillUseSteal
   skillUseFAid
end

procedure pickup_p_proc begin
   pickupProcCritter
end

procedure use_obj_on_p_proc begin
   UsedItemToCrit_Proc
end

procedure combat_p_proc begin
   effectAttak(0,0,0,0,0) //отравление min, облучение min, травма ног %, травма рук %, травма глаз %
end

procedure damage_p_proc begin
   set_damage_dude
end

procedure destroy_p_proc begin
   set_map_var(MVAR_SlavStoryA,-1);
   kill_critter_opt
end

procedure talk_p_proc begin
   if (map_var(MVAR_SlavStoryB) != 0) then begin
      z_floater(self_obj,103,COLOR_MSG_RED);
   end
   else if (map_var(MVAR_SlavStoryA) == 0) then begin
      dialog_proc(0,0,NodeStartDialog,-1,-1)
   end
   else begin
      floater(self_obj,102,COLOR_MSG_NORMAL);
   end
end

procedure Node998 begin
   set_enemy_dude;
end

procedure Node999 begin
end

procedure NodeStartDialog begin
   call NodeDialog;
end

procedure NodeDialog begin
   Reply(200)
   NAnswer(201,1,NodeDialog2)
end

procedure NodeDialog2 begin
   Reply(202)
   NAnswer(203,1,NodeDialog100)
   NAnswerSkill(206,3,NodeDialog202,SKILL_CONVERSANT,40,206,NodeDialog201)
   NAnswer(210,1,NodeDialog300)
   NAnswerStat(215,1,NodeDialog402,STAT_st,7,215,NodeDialog401)
end

procedure NodeDialog100 begin
   Reply(204)
   NAnswer(205,1,NodeNonFreedom)
end

procedure NodeDialog201 begin
   Reply(207)
   NAnswer(203,1,NodeDialog100)
   NAnswer(210,1,NodeDialog300)
   NAnswerStat(215,1,NodeDialog402,STAT_st,7,215,NodeDialog401)
end

procedure NodeDialog202 begin
   set_SLAVA(5)
   Reply(208)
   NAnswer(209,1,NodeFreedom)
end

procedure NodeDialog300 begin
   Reply(211)
   if (item_amnt(dude_obj,PID_BOOTLE_CAPS) >= 5) then begin
   NAnswer(212,1,NodeDialog301)
   end
   NAnswer(203,1,NodeDialog100)
   NAnswerSkill(206,3,NodeDialog202,SKILL_CONVERSANT,40,206,NodeDialog201)
   NAnswerStat(215,1,NodeDialog402,STAT_st,7,215,NodeDialog401)
end

procedure NodeDialog301 begin
   set_SLAVA(5)
   item_remove(dude_obj,PID_BOOTLE_CAPS,5)
   item_add(self_obj,PID_BOOTLE_CAPS,5)
   Reply(213)
   NAnswer(214,1,NodeFreedom)
end

procedure NodeDialog401 begin
   Reply(216)
   NAnswer(203,1,NodeDialog100)
   NAnswerSkill(206,3,NodeDialog202,SKILL_CONVERSANT,40,206,NodeDialog201)
   NAnswer(210,1,NodeDialog300)
end

procedure NodeDialog402 begin
   set_SLAVA(5)
   set_REP(-3)
   Reply(217)
   NAnswer(218,1,NodeFreedom)
end

procedure NodeFreedom begin
   bitDialogExp(bit_1,0)
   set_local_var(LVAR_Home_Tile,15256);
   set_local_var(LVAR_Home_Rotat,0);
   set_map_var(MVAR_SlavStoryA,1);
   Reply(220)
   NAnswer(221,1,Node999)
end

procedure NodeNonFreedom begin
   call NodeFreedom;
end
