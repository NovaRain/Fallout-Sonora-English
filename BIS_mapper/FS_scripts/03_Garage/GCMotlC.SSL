#include "..\headers\define.h"
//---------------------

#define NAME                            SCRIPT_GCMotlC
#define TOWN_REP_VAR                    GVAR_TOWN_REP_GARAGE  // привязка к репутации (-1, если не нужно)

#define NUM_TEAM                        TEAM_GARAGE_CLAN_B    // группа, к которой принадлежит персонаж (-1 если нужно оставить Team, заданный в редакторе)
#define NUM_AI                          AI_BANDIT             // AI персонажа (-1 если нужно оставить AI, заданный в редакторе)
#define KILL_SLAVA                      SLAVA_KILL_BAD        // слава за убийство этого персонажа (SLAVA_KILL_GOOD, SLAVA_KILL_BAD, SLAVA_KILL_NEITRAL, SLAVA_KILL_CHILD)
#define KILL_TOWN_REP                   2                     // репутация за убийство этого персонажа (REP_KILL_GOOD, REP_KILL_NEITRAL, REP_KILL_BAD, REP_KILL_CHILD, REP_KILL_CRITICAL)
#define KILL_FRAC_REP                   FRAC_NON              // принадлежность определенной фракции (-1, если не нужно)

#define FLAG_STEAL                      30 // Нижний порог навыка для кражи (для торговцев 200, для животных 300)
#define FLAG_ALCOHOL                    0  // Примет ли алкоголь от ГГ: 0 - принимает, 1 - не принимает
#define FLAG_FOOD                       0  // Примет ли пищу от ГГ: 0 - принимает, 1 - не принимает

//---------------------

procedure start;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure timed_event_p_proc;
procedure critter_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure pickup_p_proc;
procedure combat_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;

procedure Node998;
procedure Node999;
procedure NodeStartDialog;
procedure NodeFstDialog;
procedure NodeFstDialog2;
procedure NodeFstDialog3;
procedure NodeFstDialog4;
procedure NodeFstDialog5;
procedure NodeFstDialog6;
procedure NodeFstDialog7;
procedure NodeFstDialog8;
procedure NodeFstDialog9;
procedure NodeSndDialog;

//---------------------

//#define LVAR_Flag_A                     (6) // отвечает за ...

//---------------------



procedure start begin
end

procedure map_enter_p_proc begin
   if (is_loading_game == false) then begin
       set_start_home
       set_obj_visibility(self_obj, 1);
       if (map_var(MVAR_GARAGE_MOTEL_BOYS)!=0) then begin
       //destroy_object(self_obj);
       end
   end
end

procedure map_update_p_proc begin
   if (getQuest(GVAR_GARAGE_QST_MOTEL_BOYS) == qStart) then begin
       if (map_var(MVAR_GARAGE_MOTEL_BOYS) == 0) then begin
       set_obj_visibility(self_obj, 0);
       end
   end
end

procedure look_at_p_proc begin
   lookProcMsg
end

procedure description_p_proc begin
   dsrptProcMsg
end

procedure timed_event_p_proc begin
   // Таймер за номером 1 зарезервирован под перемещение персонажа по локации
   // Таймер за номером 2 зарезервирован под всплывающие реплики
   if (fixed_param == 1) then begin
       if (map_var(MVAR_GARAGE_MOTEL_BOYS)>0) then begin
       timer_move_random_tile(23308,4)
       end
       else begin
       timer_move_to_home
       end
   end
   if (fixed_param == 2) then begin
       if (map_var(MVAR_GARAGE_MOTEL_BOYS)==0) then begin
       //timer_float_reply(120,121)
       end
   end
end

procedure critter_p_proc begin
   set_critter_options(0,0) //условие нападения (0 личная вражда, 1 вражда клановая, 2 всегда), разворот к ГГ
end

procedure use_skill_on_p_proc begin
   skillUseSteal
   skillUseFAid
end

procedure pickup_p_proc begin
   pickupProcCritter
end

procedure use_obj_on_p_proc begin
   UsedItemToCrit_Proc
end

procedure combat_p_proc begin
   effectAttak(0,0,1,1,1) //отравление min, облучение min, травма ног %, травма рук %, травма глаз %
end

procedure damage_p_proc begin
   set_damage_dude
end

procedure destroy_p_proc begin
   set_map_var(MVAR_GARAGE_MOTEL_BOYS,-10);
   kill_critter_opt
end

procedure talk_p_proc begin
   if (map_var(MVAR_GARAGE_MOTEL_BOYS)>0) then begin
   floater(self_obj,110,COLOR_MSG_RED);
   end
   else if (map_var(MVAR_GARAGE_MOTEL_BOYS)<0) then begin
   floater(self_obj,111,COLOR_MSG_RED);
   end
   else begin
   dialog_proc(0,0,NodeStartDialog,-1,-1)
   end
end

procedure Node998 begin
   setNodeCombat;
end

procedure Node999 begin
end

procedure NodeStartDialog begin
   if (bitDialog(bit_1) == 0) then begin
      call NodeFstDialog;
   end
   else begin
      call NodeSndDialog;
   end
end

//--- ПЕРВЫЙ ДИАЛОГ

procedure NodeFstDialog begin
   bitDialogExp(bit_1,0)
   Reply(200)
   NAnswer(201,1,NodeFstDialog2)
   NAnswer(203,1,NodeFstDialog3)
end

procedure NodeFstDialog2 begin
   Reply(202)
   BAnswer(208,1,NodeFstDialog5)
   BAnswer(217,1,NodeFstDialog7)
   NAnswer(205,1,NodeFstDialog4)
end

procedure NodeFstDialog3 begin
   Reply(204)
   BAnswer(208,1,NodeFstDialog5)
   BAnswer(217,1,NodeFstDialog7)
   NAnswer(205,1,NodeFstDialog4)
end

procedure NodeFstDialog4 begin
   zReply(206)
   BAnswer(208,1,NodeFstDialog5)
   BAnswer(217,1,NodeFstDialog7)
   NAnswer(207,1,Node999)
end

procedure NodeFstDialog5 begin
   Reply(209)
   NAnswerSkill(212,3,NodeFstDialog6,SKILL_CONVERSANT,40,212,Node998)
   NAnswerRep(222,3,NodeFstDialog9,15,219,NodeFstDialog8)
   BAnswer(211,1,Node998)
   NAnswer(210,1,Node999)
end

procedure NodeFstDialog6 begin
   set_map_var(MVAR_GARAGE_MOTEL_BOYS, 1);
   zReply(214)
   NAnswer(215,1,Node999)
   NAnswer(216,1,Node999)
end

procedure NodeFstDialog7 begin
   Reply(218)
   BAnswer(208,1,NodeFstDialog5)
   NAnswer(207,1,Node999)
end

procedure NodeFstDialog8 begin
   Reply(220)
   NAnswer(221,1,Node999)
end

procedure NodeFstDialog9 begin
   set_map_var(MVAR_GARAGE_MOTEL_BOYS, 1);
   Reply(223)
   NAnswer(215,1,Node999)
   NAnswer(216,1,Node999)
end

//--- ПОВТОРНЫЙ ДИАЛОГ

procedure NodeSndDialog begin
   call NodeFstDialog;
   //Reply(210)
   //NAnswer(212,1,Node999)
end
