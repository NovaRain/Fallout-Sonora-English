#include "..\headers\define.h"
//---------------------

#define NAME                            SCRIPT_GCBarGmr
#define TOWN_REP_VAR                    GVAR_TOWN_REP_GARAGE  // привязка к репутации (-1, если не нужно)

#define NUM_TEAM                        TEAM_GARAGE_CITIZEN   // группа, к которой принадлежит персонаж (-1 если нужно оставить Team, заданный в редакторе)
#define NUM_AI                          AI_PERSON_NORMAL      // AI персонажа (-1 если нужно оставить AI, заданный в редакторе)
#define KILL_SLAVA                      SLAVA_KILL_GOOD       // слава за убийство этого персонажа (SLAVA_KILL_GOOD, SLAVA_KILL_BAD, SLAVA_KILL_NEITRAL, SLAVA_KILL_CHILD)
#define KILL_TOWN_REP                   REP_KILL_GOOD         // репутация за убийство этого персонажа (REP_KILL_GOOD, REP_KILL_NEITRAL, REP_KILL_BAD, REP_KILL_CHILD, REP_KILL_CRITICAL)
#define KILL_FRAC_REP                   FRAC_NON              // принадлежность определенной фракции (-1, если не нужно)

#define FLAG_STEAL                      30 // Нижний порог навыка для кражи (для торговцев 200, для животных 300)
#define FLAG_ALCOHOL                    0  // Примет ли алкоголь от ГГ: 0 - принимает, 1 - не принимает
#define FLAG_FOOD                       0  // Примет ли пищу от ГГ: 0 - принимает, 1 - не принимает

//---------------------

procedure start;
procedure map_enter_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure timed_event_p_proc;
procedure critter_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure pickup_p_proc;
procedure combat_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;

procedure Node998;
procedure Node999;
procedure NodeStartDialog;
procedure NodeFstDialog;
procedure NodeFstDialog2;
procedure NodeFstDialog3;
procedure NodeFstDialog4;
procedure NodeFstDialog5;
procedure NodeFstDialog6;
procedure NodeFstDialog7;
procedure NodeSndDialog;

//---------------------

//#define LVAR_Flag_A                     (6) // отвечает за ...

//---------------------



procedure start begin
end

procedure map_enter_p_proc begin
   if (is_loading_game == false) then begin
       set_start_home
   end
end

procedure look_at_p_proc begin
   lookProcMsg
end

procedure description_p_proc begin
   dsrptProcMsg
end

procedure timed_event_p_proc begin
   // Таймер за номером 1 зарезервирован под перемещение персонажа по локации
   // Таймер за номером 2 зарезервирован под всплывающие реплики
   if (fixed_param == 1) then begin
       timer_move_to_home
   end
   if (fixed_param == 2) then begin
       //timer_float_reply(120,121)
   end
end

procedure critter_p_proc begin
   set_critter_options(1,0) //условие нападения (0 личная вражда, 1 вражда клановая, 2 всегда), разворот к ГГ
end

procedure use_skill_on_p_proc begin
   skillUseSteal
   skillUseFAid
end

procedure pickup_p_proc begin
   pickupProcCritter
end

procedure use_obj_on_p_proc begin
   UsedItemToCrit_Proc
   if (itemTypeUseDude == 2) then begin
   bitDialogExp(bit_2,0)
   end
end

procedure combat_p_proc begin
   effectAttak(0,0,0,0,0) //отравление min, облучение min, травма ног %, травма рук %, травма глаз %
end

procedure damage_p_proc begin
   set_damage_dude
end

procedure destroy_p_proc begin
   kill_critter_opt
end

procedure talk_p_proc begin
   if ((map_var(MVAR_GARAGE_BAR_PUT) == 0) and (bitDialog(bit_2) == 0)) then begin                      
      z_floater(self_obj,102,COLOR_MSG_NORMAL);
   end
   else if (bitDialog(bit_3) != 0) then begin
   floater(self_obj,104,COLOR_MSG_NORMAL);
   end
   else if (item_amnt(self_obj,PID_M_STIMPAK)<=0) then begin                      
      z_floater(self_obj,103,COLOR_MSG_NORMAL);
   end
   else begin
   setReaction(1) // Отношение к ГГ (1 - персонаж положительный, -1 отрицательный, 0 нейтральный)
   dialog_proc(0,0,NodeStartDialog,-1,-1)
   end
end

procedure Node998 begin
end

procedure Node999 begin
end

procedure NodeStartDialog begin
   if (bitDialog(bit_1) == 0) then begin
   call NodeFstDialog;
   end
   else begin
   call NodeSndDialog;
   end
end

//--- ПЕРВЫЙ ДИАЛОГ

procedure NodeFstDialog begin
   //bitDialogExp(bit_1,0)
   Reply(200)
   NAnswer(201,1,NodeFstDialog2)
   NAnswer(204,1,NodeFstDialog3)
   NAnswer(207,1,Node999)
end

procedure NodeFstDialog2 begin
   Reply(202)
   NAnswer(203,1,NodeFstDialog3)
   NAnswer(207,1,Node999)
end

procedure NodeFstDialog3 begin
   Reply(205)
   NAnswer(201,1,NodeFstDialog2)
   NAnswer(208,1,NodeFstDialog4)
   NAnswer(206,1,Node999)
end

procedure NodeFstDialog4 begin
   if (item_amnt(dude_obj,PID_BOOTLE_CAPS)>=10) then begin
   call NodeFstDialog5;
   end
   else begin
   Reply(209)
   NAnswer(210,1,Node999)
   end
end

procedure NodeFstDialog5 begin
   item_remove(dude_obj,PID_BOOTLE_CAPS,10)
   item_add(self_obj,PID_BOOTLE_CAPS,10)
   play_sfx("SHUFFLE");

   Reply(211)
   NAnswer(212,1,NodeFstDialog6)
   BAnswer(213,1,NodeFstDialog6)
end

procedure NodeFstDialog6 begin
   if (has_skill(dude_obj, SKILL_GAMBLING) >= random(0,100)) then begin
   Reply(217)
   NAnswer(218,1,NodeFstDialog7)
   end
   else begin
   Reply(214)
   NAnswer(216,1,Node999)
   BAnswer(215,1,Node999)
   end
end

procedure NodeFstDialog7 begin
   bitDialogExp(bit_3,0)
   item_add(dude_obj,PID_BOOTLE_CAPS,10)
   item_add(dude_obj,PID_M_STIMPAK,1)
   item_remove(self_obj,PID_M_STIMPAK,1)
   set_REP(-1)

   Reply(219)
   NAnswer(220,1,Node999)
   BAnswer(221,1,Node999)
end

//--- ПОВТОРНЫЙ ДИАЛОГ

procedure NodeSndDialog begin
   Reply(210)
   NAnswer(211,1,Node999)
end

