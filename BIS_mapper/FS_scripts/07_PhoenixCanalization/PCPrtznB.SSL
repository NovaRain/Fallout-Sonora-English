#include "..\headers\define.h"
//--------------------- Элиса

#define NAME                            SCRIPT_PCPrtznB
#define TOWN_REP_VAR                    GVAR_TOWN_REP_PHOENIX // привязка к репутации (-1, если не нужно)

#define NUM_TEAM                        TEAM_PHOENIX_COLLECTOR // группа, к которой принадлежит персонаж (-1 если нужно оставить Team, заданный в редакторе)
#define NUM_AI                          AI_GUARDS             // AI персонажа (-1 если нужно оставить AI, заданный в редакторе)
#define KILL_SLAVA                      SLAVA_KILL_GOOD       // слава за убийство этого персонажа (SLAVA_KILL_GOOD, SLAVA_KILL_BAD, SLAVA_KILL_NEITRAL, SLAVA_KILL_CHILD)
#define KILL_TOWN_REP                   REP_KILL_GOOD         // репутация за убийство этого персонажа (REP_KILL_GOOD, REP_KILL_NEITRAL, REP_KILL_BAD, REP_KILL_CHILD, REP_KILL_CRITICAL)
#define KILL_FRAC_REP                   FRAC_NON              // принадлежность определенной фракции (-1, если не нужно)

#define FLAG_STEAL                      65 // Нижний порог навыка для кражи (для торговцев 200, для животных 300)
#define FLAG_ALCOHOL                    1  // Примет ли алкоголь от ГГ: 0 - принимает, 1 - не принимает
#define FLAG_FOOD                       1  // Примет ли пищу от ГГ: 0 - принимает, 1 - не принимает

//---------------------

procedure start;
procedure map_enter_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure timed_event_p_proc;
procedure critter_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure pickup_p_proc;
procedure combat_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;

procedure Node998;
procedure Node999;
procedure NodeStartDialog;
procedure NodeFstDialog;
procedure NodeSndDialog;
procedure NodeAnswer101;
procedure NodeAnswer102;
procedure NodeAnswer103;
procedure NodeAnswer104;
procedure NodeAnswer105;
procedure NodeAnswer106;
procedure NodeAnswer107;
procedure NodeAnswer108;
procedure NodeAnswer200;
procedure NodeAnswer201;
procedure NodeAnswer202;
procedure NodeAnswer203;
procedure NodeAnswer204;
procedure NodeSkillUp;
procedure NodeSkillUp2;
procedure NodeSkillUp3;
procedure NodeSkillUp4;
procedure NodeSkillUp5;
procedure NodeQst;
procedure NodeQst1;
procedure NodeQst2;
procedure NodeQst3;
procedure NodeQst4;
procedure NodeQst101;
procedure NodeQst102;
procedure NodeQst103;
procedure NodeQst104;
procedure NodeQst105;
procedure NodeQst106;
procedure NodeQst107;
procedure NodeQstEnd;

//---------------------

#define LVAR_Inv_Qst                     (6) // выдача снаряжения для задания
#define LVAR_SkillUp                     (7) // повышение навыка Ловушки


//---------------------



procedure start begin
end

procedure map_enter_p_proc begin
   if (is_loading_game == false) then begin
       set_start_home
       if ((getQuest(GVAR_PHENIX_CULT_DESTROY) >= qEnd) or (getQuest(GVAR_PHENIX_QST_CULT_B) >= qEnd)) then begin
       rm_timer_event(self_obj);
       set_obj_visibility(self_obj, 1);
       end
   end
end

procedure look_at_p_proc begin
   lookProcMsg
end

procedure description_p_proc begin
   dsrptProcMsg
end

procedure timed_event_p_proc begin
   // Таймер за номером 1 зарезервирован под перемещение персонажа по локации
   // Таймер за номером 2 зарезервирован под всплывающие реплики
   if (fixed_param == 1) then begin
       if (gvar_bit(GVAR_DIALOGS_FLAGS_BIT, bit_13) == 0) then begin
       timer_move_to_home
       end
       else begin
       timer_move_random_home(3)
       end
   end
   if (fixed_param == 2) then begin
       //timer_float_reply(120,121)
   end
end

procedure critter_p_proc begin
   set_critter_options(1,0) //условие нападения (0 личная вражда, 1 вражда клановая, 2 всегда), разворот к ГГ
end

procedure use_skill_on_p_proc begin
   skillUseSteal
   skillUseFAid
end

procedure pickup_p_proc begin
   pickupProcCritter
end

procedure use_obj_on_p_proc begin
   UsedItemToCrit_Proc
end

procedure combat_p_proc begin
   effectAttak(0,0,1,1,1) //отравление min, облучение min, травма ног %, травма рук %, травма глаз %
end

procedure damage_p_proc begin
   set_damage_dude
end

procedure destroy_p_proc begin
   set_gvar_bit_off(GVAR_DIALOGS_FLAGS_BIT, bit_17);
   kill_critter_opt
end

procedure talk_p_proc begin
   setReaction(0) // Отношение к ГГ (1 - персонаж положительный, -1 отрицательный, 0 нейтральный)
   if (gvar_bit(GVAR_DIALOGS_FLAGS_BIT, bit_13) == 0) then begin
      floater(self_obj,102,COLOR_MSG_RED);
   end
   else if (getQuest(GVAR_PHENIX_PARTY_QST_B) >= qEnd) then begin
      floater(self_obj,104,COLOR_MSG_GREY);
   end
   else if (getQuest(GVAR_PHENIX_PARTY_QST_B) <= qStop) then begin
      floater(self_obj,103,COLOR_MSG_RED);
   end
   else begin
      fracReaction(GVAR_TITUL_ARIZONA_RANGER,20) // Поправка к отношению за принадлежность к фракциям
      fracReaction(GVAR_TITUL_PHENIX_CULT,-100) // Поправка к отношению за принадлежность к фракциям
      dialog_proc(0,0,NodeStartDialog,-1,-1)
   end
end

procedure Node998 begin
   set_gvar_bit_off(GVAR_DIALOGS_FLAGS_BIT, bit_17);
   set_enemy_dude;
end

procedure Node999 begin
end

procedure NodeStartDialog begin
   if (bitDialog(bit_1) == 0) then begin
   call NodeFstDialog;
   end
   else begin
   call NodeSndDialog;
   end
end

//--- ПЕРВЫЙ ДИАЛОГ

procedure NodeFstDialog begin
   bitDialogExp(bit_1,0)
   Reply(200)
   NAnswer(201,1,NodeSndDialog)
   NAnswer(202,1,NodeSndDialog)
end

//--- ПОВТОРНЫЙ ДИАЛОГ

procedure NodeSndDialog begin
   zReply(210)

   NAnswer(220,3,NodeAnswer101)
   NAnswer(226,1,NodeAnswer103)
   NAnswer(239,1,NodeAnswer108)

   if (getQuest(GVAR_PHENIX_PARTY_QST_A) == qStart) then begin
      if (bitDialog(bit_3) == 0) then begin
      NAnswer(300,1,NodeQst)
      end
      else begin
      NAnswer(312,1,NodeQst1)
      end
   end

   if (getQuest(GVAR_PHENIX_PARTY_QST_B) == qStart) then begin
      if (local_var(LVAR_Inv_Qst) == 0) then begin
      NAnswer(250,3,NodeAnswer200)
      end
   end

   if (getQuest(GVAR_PHENIX_PARTY_QST_A) >= qStart) then begin
      if (local_var(LVAR_SkillUp) == 0) then begin
      NAnswer(270,4,NodeSkillUp)
      end
   end

   NAnswer(211,1,Node999)
end

//--- РАССПРОСЫ

procedure NodeAnswer101 begin
   Reply(221)
   NAnswer(222,5,NodeAnswer102)
   NAnswer(223,1,NodeSndDialog)
end

procedure NodeAnswer102 begin
   Reply(224)
   NAnswer(225,1,NodeSndDialog)
end

procedure NodeAnswer103 begin
   Reply(227)
   NAnswer(228,4,NodeAnswer104)
   NAnswer(230,7,NodeAnswer105)
   NAnswer(232,1,NodeSndDialog)
end

procedure NodeAnswer104 begin
   Reply(229)
   NAnswer(230,7,NodeAnswer105)
   NAnswer(233,1,NodeSndDialog)
end

procedure NodeAnswer105 begin
   bitDialogExp(bit_2,50)
   Reply(231)
   NAnswer(233,1,NodeSndDialog)
end

procedure NodeAnswer106 begin
   Reply(235)
   NAnswer(236,3,NodeAnswer107)
   NAnswer(233,1,NodeSndDialog)
end

procedure NodeAnswer107 begin
   Reply(237)
   NAnswer(238,1,NodeSndDialog)
end

procedure NodeAnswer108 begin
   Reply(240)
   NAnswer(234,1,NodeAnswer106)
end

//--- СНАРЯЖЕНИЕ

procedure NodeAnswer200 begin
   Reply(251)
   NAnswer(257,1,NodeAnswer202)
   NAnswer(259,1,NodeAnswer203)
   NAnswer(261,1,NodeAnswer204)
   NAnswer(252,1,Node999)
end

procedure NodeAnswer201 begin
   set_gvar_bit_on(GVAR_DIALOGS_FLAGS_BIT, bit_17);
   Reply(253)
   NAnswer(254,1,Node999)
end

procedure NodeAnswer202 begin
   inc_local_var(LVAR_Inv_Qst);
   item_add(dude_obj,PID_W_RIFLE_HUNTING,1)
   item_add(dude_obj,PID_AMMO_308,20)
   Reply(258)
   NAnswer(256,1,NodeAnswer201)
end

procedure NodeAnswer203 begin
   inc_local_var(LVAR_Inv_Qst);
   item_add(dude_obj,PID_W_SMG_10,1)
   item_add(dude_obj,PID_AMMO_10_MM,30)
   item_add(dude_obj,PID_W_GRENADE_FRAG,2)
   item_add(dude_obj,PID_M_STIMPAK,1)
   Reply(260)
   NAnswer(256,1,NodeAnswer201)
end

procedure NodeAnswer204 begin
   inc_local_var(LVAR_Inv_Qst);
   item_add(dude_obj,PID_M_STIMPAK,2)
   item_add(dude_obj,PID_TOOL_FLARE,3)
   item_add(dude_obj,PID_TOOL_PLASTIC_EXPLOSIVES,1)
   item_add(dude_obj,PID_TOOL_STEALTH_BOY,1)
   Reply(262)
   NAnswer(256,1,NodeAnswer201)
end

//--- НАВЫК

procedure NodeSkillUp begin
   Reply(271)
   NAnswer(272,5,NodeSkillUp2)
   NAnswer(275,1,NodeSndDialog)
end

procedure NodeSkillUp2 begin
   Reply(273)
   if (item_amnt(dude_obj,PID_BOOTLE_CAPS) >= 350) then begin
   NAnswer(279,1,NodeSkillUp5)
   end
   if (global_var(GVAR_PHENIX_STATUS_SPYPARTY) >= 2) then begin
   NAnswer(276,4,NodeSkillUp3)
   end
   NAnswer(274,1,Node999)
end

procedure NodeSkillUp3 begin
   Reply(277)
   if (item_amnt(dude_obj,PID_BOOTLE_CAPS) >= 100) then begin
   NAnswer(278,1,NodeSkillUp4)
   end
   NAnswer(274,1,Node999)
end

procedure NodeSkillUp4 begin
   inc_local_var(LVAR_SkillUp);
   item_remove(dude_obj,PID_BOOTLE_CAPS,100)
   item_add(self_obj,PID_BOOTLE_CAPS,100)
   PLAY_FADE
   game_time_advance(ONE_GAME_HOUR);
   if (is_skill_tagged(SKILL_TRAPS) == true) then begin
   skill_up(SKILL_TRAPS,6);
   end
   else begin
   skill_up(SKILL_TRAPS,5);
   end
   call Node999;
end

procedure NodeSkillUp5 begin
   inc_local_var(LVAR_SkillUp);
   item_remove(dude_obj,PID_BOOTLE_CAPS,350)
   item_add(self_obj,PID_BOOTLE_CAPS,350)
   PLAY_FADE
   game_time_advance(ONE_GAME_HOUR);
   if (is_skill_tagged(SKILL_TRAPS) == true) then begin
   skill_up(SKILL_TRAPS,6);
   end
   else begin
   skill_up(SKILL_TRAPS,5);
   end

   call Node999;
end

//--- КВЕСТЫ

procedure NodeQst begin
   bitDialogExp(bit_3,0)
   Reply(301)
   NAnswer(302,1,NodeQst2)
   NAnswer(305,1,NodeQst3)
   NAnswer(310,1,NodeQst4)
   NAnswer(304,1,Node999)
end

procedure NodeQst1 begin
   Reply(313)
   if (global_var(GVAR_PHENIX_STATUS_SPYPARTY) < 0) then begin
   NAnswer(315,1,NodeQst101)
   end
   if (global_var(GVAR_PHENIX_STATUS_SPYPARTY) > 0) then begin
   NAnswer(323,1,NodeQst104)
   end
   if (global_var(GVAR_PHENIX_STATUS_SPYRADIO) > 0) then begin
   NAnswer(327,1,NodeQst105)
   end
   NAnswer(302,1,NodeQst2)
   NAnswer(305,1,NodeQst3)
   NAnswer(310,1,NodeQst4)
   NAnswer(314,1,Node999)
end

procedure NodeQst2 begin
   Reply(303)
   NAnswer(305,1,NodeQst3)
   NAnswer(310,1,NodeQst4)
   NAnswer(304,1,Node999)
end

procedure NodeQst3 begin
   Reply(306)
   NAnswer(302,1,NodeQst2)
   NAnswer(310,1,NodeQst4)
   NAnswer(307,1,Node999)
   BAnswer(308,1,Node999)
end

procedure NodeQst4 begin
   Reply(311)
   NAnswer(302,1,NodeQst2)
   NAnswer(305,1,NodeQst3)
   NAnswer(304,1,Node999)
end


procedure NodeQst101 begin
   Reply(316)
   if (global_var(GVAR_PHENIX_STATUS_SPYRADIO) > 0) then begin
   NAnswer(318,1,NodeQst102)
   end
   NAnswer(317,1,NodeQst103)
end

procedure NodeQst102 begin
   Reply(319)
   NAnswer(320,1,NodeQstEnd)
end

procedure NodeQst103 begin
   Reply(321)
   NAnswer(322,1,Node999)
end

procedure NodeQst104 begin
   Reply(324)
   if (global_var(GVAR_PHENIX_STATUS_SPYRADIO) > 0) then begin
   NAnswer(318,1,NodeQst102)
   end
   NAnswer(326,1,Node999)
end

procedure NodeQst105 begin
   if (global_var(GVAR_PHENIX_STATUS_SPYPARTY) > 0) then begin
   Reply(328)
   NAnswer(329,1,NodeQstEnd)
   end
   else begin
   Reply(330)
   if (global_var(GVAR_PHENIX_STATUS_SPYPARTY) < 0) then begin
   NAnswer(331,1,NodeQst106)
   end
   NAnswer(334,1,NodeQst107)
   end
end

procedure NodeQst106 begin
   Reply(332)
   NAnswer(333,1,NodeQstEnd)
end

procedure NodeQst107 begin
   Reply(335)
   NAnswer(336,1,Node999)
end

procedure NodeQstEnd begin
   setQuest(GVAR_PHENIX_PARTY_QST_A,qEnd);
   exp_add(350);
   Reply(337)
   NAnswer(338,1,Node999)
end
