#include "..\headers\define.h"
//---------------------

#define NAME                            SCRIPT_ICGate
#define TOWN_REP_VAR                    GVAR_TOWN_REP_INFERNO_CULT  // привязка к репутации (-1, если не нужно)

#define NUM_TEAM                        TEAM_INFIERNO_CULT    // группа, к которой принадлежит персонаж (-1 если нужно оставить Team, заданный в редакторе)
#define NUM_AI                          AI_SUPERMUTANT        // AI персонажа (-1 если нужно оставить AI, заданный в редакторе)
#define KILL_SLAVA                      SLAVA_KILL_BAD        // слава за убийство этого персонажа (SLAVA_KILL_GOOD, SLAVA_KILL_BAD, SLAVA_KILL_NEITRAL, SLAVA_KILL_CHILD)
#define KILL_TOWN_REP                   REP_KILL_CRITICAL     // репутация за убийство этого персонажа (REP_KILL_GOOD, REP_KILL_NEITRAL, REP_KILL_BAD, REP_KILL_CHILD, REP_KILL_CRITICAL)
#define KILL_FRAC_REP                   FRAC_NON              // принадлежность определенной фракции (-1, если не нужно)

#define FLAG_STEAL                      110 // Нижний порог навыка для кражи (для торговцев 200, для животных 300)
#define FLAG_ALCOHOL                    1  // Примет ли алкоголь от ГГ: 0 - принимает, 1 - не принимает
#define FLAG_FOOD                       0  // Примет ли пищу от ГГ: 0 - принимает, 1 - не принимает

//---------------------

procedure start;
procedure map_enter_p_proc;
procedure look_at_p_proc;
procedure timed_event_p_proc;
procedure critter_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure pickup_p_proc;
procedure combat_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;

procedure Node998;
procedure Node999;
procedure NodeStartDialog;
procedure NodeFstDialog;
procedure NodeFstDialog1;
procedure NodeFstDialog1b;
procedure NodeFstDialog2;
procedure NodeFstDialog3;
procedure NodeFstDialog4;
procedure NodeFstDialog5;
procedure NodeSndDialog;
procedure NodeAnswer;
procedure NodeAnswer100;
procedure NodeAnswer101;
procedure NodeAnswer102;
procedure NodeAnswer103;
procedure NodeAnswer200;
procedure NodeAnswer201;
procedure NodeAnswer202;
procedure NodeAnswer203;
procedure NodeAnswer204;
procedure NodeAnswer400;
procedure NodeAnswer401;
procedure NodeAnswer402;
procedure NodeAnswer403;
procedure NodeAnswer404;
procedure NodeAnswer405;

//---------------------

//#define LVAR_Flag_A                     (6) // отвечает за ...

import variable box_stop_use;

//---------------------



procedure start begin
end

procedure map_enter_p_proc begin
   if (is_loading_game == false) then begin
       set_start_home
   end
end

procedure look_at_p_proc begin
   lookProcMsg
end

procedure timed_event_p_proc begin
   // Таймер за номером 1 зарезервирован под перемещение персонажа по локации
   // Таймер за номером 2 зарезервирован под всплывающие реплики
   if (fixed_param == 1) then begin
       timer_move_to_home
   end
   if (fixed_param == 2) then begin
       //timer_float_reply(120,121)
   end
   if (fixed_param == 3) then begin
       move_to(dude_obj,16100,self_elevation);
   end
end

procedure critter_p_proc begin
   if (global_var(GVAR_INF_STATUS_APOSTOL)<=0) then begin
   set_using_stop // привязка хозяина и объекта (удалить, если не нужно)
   end
   set_critter_options(1,0) //условие нападения (0 личная вражда, 1 вражда клановая, 2 всегда), разворот к ГГ

   /*
   if (combat_is_initialized == false) then begin
       if (partyPidBos != 0) then begin
         if (elevation(partyPidBos) == self_elevation) then begin
         //if (obj_can_see_obj(self_obj,partyPidBos) == true) then begin
         if (tile_distance_objs(self_obj,partyPidBos) <= 13) then begin
         if (getQuest(GVAR_INF_QST_PALADIN_A) < qEnd) then begin
            if (getQuest(GVAR_INF_QST_APOSTOL_A) < qEnd) then begin
            floater(partyPidBos,105,COLOR_MSG_RED);
            attack(partyPidBos);
            end
         end
         end
         end
      end
   end
   */

   if ((map_var(MVAR_INF_DOPUSK) == 0) and (bitDialog(bit_1) == 0)) then begin
   dialogue_system_forcing(10)
   end
end

procedure use_skill_on_p_proc begin
   skillUseSteal
   skillUseFAid
end

procedure pickup_p_proc begin
   pickupProcCritter
end

procedure use_obj_on_p_proc begin
   UsedItemToCrit_Proc
   if (bitDialog(bit_4) != 0) then begin
   if (itemTypeUseDude == 3) then begin
   bitDialogExp(bit_6,0)
   end
   end
end

procedure combat_p_proc begin
   effectAttak(0,0,2,2,2) //отравление min, облучение min, травма ног %, травма рук %, травма глаз %
end

procedure damage_p_proc begin
   set_damage_dude
end

procedure destroy_p_proc begin
   kill_critter_opt
end

procedure talk_p_proc begin
   setReaction(0) // Отношение к ГГ (1 - персонаж положительный, -1 отрицательный, 0 нейтральный)
   dialog_proc(0,0,NodeStartDialog,HEAD_INIFERNO_GATE,BACKGROUND_WASTELND)
end

procedure Node998 begin
   set_map_var(MVAR_INF_DOPUSK,-1);
   setNodeCombat;
end

procedure Node999 begin
end

procedure NodeStartDialog begin
   if (getQuest(GVAR_INF_QST_APOSTOL_A) != qZero) then begin
   bitDialogExp(bit_1,0) // Опция для удобства теста в маппере
   end
   if (map_var(MVAR_INF_DOPUSK)>0) then begin
   bitDialogExp(bit_1,0) // Опция для удобства теста в маппере
   end

   if (bitDialog(bit_1) == 0) then begin
   call NodeFstDialog;
   end
   else begin
   call NodeSndDialog;
   end
end

//--- ПЕРВЫЙ ДИАЛОГ

procedure NodeFstDialog begin
   bitDialogExp(bit_1,0)
   Reply(200)
   NAnswer(201,1,NodeFstDialog2)
   BAnswer(202,1,NodeFstDialog1)
   GAnswer(209,1,NodeFstDialog1b)
end

procedure NodeFstDialog1 begin
   setBonusReaction(-20)
   set_REP(-1)
   call NodeFstDialog2;
end

procedure NodeFstDialog1b begin
   setBonusReaction(20)
   set_REP(1)
   call NodeFstDialog2;
end

procedure NodeFstDialog2 begin
   Reply(203)
   NAnswer(204,1,NodeFstDialog5)
   BAnswer(205,1,NodeFstDialog3)
   GAnswer(212,1,NodeFstDialog5)
end

procedure NodeFstDialog3 begin
   setBonusReaction(-20)
   set_REP(-1)
   Reply(206)
   NAnswer(207,1,NodeFstDialog5)
   BAnswer(208,1,Node998)
end

procedure NodeFstDialog4 begin
   Reply(206)
   NAnswer(207,1,NodeFstDialog5)
   BAnswer(208,1,Node998)
end

procedure NodeFstDialog5 begin
   add_timer_event(self_obj,1,3);
   call Node999;
end

//--- ПОВТОРНЫЙ ДИАЛОГ

procedure NodeSndDialog begin
   Reply(210)

   if (global_var(GVAR_INF_STATUS_APOSTOL) == 0) then begin
   NAnswer(220,3,NodeAnswer)
   NAnswer(244,3,NodeAnswer102)
   end

   if (global_var(GVAR_TITUL_REBIRTH) > 0) then begin
   if (bitDialog(bit_5) == 0) then begin
      if (bitDialog(bit_4) == 0) then begin
      NAnswer(250,3,NodeAnswer400)
      end
      else begin
      NAnswer(260,3,NodeAnswer403)
      end
   end
   end

   NAnswer(211,1,Node999)
end


procedure NodeAnswer begin
   Reply(random(221,222))
   NAnswerSkill(227,3,NodeAnswer101,SKILL_CONVERSANT,40,225,NodeAnswer100)
   BAnswer(230,3,NodeAnswer200)
   NAnswer(224,1,Node999)
end

procedure NodeAnswer100 begin
   Reply(226)
   NAnswer(229,1,Node999)
end

procedure NodeAnswer101 begin
   bitDialogExp(bit_2,25)
   Reply(228)
   NAnswer(229,1,NodeSndDialog)
end

procedure NodeAnswer102 begin
   Reply(245)
   NAnswer(246,1,NodeAnswer103)
   GAnswer(247,1,NodeAnswer103)
end

procedure NodeAnswer103 begin
   Reply(248)
   NAnswer(249,1,NodeSndDialog)
end

procedure NodeAnswer200 begin
   Reply(231)
   NAnswer(233,1,NodeAnswer201)
   NAnswer(236,1,NodeAnswer202)
   NAnswer(232,1,Node999)
end

procedure NodeAnswer201 begin
   Reply(234)
   NAnswer(237,1,NodeAnswer202)
   NAnswer(235,1,Node999)
end

procedure NodeAnswer202 begin
   Reply(238)
   NAnswer(239,1,NodeAnswer203)
end

procedure NodeAnswer203 begin
   Reply(240)
   NAnswer(241,1,NodeAnswer204)
end

procedure NodeAnswer204 begin
   bitDialogExp(bit_3,25)
   Reply(242)
   NAnswer(243,1,Node999)
end

procedure NodeAnswer400 begin
   bitDialogExp(bit_4,0)
   Reply(251)
   NAnswer(252,1,NodeAnswer401)
end

procedure NodeAnswer401 begin
   item_add(dude_obj,PID_W_MICROWAVE_PISTOL,1)
   Reply(253)
   NAnswer(254,1,NodeAnswer402)
end

procedure NodeAnswer402 begin
   Reply(255)
   NAnswer(256,1,Node999)
   BAnswer(257,1,Node999)
end

procedure NodeAnswer403 begin
   if (bitDialog(bit_6) == 0) then begin
   Reply(261)
   NAnswer(256,1,Node999)
   BAnswer(257,1,Node999)
   end
   else begin
   Reply(262)
   GAnswer(263,1,NodeAnswer404)
   GAnswer(265,1,NodeAnswer405)
   NAnswer(264,1,Node999)
   end
end

procedure NodeAnswer404 begin
   bitDialogExp(bit_5,0)
   PLAY_FADE
   if (is_skill_tagged(SKILL_ENERGY_WEAPONS) == true) then begin
   skill_up(SKILL_ENERGY_WEAPONS,6);
   end
   else begin
   skill_up(SKILL_ENERGY_WEAPONS,5);
   end
   call Node999;
end

procedure NodeAnswer405 begin
   bitDialogExp(bit_5,0)
   PLAY_FADE
   if (is_skill_tagged(SKILL_BIG_GUNS) == true) then begin
   skill_up(SKILL_BIG_GUNS,6);
   end
   else begin
   skill_up(SKILL_BIG_GUNS,5);
   end
   call Node999;
end
