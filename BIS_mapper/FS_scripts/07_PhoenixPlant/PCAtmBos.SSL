#include "..\headers\define.h"
//---------------------

#define NAME                            SCRIPT_PCAtmBos
#define TOWN_REP_VAR                    GVAR_TOWN_REP_PHOENIX_PLANT   // привязка к репутации (-1, если не нужно)

#define NUM_TEAM                        TEAM_PHOENIX_PLANT    // группа, к которой принадлежит персонаж (-1 если нужно оставить Team, заданный в редакторе)
//#define NUM_AI                          AI_GUARD_ELECTR       // AI персонажа (-1 если нужно оставить AI, заданный в редакторе)
#define NUM_AI                          AI_GHOUL_GENERIC      // AI персонажа (-1 если нужно оставить AI, заданный в редакторе)
#define KILL_SLAVA                      SLAVA_KILL_GOOD       // слава за убийство этого персонажа (SLAVA_KILL_GOOD, SLAVA_KILL_BAD, SLAVA_KILL_NEITRAL, SLAVA_KILL_CHILD)
#define KILL_TOWN_REP                   REP_KILL_CRITICAL     // репутация за убийство этого персонажа (REP_KILL_GOOD, REP_KILL_NEITRAL, REP_KILL_BAD, REP_KILL_CHILD, REP_KILL_CRITICAL)
#define KILL_FRAC_REP                   FRAC_NON              // принадлежность определенной фракции (-1, если не нужно)

#define FLAG_STEAL                      65 // Нижний порог навыка для кражи (для торговцев 200, для животных 300)
#define FLAG_ALCOHOL                    0  // Примет ли алкоголь от ГГ: 0 - принимает, 1 - не принимает
#define FLAG_FOOD                       1  // Примет ли пищу от ГГ: 0 - принимает, 1 - не принимает

//---------------------

procedure start;
procedure map_enter_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure timed_event_p_proc;
procedure critter_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure pickup_p_proc;
procedure combat_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;

procedure Node998;
procedure Node999;
procedure NodeStartDialog;
procedure NodeFstDialog;
procedure NodeFstDialog2;
procedure NodeFstDialog3;
procedure NodeFstDialog4;
procedure NodeFstDialog5;
procedure NodeFstDialog6;
procedure NodeFstDialog7; //added to makes sense of the negative answer to the job offer - cambragol
procedure NodeSndDialog;
procedure NodeAnswer100;
procedure NodeQst100;
procedure NodeQst101;
procedure NodeQst102;
procedure NodeQst103;
procedure NodeQst104;
procedure NodeQst105;
procedure NodeQst200;
procedure NodeQst201;
procedure NodeQst202;
procedure NodeQst203;
procedure NodeQst204;
procedure NodeQst205;
procedure NodeQst206;
procedure NodeQst207;

//---------------------

//#define LVAR_Flag_A                     (6) // отвечает за ...

variable orator_obj;                     // указатель на персонажа-болванку в кат-сцене

//---------------------



procedure start begin
end

procedure map_enter_p_proc begin
   if (is_loading_game == false) then begin
       set_start_home
   end
end

procedure look_at_p_proc begin
   lookProcMsg
end

procedure description_p_proc begin
   dsrptProcMsg
end

procedure timed_event_p_proc begin
   // Таймер за номером 1 зарезервирован под перемещение персонажа по локации
   // Таймер за номером 2 зарезервирован под всплывающие реплики
   if (fixed_param == 1) then begin
       timer_move_to_home
   end
   if (fixed_param == 2) then begin
       //timer_float_reply(120,121)
   end
   if (fixed_param == 3) then begin
       game_ui_disable;
       tile_set_center(dude_tile);
       add_timer_event(self_obj, 10, 4);
   end
   if (fixed_param == 4) then begin
       floater(orator_obj,111,COLOR_MSG_RED);
       floater(self_obj,110,COLOR_MSG_NORMAL);
       add_timer_event(self_obj, 40, 5);
   end
   if (fixed_param == 5) then begin
       floater(orator_obj,110,COLOR_MSG_RED);
       floater(self_obj,112,COLOR_MSG_NORMAL);
       add_timer_event(self_obj, 40, 6);
   end
   if (fixed_param == 6) then begin
       floater(orator_obj,113,COLOR_MSG_RED);
       floater(self_obj,110,COLOR_MSG_NORMAL);
       add_timer_event(self_obj, 50, 7);
   end
   if (fixed_param == 7) then begin
       floater(orator_obj,110,COLOR_MSG_RED);
       floater(self_obj,114,COLOR_MSG_NORMAL);
       add_timer_event(self_obj, 50, 8);
   end
   if (fixed_param == 8) then begin
       floater(orator_obj,115,COLOR_MSG_RED);
       floater(self_obj,110,COLOR_MSG_NORMAL);
       add_timer_event(self_obj, 50, 9);
   end
   if (fixed_param == 9) then begin
       bitDialogExp(bit_3,0)
       destroy_object(orator_obj);
       orator_obj := 0;
       game_ui_enable;
       dialogue_system_enter;
   end
   if (fixed_param == 10) then begin
       KillScorpTail(-1) // фраза над жертвой (-1 если не нужна)
   end
end

procedure critter_p_proc begin
   set_critter_options(1,0) //условие нападения (0 личная вражда, 1 вражда клановая, 2 всегда), разворот к ГГ
end

procedure use_skill_on_p_proc begin
   skillUseSteal
   skillUseFAid
end

procedure pickup_p_proc begin
   pickupProcCritter
end

procedure use_obj_on_p_proc begin
   UsedItemToCrit_Proc
   UsedToCrit_Poison(PID_M_PSYCHO,105,10)
   UsedToCrit_Poison(PID_M_BUFFOUT,105,10)
   UsedToCrit_Poison(PID_M_RADAWAY,105,10)
   UsedToCrit_Poison(PID_M_SUPER_STIMPAK,105,10)
   UsedToCrit_Scorp(105,10) // фраза над жертвой (-1 если не нужна), номер таймера
end

procedure combat_p_proc begin
   effectAttak(0,0,1,1,1) //отравление min, облучение min, травма ног %, травма рук %, травма глаз %
   effectRegeratHP
end

procedure damage_p_proc begin
   set_damage_dude
end

procedure destroy_p_proc begin
   set_global_var(GVAR_PHENIX_STATUS_PLANT_BOSS,-1);
   if (getQuest(GVAR_PHENIX_QST_PLANT_REPAIR) == qStart) then begin
   setQuest(GVAR_PHENIX_QST_PLANT_REPAIR,qStop);
   end
   if (getQuest(GVAR_PHENIX_QST_PLANT_SPY) == qStart) then begin
   setQuest(GVAR_PHENIX_QST_PLANT_SPY,qStop);
   end
   if (getQuest(GVAR_PHENIX_QST_PLANT_ATTAK) == qStart) then begin
   setQuest(GVAR_PHENIX_QST_PLANT_ATTAK,qStop);
   end
   if (getQuest(GVAR_PHENIX_QST_PLANT) == qStart) then begin
   if ((global_var(GVAR_PHENIX_STATUS_PLANT_BOSS)<0) and (global_var(GVAR_PHENIX_STATUS_PLANT_SPY)<0)) then begin
   setQuest(GVAR_PHENIX_QST_PLANT,qStop);
   end
   end

   if (getQuest(GVAR_PHENIX_QST_PLANT_TEODOR) != qStart) then begin
   kill_critter_reput // взамен kill_critter_opt
   end
   destroy_critter_inventar
end

procedure talk_p_proc begin
   if (getQuest(GVAR_PHENIX_QST_PLANT_ATTAK) == qStart) then begin
      if (global_var(GVAR_PHENIX_STATUS_PLANT_SPY)<0) then begin
      setQuest(GVAR_PHENIX_QST_PLANT_ATTAK,qEnd);
      end
   end

   if (getQuest(GVAR_PHENIX_QST_PLANT_ATTAK) > qEnd) then begin
   floater(self_obj,104,COLOR_MSG_NORMAL);
   end
   else if (getQuest(GVAR_PHENIX_QST_PLANT_ATTAK) == qStart) then begin
   floater(self_obj,103,COLOR_MSG_RED);
   end
   else if (map_var(MVAR_PNX_PLANT_DOPUSK)>0) then begin
   setReaction(1) // Отношение к ГГ (1 - персонаж положительный, -1 отрицательный, 0 нейтральный)
   dialog_proc(0,0,NodeStartDialog,-1,-1)
   end
   else begin
   floater(self_obj,102,COLOR_MSG_RED);
   end
end

procedure Node998 begin
   setNodeCombat;
end

procedure Node999 begin
   set_map_var(MVAR_PNX_PLANT_DOPUSK,1);
end

procedure NodeStartDialog begin
   if (getQuest(GVAR_PHENIX_QST_PLANT_REPAIR) != qZero) then begin
   bitDialogExp(bit_1,0) // опция для удобства теста в маппере
   end

   if (getQuest(GVAR_PHENIX_QST_PLANT_ATTAK) == qEnd) then begin
   call NodeQst206;
   end
   else if ((getQuest(GVAR_PHENIX_QST_PLANT_ATTAK) == qZero) and (bitDialog(bit_3) != 0)) then begin
   call NodeQst205;
   end
   else if (bitDialog(bit_1) == 0) then begin
   call NodeFstDialog;
   end
   else begin
   call NodeSndDialog;
   end
end

//--- ПЕРВЫЙ ДИАЛОГ

procedure NodeFstDialog begin
   Reply(200)
   NAnswer(201,1,NodeFstDialog2)
end

procedure NodeFstDialog2 begin
   Reply(202)
   NAnswer(203,1,NodeFstDialog3)
end

procedure NodeFstDialog3 begin
   Reply(204)
   NAnswer(205,1,NodeFstDialog4)
end

procedure NodeFstDialog4 begin
   bitDialogExp(bit_1,0)
   setQuest(GVAR_PHENIX_QST_PLANT,qStart);
   Reply(206)
   NAnswer(207,1,NodeFstDialog5)
   GAnswer(211,1,NodeFstDialog6)
end

procedure NodeFstDialog5 begin
   Reply(208)
   NAnswer(209,1,NodeFstDialog6)
   NAnswer(210,1,NodeFstDialog7)
end

procedure NodeFstDialog6 begin
   //moved quest start to here, as this is where the player agrees to the quest, which matters for future reponses - cambragol
   setQuest(GVAR_PHENIX_QST_PLANT_REPAIR,qStart);
   Reply(212)
   NAnswer(213,1,Node999)
end

// added to make sense of the negative answer to the job offer - cambragol
procedure NodeFstDialog7 begin
   Reply(215)
   NAnswer(216,1,Node999)
end

//--- ПОВТОРНЫЙ ДИАЛОГ

procedure NodeSndDialog begin
   if (getQuest(GVAR_PHENIX_QST_PLANT_REPAIR) == qStart) then begin
      Reply(222)
      if (global_var(GVAR_PHENIX_STATUS_PLANT)>0) then begin
      GAnswer(233,1,NodeQst100)
      end
   end
   else begin
      Reply(220)
   end

   if (getQuest(GVAR_PHENIX_QST_PLANT_SPY) == qEnd) then begin
   NAnswer(250,1,NodeQst200)
   end

   NAnswer(230,1,NodeAnswer100)
   NAnswer(221,1,Node999)
end

procedure NodeAnswer100 begin
   if (global_var(GVAR_TITUL_REBIRTH)>0) then begin
   Reply(2231)
   end
   else begin
   Reply(231)
   end
   NAnswer(232,1,Node999)
end

procedure NodeQst100 begin
   Reply(234)
   NAnswer(235,1,NodeQst101)
end

procedure NodeQst101 begin
   if (global_var(GVAR_TITUL_REBIRTH)>0) then begin
   Reply(2236)
   end
   else begin
   Reply(236)
   end
   NAnswer(237,1,NodeQst102)
end

procedure NodeQst102 begin
   if (global_var(GVAR_TITUL_REBIRTH)>0) then begin
   Reply(2238)
   end
   else begin
   Reply(238)
   end
   NAnswer(239,1,NodeQst103)
end

procedure NodeQst103 begin
   Reply(240)
   BAnswer(241,1,NodeQst105)
   NAnswer(242,1,NodeQst104)
end

procedure NodeQst104 begin
   setQuest(GVAR_PHENIX_QST_PLANT_REPAIR,qEnd);
   setQuest(GVAR_PHENIX_QST_PLANT_SPY,qStart);
   Reply(243)
   NAnswer(244,1,Node999)
end

procedure NodeQst105 begin
   Reply(245)
   NAnswer(246,1,NodeQst104)
   BAnswer(247,1,Node998)
end

procedure NodeQst200 begin
   Reply(251)
   NAnswer(253,1,NodeQst201)
   NAnswer(252,1,Node999)
end

procedure NodeQst201 begin
   Reply(254)
   NAnswer(255,1,NodeQst202)
   NAnswer(256,4,NodeQst202)
end

procedure NodeQst202 begin
   Reply(257)
   NAnswer(258,1,NodeQst203)
   NAnswer(259,1,NodeQst203)
end

procedure NodeQst203 begin
   Reply(260)
   NAnswer(261,1,NodeQst204)
   NAnswer(262,1,NodeQst204)
end

procedure NodeQst204 begin
   game_ui_disable;
   move_to(self_obj, HomeTile, self_elevation);
      anim(self_obj, ANIMATE_ROTATION, HomeRotat);
   move_to(dude_obj, 22692, self_elevation);
      anim(dude_obj, ANIMATE_ROTATION, 5);
   orator_obj := create_object_sid(PID_GHOUL_A, 5, 0, -1);
      move_to(orator_obj, tile_num_in_direction(self_tile, 3, 2), self_elevation);
      anim(orator_obj, ANIMATE_ROTATION, 0);
   add_timer_event(self_obj,5,3);
   call Node999;
end

procedure NodeQst205 begin
   setQuest(GVAR_PHENIX_QST_PLANT_SPY,qEnd);
   setQuest(GVAR_PHENIX_QST_PLANT_ATTAK,qStart);

   Reply(270)
   NAnswer(271,1,Node999)
   NAnswer(272,1,Node999)
end

procedure NodeQst206 begin
   setQuest(GVAR_PHENIX_QST_PLANT,qEnd);
   setQuest(GVAR_PHENIX_QST_PLANT_ATTAK,qEnd+1);
   inc_map_var(MVAR_PNX_PLANT_PRESENT);
   set_REP(35)
   exp_add(1000);

   Reply(280)
   zNAnswer(281,1,Node999)
   BAnswer(282,1,NodeQst207)
end

procedure NodeQst207 begin
   Reply(283)
   NAnswer(284,1,Node999)
   BAnswer(285,1,Node999)
end
