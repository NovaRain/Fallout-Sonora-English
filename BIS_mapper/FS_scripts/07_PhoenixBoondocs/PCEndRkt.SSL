#include "..\headers\define.h"
//---------------------

#define NAME                            SCRIPT_PCEndRkt
#define TOWN_REP_VAR                    GVAR_TOWN_REP_PHOENIX   // привязка к репутации (-1, если не нужно)

#define NUM_TEAM                        TEAM_BANDITS          // группа, к которой принадлежит персонаж (-1 если нужно оставить Team, заданный в редакторе)
#define NUM_AI                          AI_BANDIT             // AI персонажа (-1 если нужно оставить AI, заданный в редакторе)
#define KILL_SLAVA                      SLAVA_KILL_BAD        // слава за убийство этого персонажа (SLAVA_KILL_GOOD, SLAVA_KILL_BAD, SLAVA_KILL_NEITRAL, SLAVA_KILL_CHILD)
#define KILL_TOWN_REP                   REP_KILL_BAD          // репутация за убийство этого персонажа (REP_KILL_GOOD, REP_KILL_NEITRAL, REP_KILL_BAD, REP_KILL_CHILD, REP_KILL_CRITICAL)
#define KILL_FRAC_REP                   FRAC_NON              // принадлежность определенной фракции (-1, если не нужно)

#define FLAG_STEAL                      50 // Нижний порог навыка для кражи (для торговцев 200, для животных 300)
#define FLAG_ALCOHOL                    0  // Примет ли алкоголь от ГГ: 0 - принимает, 1 - не принимает
#define FLAG_FOOD                       1  // Примет ли пищу от ГГ: 0 - принимает, 1 - не принимает

//---------------------

procedure start;
procedure map_enter_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure timed_event_p_proc;
procedure critter_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure pickup_p_proc;
procedure combat_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;

procedure Node998;
procedure Node999;
procedure NodeStartDialog;
procedure NodeFstDialog;
procedure NodeFstDialog2;
procedure NodeFstDialog3;
procedure NodeFstDialog4;
procedure NodeFstDialog5;

//---------------------

/*
Стандартные LVAR описаны в command_h. Нумерация:
   0-4  для нпс без диалога (мутанты, животные, люди)
   0-5  для говорящих нпс
   0-7 для торговцев
*/

//#define LVAR_Flag_A                     (5) // отвечает за ...

//---------------------



procedure start begin
end

procedure map_enter_p_proc begin
   if (is_loading_game == false) then begin
       set_start_home
       if (map_first_run == true) then begin
       item_add(self_obj,PID_BOOTLE_CAPS,random(6,12))
       end

       set_obj_visibility(self_obj, 1);
       if (getQuest(GVAR_PHENIX_QST_REKET) == qZero) then begin
       if (global_var(GVAR_GAME_END) != 0) then begin
       if (global_var(GVAR_PHENIX_STATUS_CARDINAL)<0) then begin
       setQuest(GVAR_PHENIX_QST_REKET,qStart);
       end
       end
       end

       if (getQuest(GVAR_PHENIX_QST_REKET) == qStart) then begin
       set_obj_visibility(self_obj, 0);
       end
   end
end

procedure look_at_p_proc begin
   lookProcMsg
end

procedure description_p_proc begin
   dsrptProcMsg
end

procedure timed_event_p_proc begin
   // Таймер за номером 1 зарезервирован под перемещение персонажа по локации
   // Таймер за номером 2 зарезервирован под всплывающие реплики
   if (fixed_param == 1) then begin
       timer_move_to_home
   end
   if (fixed_param == 2) then begin
       //timer_float_reply(120,121)
   end
end

procedure critter_p_proc begin
   set_critter_options(0,0) //условие нападения (0 личная вражда, 1 вражда клановая, 2 всегда), разворот к ГГ
end

procedure use_skill_on_p_proc begin
   skillUseSteal
   skillUseFAid
end

procedure pickup_p_proc begin
   pickupProcCritter
end

procedure use_obj_on_p_proc begin
   UsedItemToCrit_Proc
end

procedure combat_p_proc begin
   effectAttak(0,0,1,1,1) //отравление min, облучение min, травма ног %, травма рук %, травма глаз %
end

procedure damage_p_proc begin
   set_damage_dude
end

procedure destroy_p_proc begin
   if (getQuest(GVAR_PHENIX_QST_REKET) == qStart) then begin
   setQuest(GVAR_PHENIX_QST_REKET,qEnd);
   end
   kill_critter_opt
end

procedure talk_p_proc begin
   if (getQuest(GVAR_PHENIX_QST_REKET) == qStart) then begin
   setReaction(1) // Отношение к ГГ (1 - персонаж положительный, -1 отрицательный, 0 нейтральный)
   dialog_proc(0,0,NodeStartDialog,-1,-1)
   end
   else begin
   floater(self_obj,102,COLOR_MSG_RED);
   end
end

procedure Node998 begin
   setNodeCombat;
end

procedure Node999 begin
end

procedure NodeStartDialog begin
   call NodeFstDialog;
end

//--- ПЕРВЫЙ ДИАЛОГ

procedure NodeFstDialog begin
   Reply(110)
   NAnswerSkill(115,3,NodeFstDialog3,SKILL_CONVERSANT,75,113,NodeFstDialog2)
   if (item_amnt(dude_obj,PID_BOOTLE_CAPS)>=100) then begin
   NAnswer(121,1,NodeFstDialog5)
   end
   BAnswer(111,1,Node998)
   NAnswer(112,1,Node999)
end

procedure NodeFstDialog2 begin
   Reply(114)
   BAnswer(111,1,Node998)
   NAnswer(112,1,Node999)
end

procedure NodeFstDialog3 begin
   Reply(116)
   NAnswer(118,1,NodeFstDialog4)
   BAnswer(117,1,Node998)
end

procedure NodeFstDialog4 begin
   setQuest(GVAR_PHENIX_QST_REKET,qEnd);
   Reply(119)
   NAnswer(120,1,Node999)
end

procedure NodeFstDialog5 begin
   setQuest(GVAR_PHENIX_QST_REKET,qEnd);
   item_add(self_obj,PID_BOOTLE_CAPS,100)
   item_remove(dude_obj,PID_BOOTLE_CAPS,100)
   Reply(122)
   NAnswer(123,1,Node999)
end
