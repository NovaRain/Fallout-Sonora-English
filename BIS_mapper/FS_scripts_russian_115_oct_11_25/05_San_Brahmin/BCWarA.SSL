#include "..\headers\define.h"
//---------------------

#define NAME                            SCRIPT_BCRanger
//#define NAME                            SCRIPT_BCWarA
#define TOWN_REP_VAR                    GVAR_TOWN_REP_RANGERS  // привязка к репутации (-1, если не нужно)

#define NUM_TEAM                        TEAM_SANBRAHMIN_WAR   // группа, к которой принадлежит персонаж (-1 если нужно оставить Team, заданный в редакторе)
#define NUM_AI                          AI_RANGER             // AI персонажа (-1 если нужно оставить AI, заданный в редакторе)
#define KILL_SLAVA                      (SLAVA_KILL_GOOD*2)   // слава за убийство этого персонажа (SLAVA_KILL_GOOD, SLAVA_KILL_BAD, SLAVA_KILL_NEITRAL, SLAVA_KILL_CHILD)
#define KILL_TOWN_REP                   REP_KILL_NEITRAL      // репутация за убийство этого персонажа (-100 для враждебности всего поселения)
#define KILL_FRAC_REP                   FRAC_NON              // принадлежность определенной фракции (-1, если не нужно)

#define FLAG_STEAL                      50 // Нижний порог навыка для кражи (для торговцев 200, для животных 300)
#define FLAG_ALCOHOL                    1  // Примет ли алкоголь от ГГ: 0 - принимает, 1 - не принимает
#define FLAG_FOOD                       1  // Примет ли пищу от ГГ: 0 - принимает, 1 - не принимает

//---------------------

procedure start;
procedure map_enter_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure timed_event_p_proc;
procedure critter_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure pickup_p_proc;
procedure combat_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;

procedure Node998;
procedure Node999;
procedure NodeStartDialog;
procedure NodeDialogA100;
procedure NodeDialogA101;
procedure NodeDialogA102;
procedure NodeDialogB100;
procedure NodeDialogB101;
procedure NodeDialogB102;
procedure NodeDialogB103;
procedure NodeDialogB104;
procedure NodeDialogB105;

//---------------------

//#define LVAR_Flag_A                     (6) // отвечает за ...

import variable obj_critter_a; // указатель на криттера 1

/*
ВАЖНО!!! Синхронизировать скрипт с BCRanger.SSL.
*/

//---------------------



procedure start begin
end

procedure map_enter_p_proc begin
   if (is_loading_game == false) then begin
       set_start_home
       set_obj_visibility(self_obj, 1);
       if (getQuest(GVAR_BRAHMIN_ATTAK) == qStart) then begin
       if (global_var(GVAR_BRAHMIN_STATUS_RANGER)==0) then begin
       set_obj_visibility(self_obj, 0);
       end
       end
   end
end

procedure look_at_p_proc begin
   lookProcMsg
end

procedure description_p_proc begin
   dsrptProcMsg
end

procedure timed_event_p_proc begin
   // Таймер за номером 1 рарезервирован под перемещение персонажа по локации
   // Таймер за номером 2 рарезервирован под всплывающие реплики
   if (fixed_param == 1) then begin
       timer_move_to_home
   end
   if (fixed_param == 2) then begin
       //timer_float_reply(110,119)
   end
end

procedure critter_p_proc begin
   if (obj_critter_a>0) then begin
      if (map_var(MVAR_BRAHMIN_Attak)>0) then begin
      if (global_var(GVAR_BRAHMIN_STATUS_COMMANDER) == 0) then begin
         if (self_visible == true) then begin
         attack(obj_critter_a);
         end
      end
      end
   end
   set_critter_options(0,0) //условие нападения (0 личная вражда, 1 вражда клановая, 2 всегда), разворот к ГГ
end

procedure use_skill_on_p_proc begin
   skillUseSteal
   skillUseFAid
end

procedure pickup_p_proc begin
   pickupProcCritter
end

procedure use_obj_on_p_proc begin
   UsedItemToCrit_Proc
end

procedure combat_p_proc begin
   effectAttak(0,0,2,2,2) //отравление min, облучение min, травма ног %, травма рук %, травма глаз %
end

procedure damage_p_proc begin
   set_damage_dude
end

procedure destroy_p_proc begin
   set_map_var(MVAR_BRAHMIN_Attak,-1);
   set_global_var(GVAR_BRAHMIN_STATUS_RANGER,-10);
   setQuest(GVAR_BRAHMIN_ATTAK,qStop);
   if (getQuest(GVAR_BRAHMIN_QST_RANGER) == qStart) then begin
   setQuest(GVAR_BRAHMIN_QST_RANGER,qStop);
   end
   kill_critter_opt
end

procedure talk_p_proc begin
   setReaction(1) // Отношение к ГГ (1 - персонаж положительный, -1 отрицательный, 0 нейтральный)

   fracReaction(GVAR_TITUL_ARIZONA_RANGER,50) // Поправка к отношению за принадлежность к фракциям
   fracReaction(GVAR_TITUL_PHENIX_CULT,-50) // Поправка к отношению за принадлежность к фракциям
   fracReaction(GVAR_TITUL_WARRIOR_ROAD,-25) // Поправка к отношению за принадлежность к фракциям
   fracReaction(GVAR_TITUL_DUDE_IS_SLAVE,20) // Поправка к отношению за принадлежность к фракциям

   if (getQuest(GVAR_BRAHMIN_ATTAK) != qStart) then begin
      if (global_var(GVAR_BRAHMIN_STATUS_RANGER) < 0) then begin
      floater(self_obj,106,COLOR_MSG_RED);
      end
      else begin
      floater(self_obj,105,COLOR_MSG_GREEN);
      end
   end
   else begin
      dialog_proc(0,0,NodeStartDialog,-1,-1)
   end
end

procedure Node998 begin
   set_enemy_dude;
end

procedure Node999 begin
end

procedure NodeStartDialog begin
   if (getQuest(GVAR_BRAHMIN_QST_RNGRGOHOME) == qStart) then begin
      call NodeDialogB100; //стычка началась по инициативе миссионеров
   end
   else begin
      call NodeDialogA100; //стычка началась по инициативе рейнджера
   end
end

//--- ДИАЛОГ ПРИ ИГРЕ ЗА РЕЙНДЖЕРА

procedure NodeDialogA100 begin
   if (map_var(MVAR_BRAHMIN_Attak) == 0) then begin
   Reply(360)
   end
   else begin
   Reply(368)
   end

   if ((getQuest(GVAR_BRAHMIN_QST_COMMANDER) <= qStop) or (global_var(GVAR_BRAHMIN_STATUS_COMMANDER)!=0)) then begin
   if (map_var(MVAR_BRAHMIN_Attak) == 0) then begin
   GAnswer(363,1,NodeDialogA101)
   end
   else begin
   GAnswer(372,1,NodeDialogA101)
   end
   end

   if (map_var(MVAR_BRAHMIN_Attak) == 0) then begin
   NAnswer(362,1,NodeDialogA102)
   NAnswer(361,1,Node999)
   end
   else begin
   NAnswer(369,1,Node999)
   end
end

procedure NodeDialogA101 begin
   setQuest(GVAR_BRAHMIN_ATTAK,qEnd);
   Reply(364)
   NAnswer(365,1,Node999)
end

procedure NodeDialogA102 begin
   set_map_var(MVAR_BRAHMIN_Attak,1);
   call Node999;
end


//--- ДИАЛОГ ПРИ ИГРЕ ЗА МИССИОНЕРОВ

procedure NodeDialogB100 begin
   Reply(370)

   if (getQuest(GVAR_BRAHMIN_QST_RNGRGOHOME) == qStart) then begin
   if (getQuest(GVAR_BRAHMIN_QST_RANGER) < qEnd) then begin
   if (global_var(GVAR_BRAHMIN_STATUS_RANGER) == 0) then begin
   NAnswer(260,1,NodeDialogB101)
   end
   end
   end

   NAnswer(371,1,Node999)
end

procedure NodeDialogB101 begin
   Reply(261)
   NAnswer(262,1,NodeDialogB102)
end

procedure NodeDialogB102 begin
   Reply(263)
   NAnswerSkill(264,1,NodeDialogB103,SKILL_CONVERSANT,70,268,NodeDialogB104)
   BAnswer(367,1,NodeDialogB105)
   NAnswer(271,1,Node999)
end

procedure NodeDialogB103 begin
   set_global_var(GVAR_BRAHMIN_STATUS_RANGER,-1);
   setQuest(GVAR_BRAHMIN_QST_RANGER,qStop);
   setQuest(GVAR_BRAHMIN_ATTAK,qEnd);
   set_obj_visibility(self_obj, 1);
   Reply(265)
   NAnswer(266,1,Node999)
   BAnswer(267,1,Node999)
end

procedure NodeDialogB104 begin
   Reply(269)
   NAnswer(271,1,Node999)
   BAnswer(366,1,Node999)
end

procedure NodeDialogB105 begin
   call NodeDialogA102;
end
