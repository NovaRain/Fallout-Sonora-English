#include "..\headers\define.h"
//---------------------

#define NAME                            SCRIPT_BCHunter
#define TOWN_REP_VAR                    GVAR_TOWN_REP_SAN_BRAHMIN // привязка к репутации (-1, если не нужно)

#define NUM_TEAM                        TEAM_SANBRAHMIN_PEASAN // группа, к которой принадлежит персонаж (-1 если нужно оставить Team, заданный в редакторе)
#define NUM_AI                          AI_CULT_BRAHMIN       // AI персонажа (-1 если нужно оставить AI, заданный в редакторе)
#define KILL_SLAVA                      SLAVA_KILL_GOOD       // слава за убийство этого персонажа (SLAVA_KILL_GOOD, SLAVA_KILL_BAD, SLAVA_KILL_NEITRAL, SLAVA_KILL_CHILD)
#define KILL_TOWN_REP                   REP_KILL_CRITICAL     // репутация за убийство этого персонажа (-100 для враждебности всего поселения)
#define KILL_FRAC_REP                   FRAC_NON              // принадлежность определенной фракции (-1, если не нужно)

#define FLAG_STEAL                      40 // Нижний порог навыка для кражи (для торговцев 200, для животных 300)
#define FLAG_ALCOHOL                    1  // Примет ли алкоголь от ГГ: 0 - принимает, 1 - не принимает
#define FLAG_FOOD                       1  // Примет ли пищу от ГГ: 0 - принимает, 1 - не принимает

//---------------------

procedure start;
procedure map_enter_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure timed_event_p_proc;
procedure critter_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure pickup_p_proc;
procedure combat_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;

procedure Node998;
procedure Node999;
procedure NodeStartDialog;
procedure NodeFstDialog;
procedure NodeFstDialog100;
procedure NodeFstDialog101;
procedure NodeFstDialog102;
procedure NodeFstDialog103;
procedure NodeSndDialog;
procedure NodeAnswer100;
procedure NodeAnswer101;
procedure NodeAnswer102;
procedure NodeAnswer103;
procedure NodeAnswer104;
procedure NodeAnswer105;
procedure NodeAnswer200;

//---------------------

//#define LVAR_Flag_A                     (6) // отвечает за ...

import variable box_stop_use;

//---------------------



procedure start begin
end

procedure map_enter_p_proc begin
   if (is_loading_game == false) then begin
       set_start_home
   end
end

procedure look_at_p_proc begin
   lookProcMsg
end

procedure description_p_proc begin
   dsrptProcMsg
end

procedure timed_event_p_proc begin
   // Таймер за номером 1 рарезервирован под перемещение персонажа по локации
   // Таймер за номером 2 рарезервирован под всплывающие реплики
   if (fixed_param == 1) then begin
       timer_move_to_home
   end
   if (fixed_param == 2) then begin
       //timer_float_reply(110,119)
   end
   if (fixed_param == 3) then begin
       if (getQuest(GVAR_BRAHMIN_QST_OASIS) == qZero) then begin
       setQuest(GVAR_BRAHMIN_QST_OASIS,qStart);
       end
       dude_teleport_map(1,1,MAP_SAN_BRAHMIN_OASIS,8);
   end
end

procedure critter_p_proc begin
   set_using_stop // привязка хозяина и объекта (удалить, если не нужно)
   set_critter_options(1,0) //условие нападения (0 личная вражда, 1 вражда клановая, 2 всегда), разворот к ГГ
end

procedure use_skill_on_p_proc begin
   skillUseSteal
   skillUseFAid
end

procedure pickup_p_proc begin
   pickupProcCritter
end

procedure use_obj_on_p_proc begin
   UsedItemToCrit_Proc
end

procedure combat_p_proc begin
   effectAttak(0,0,1,1,1) //отравление min, облучение min, травма ног %, травма рук %, травма глаз %
end

procedure damage_p_proc begin
   set_damage_dude
end

procedure destroy_p_proc begin
   if (getQuest(GVAR_BRAHMIN_QST_OASIS) < qEnd) then begin
   setQuest(GVAR_BRAHMIN_QST_OASIS,qStop);
   end
   kill_critter_opt
end

procedure talk_p_proc begin
   setReaction(1) // Отношение к ГГ (1 - персонаж положительный, -1 отрицательный, 0 нейтральный)
   if (getQuest(GVAR_BRAHMIN_QST_OASIS) >= qEnd) then begin
      if (get_REP<0) then begin
      floater(self_obj,103,COLOR_MSG_GREEN);
      end
      else begin
      floater(self_obj,102,COLOR_MSG_GREEN);
      end
   end
   else begin
      fracReaction(GVAR_TITUL_ARIZONA_RANGER,40) // Поправка к отношению за принадлежность к фракциям
      fracReaction(GVAR_TITUL_PHENIX_CULT,-40) // Поправка к отношению за принадлежность к фракциям
      dialog_proc(0,0,NodeStartDialog,-1,-1)
   end
end

procedure Node998 begin
   set_enemy_dude;
end

procedure Node999 begin
end

procedure NodeStartDialog begin
   if (bitDialog(bit_1) == 0) then begin
   call NodeFstDialog;
   end
   else begin
   call NodeSndDialog;
   end
end

//--- ПЕРВЫЙ ДИАЛОГ

procedure NodeFstDialog begin
   bitDialogExp(bit_1,0)
   zReply(200)
   NAnswer(201,1,NodeFstDialog100)
end

procedure NodeFstDialog100 begin
   Reply(202)
   GAnswer(203,1,NodeFstDialog101)
   zBAnswer(206,1,NodeFstDialog102)
end

procedure NodeFstDialog101 begin
   setBonusReaction(10)
   set_REP(1)
   Reply(204)
   NAnswer(205,1,NodeFstDialog103)
end

procedure NodeFstDialog102 begin
   setBonusReaction(-10)
   set_REP(-1)
   Reply(207)
   BAnswer(208,1,NodeFstDialog103)
   NAnswer(209,1,NodeFstDialog103)
end

procedure NodeFstDialog103 begin
   call NodeSndDialog;
end

//--- ПОВТОРНЫЙ ДИАЛОГ

procedure NodeSndDialog begin
   if (getReaction>=25) then begin
   Reply(222)
   end
   else if (getReaction<0) then begin
   Reply(221)
   end
   else begin
   Reply(220)
   end

   if (getQuest(GVAR_BRAHMIN_QST_OASIS) == qZero) then begin
   NAnswer(230,1,NodeAnswer100)
   end

   if (getQuest(GVAR_BRAHMIN_QST_OASIS) == qStart) then begin
   if (global_var(GVAR_BRAHMIN_STATUS_OASIS_SCORP) >= 9) then begin
   zNAnswer(250,1,NodeAnswer200)
   end
   end

   NAnswer(223,1,Node999)
end

procedure NodeAnswer100 begin
   Reply(231)
   NAnswer(232,1,NodeAnswer101)
end

procedure NodeAnswer101 begin
   Reply(233)
   NAnswer(234,1,NodeAnswer102)
   NAnswer(235,1,NodeAnswer102)
end

procedure NodeAnswer102 begin
   call NodeAnswer103;
end

procedure NodeAnswer103 begin
   Reply(236)
   NAnswer(238,1,NodeAnswer104)
   NAnswer(237,1,Node999)
end

procedure NodeAnswer104 begin
   Reply(239)
   GAnswer(241,1,NodeAnswer105)
   NAnswer(240,1,Node999)
end

procedure NodeAnswer105 begin
   add_timer_event(self_obj, 5, 3);
   call Node999;
end

procedure NodeAnswer200 begin
   setQuest(GVAR_BRAHMIN_QST_OASIS,qEnd);
   setBonusReaction(90)
   set_REP(5)
   set_SLAVA(25)
   exp_add(350);

   Reply(251)
   NAnswer(252,1,Node999)
end
