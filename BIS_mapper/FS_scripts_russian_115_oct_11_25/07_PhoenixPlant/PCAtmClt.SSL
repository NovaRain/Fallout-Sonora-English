#include "..\headers\define.h"
//---------------------

#define NAME                            SCRIPT_PCAtmClt
#define TOWN_REP_VAR                    GVAR_TOWN_REP_PHOENIX_CULT  // привязка к репутации (-1, если не нужно)

#define NUM_TEAM                        TEAM_CULT_ATOMIC      // группа, к которой принадлежит персонаж (-1 если нужно оставить Team, заданный в редакторе)
#define NUM_AI                          AI_GUARD_ELECTR       // AI персонажа (-1 если нужно оставить AI, заданный в редакторе)
#define KILL_SLAVA                      SLAVA_KILL_GOOD       // слава за убийство этого персонажа (SLAVA_KILL_GOOD, SLAVA_KILL_BAD, SLAVA_KILL_NEITRAL, SLAVA_KILL_CHILD)
#define KILL_TOWN_REP                   REP_KILL_GOOD         // репутация за убийство этого персонажа (REP_KILL_GOOD, REP_KILL_NEITRAL, REP_KILL_BAD, REP_KILL_CHILD, REP_KILL_CRITICAL)
#define KILL_FRAC_REP                   FRAC_NON              // принадлежность определенной фракции (-1, если не нужно)

#define FLAG_STEAL                      65 // Нижний порог навыка для кражи (для торговцев 200, для животных 300)
#define FLAG_ALCOHOL                    1  // Примет ли алкоголь от ГГ: 0 - принимает, 1 - не принимает
#define FLAG_FOOD                       1  // Примет ли пищу от ГГ: 0 - принимает, 1 - не принимает

//---------------------

procedure start;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure timed_event_p_proc;
procedure critter_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure pickup_p_proc;
procedure combat_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;

procedure Node998;
procedure Node999;
procedure NodeStartDialog;
procedure NodeFstDialog;
procedure NodeFstDialog100;
procedure NodeFstDialog101;
procedure NodeFstDialog200;
procedure NodeFstDialog201;
procedure NodeFstDialog300;
procedure NodeFstDialog301;
procedure NodeSndDialog;

//---------------------

//#define LVAR_Flag_A                     (6) // отвечает за ...

//---------------------



procedure start begin
end

procedure map_enter_p_proc begin
   if (is_loading_game == false) then begin
       set_start_home
       set_obj_visibility(self_obj, 1);
       if ((bitDialog(bit_1) != 0) or (getQuest(GVAR_PHENIX_CULT_DESTROY) >= qEnd) or (getQuest(GVAR_PHENIX_QST_PLANT) >= qEnd)) then begin
       set_obj_visibility(self_obj, 1);
       destroy_object(self_obj);
       end
   end
end

procedure map_update_p_proc begin
   if (getQuest(GVAR_PHENIX_QST_PLANT) >= qEnd) then begin
      set_obj_visibility(self_obj, 0);
   end
end

procedure look_at_p_proc begin
   lookProcMsg
end

procedure description_p_proc begin
   dsrptProcMsg
end

procedure timed_event_p_proc begin
   // Таймер за номером 1 зарезервирован под перемещение персонажа по локации
   // Таймер за номером 2 зарезервирован под всплывающие реплики
   if (fixed_param == 1) then begin
       timer_move_to_home
   end
   if (fixed_param == 2) then begin
       //timer_float_reply(120,121)
   end
end

procedure critter_p_proc begin
   set_critter_options(1,1) //условие нападения (0 личная вражда, 1 вражда клановая, 2 всегда), разворот к ГГ
   if (bitDialog(bit_1) == 0) then begin
   dialogue_system_forcing(10)
   end
end

procedure use_skill_on_p_proc begin
   skillUseSteal
   skillUseFAid
end

procedure pickup_p_proc begin
   pickupProcCritter
end

procedure use_obj_on_p_proc begin
   UsedItemToCrit_Proc
end

procedure combat_p_proc begin
   effectAttak(0,0,1,1,1) //отравление min, облучение min, травма ног %, травма рук %, травма глаз %
end

procedure damage_p_proc begin
   set_damage_dude
end

procedure destroy_p_proc begin
   kill_critter_opt
end

procedure talk_p_proc begin
   if (bitDialog(bit_3) != 0) then begin
   floater(self_obj,103,COLOR_MSG_NORMAL);
   end
   else if (bitDialog(bit_2) != 0) then begin
   floater(self_obj,104,COLOR_MSG_RED);
   end
   else if (bitDialog(bit_1) != 0) then begin
   z_floater(self_obj,102,COLOR_MSG_RED);
   end
   else begin
   setReaction(0) // Отношение к ГГ (1 - персонаж положительный, -1 отрицательный, 0 нейтральный)
   dialog_proc(0,0,NodeStartDialog,-1,-1)
   end
end

procedure Node998 begin
   set_enemy_dude;
end

procedure Node999 begin
end

procedure NodeStartDialog begin
   if (bitDialog(bit_1) == 0) then begin
   call NodeFstDialog;
   end
   else begin
   call NodeSndDialog;
   end
end

//--- ПЕРВЫЙ ДИАЛОГ

procedure NodeFstDialog begin
   bitDialogExp(bit_1,0)

   if (getQuest(GVAR_PHENIX_QST_PLANT_ATTAK) >= qEnd) then begin
   Reply(250)
   NAnswer(251,1,NodeFstDialog100)
   NAnswer(257,1,NodeFstDialog200)
   BAnswer(263,1,Node998)
   end
   else begin
   Reply(200)
   NAnswer(201,1,NodeFstDialog300)
   end
end

procedure NodeFstDialog100 begin
   Reply(252)
   NAnswer(253,1,NodeFstDialog101)
end

procedure NodeFstDialog101 begin
   set_REP(-5)
   Reply(254)
   BAnswer(255,1,Node998)
   NAnswer(256,1,Node999)
end

procedure NodeFstDialog200 begin
   bitDialogExp(bit_2,0)
   Reply(258)
   NAnswer(259,1,NodeFstDialog201)
end

procedure NodeFstDialog201 begin
   set_REP(-5)
   Reply(260)
   BAnswer(261,1,Node998)
   NAnswer(262,1,Node999)
end

procedure NodeFstDialog300 begin
   bitDialogExp(bit_3,0)
   Reply(202)
   NAnswer(203,1,NodeFstDialog301)
end

procedure NodeFstDialog301 begin
   set_REP(5)
   zReply(204)
   NAnswer(205,1,Node999)
end

//--- ПОВТОРНЫЙ ДИАЛОГ

procedure NodeSndDialog begin
   Reply(200)
   NAnswer(201,1,Node999)
end
