#include "..\headers\define.h"
//---------------------

#define NAME                            SCRIPT_PVCMedic
#define TOWN_REP_VAR                    GVAR_TOWN_REP_PHOENIX_CULT // привязка к репутации (-1, если не нужно)

#define NUM_TEAM                        TEAM_CULT_ATOMIC      // группа, к которой принадлежит персонаж (-1 если нужно оставить Team, заданный в редакторе)
#define NUM_AI                          AI_CULT_PHENIX        // AI персонажа (-1 если нужно оставить AI, заданный в редакторе)
#define KILL_SLAVA                      SLAVA_KILL_GOOD       // слава за убийство этого персонажа (SLAVA_KILL_GOOD, SLAVA_KILL_BAD, SLAVA_KILL_NEITRAL, SLAVA_KILL_CHILD)
#define KILL_TOWN_REP                   REP_KILL_GOOD         // репутация за убийство этого персонажа (REP_KILL_GOOD, REP_KILL_NEITRAL, REP_KILL_BAD, REP_KILL_CHILD, REP_KILL_CRITICAL)
#define KILL_FRAC_REP                   FRAC_PNXCULT          // принадлежность определенной фракции (-1, если не нужно)

#define FLAG_STEAL                      40 // Нижний порог навыка для кражи (для торговцев 200, для животных 300)
#define FLAG_ALCOHOL                    1  // Примет ли алкоголь от ГГ: 0 - принимает, 1 - не принимает
#define FLAG_FOOD                       1  // Примет ли пищу от ГГ: 0 - принимает, 1 - не принимает

//---------------------

procedure start;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure timed_event_p_proc;
procedure critter_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure pickup_p_proc;
procedure combat_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;
procedure Node998;
procedure Node999;
procedure NodeStartDialog;
procedure NodeFstDialog;
procedure NodeFstDialog2;
procedure NodeFstDialog3;
procedure NodeSndDialog;
procedure NodeVilla;
procedure NodeVilla2;
procedure NodeFAID;
procedure NodeFAIDMany;
procedure NodeFAID100;
procedure NodeFAID101;
procedure NodeFAID200;
procedure NodeFAID201;
procedure NodeFAID300;
procedure NodeFAID301;
procedure NodeFAID400;
procedure NodeFAID401;
procedure NodeFAIDEnd;

//---------------------

//#define LVAR_Flag_A                     (6) // отвечает за ...

import variable box_stop_use;

variable MedicMany;                     // расчет стоимость медицинских услуг

//---------------------



procedure start begin
end

procedure map_enter_p_proc begin
   if (is_loading_game == false) then begin
       set_start_home
   end
end

procedure map_update_p_proc begin
   if (global_var(GVAR_PHENIX_MATIAS_NONATTAK) > 0) then begin
   critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_TEAM_NUM,TEAM_PHOENIX_COLLECTOR);
   end
end

procedure look_at_p_proc begin
   lookProcMsg
end

procedure description_p_proc begin
   dsrptProcMsg
end

procedure timed_event_p_proc begin
   // Таймер за номером 1 зарезервирован под перемещение персонажа по локации
   // Таймер за номером 2 зарезервирован под всплывающие реплики
   if (fixed_param == 1) then begin
       timer_move_to_home
   end
   if (fixed_param == 2) then begin
       //timer_float_reply(120,121)
   end
end

procedure critter_p_proc begin
   set_using_stop // привязка хозяина и объекта (удалить, если не нужно)
   set_critter_options(0,0) //условие нападения (0 личная вражда, 1 вражда клановая, 2 всегда), разворот к ГГ
end

procedure use_skill_on_p_proc begin
   skillUseSteal
   skillUseFAid
end

procedure pickup_p_proc begin
   pickupProcCritter
end

procedure use_obj_on_p_proc begin
   UsedItemToCrit_Proc
end

procedure combat_p_proc begin
   effectAttak(0,0,1,1,1) //отравление min, облучение min, травма ног %, травма рук %, травма глаз %
end

procedure damage_p_proc begin
   set_damage_dude
end

procedure destroy_p_proc begin
   kill_critter_opt
end

procedure talk_p_proc begin
   setReaction(1) // Отношение к ГГ(1 - персонаж положительный, -1 отрицательный, 0 нейтральный)
   if (global_var(GVAR_PHENIX_CULT_DESTROY_TIMER) != 0) then begin
   floater(dude_obj,102,COLOR_MSG_RED);
   end
   else begin
   fracReaction(GVAR_TITUL_PHENIX_CULT,40) // Поправка к отношению за принадлежность к фракциям
   dialog_proc(0,0,NodeStartDialog,-1,-1)
   end
end

procedure Node998 begin
   set_enemy_dude;
end

procedure Node999 begin
end

procedure NodeStartDialog begin
   if (bitDialog(bit_1) == 0) then begin
   call NodeFstDialog;
   end
   else begin
   call NodeSndDialog;
   end
end

//--- ПЕРВЫЙ ДИАЛОГ

procedure NodeFstDialog begin
   bitDialogExp(bit_1,0)
   Reply(200)
   NAnswer(201,1,NodeFstDialog2)
end

procedure NodeFstDialog2 begin
   zReply(202)
   zNAnswer(203,1,NodeFstDialog3)
end

procedure NodeFstDialog3 begin
   Reply(204)
   NAnswer(205,1,NodeSndDialog)
   NAnswer(206,1,Node999)
end

//--- ПОВТОРНЫЙ ДИАЛОГ

procedure NodeSndDialog begin
   Reply(210)
   if (getQuest(GVAR_MAIN_QUEST_PHENIX) < qEnd) then begin
   NAnswer(240,1,NodeVilla)
   end
   NAnswer(220,1,NodeFAID)
   NAnswer(211,1,Node999)
end

procedure NodeVilla begin
   Reply(241)
   NAnswer(242,1,NodeVilla2)
end

procedure NodeVilla2 begin
   Reply(243)
   NAnswer(244,1,NodeSndDialog)
end

//--- ЛЕЧЕНИЕ

#define medicNodeOption(node)         call NodeFAIDMany;                        \
                                      if (global_var(GVAR_TITUL_PHENIX_CULT) >0) then begin \
                                         Reply(230)                             \
                                         NAnswer(236,1,node)                    \
                                      end                                       \
                                      else if (MedicMany > 0) then begin        \
                                         Reply(mstr(227)+MedicMany+mstr(228))   \
                                         if (item_amnt(dude_obj,PID_BOOTLE_CAPS) >= MedicMany) then begin \
                                         NAnswer(229,1,node)                    \
                                         end                                    \
                                      end                                       \
                                      else begin                                \
                                         Reply(230)                             \
                                         NAnswer(236,1,node)                    \
                                      end                                       \
                                      NAnswer(233,1,NodeSndDialog)              \

procedure NodeFAID begin
   MedicMany := 0;
   Reply(221)
   if (dude_cur_hits<dude_max_hits) then begin
   NAnswer(222,1,NodeFAID100)
   end
   if dude_is_crippled then begin
   NAnswer(223,1,NodeFAID200)
   end
   if (get_critter_stat(dude_obj,STAT_current_rad)>0) then begin
   NAnswer(224,1,NodeFAID300)
   end
   if (get_poison(dude_obj) >0) then begin
   NAnswer(225,1,NodeFAID400)
   end
   NAnswer(226,1,NodeSndDialog)
end

procedure NodeFAIDMany begin
   MedicMany += MedicMany;
   if (has_skill(dude_obj, SKILL_BARTER) > 0) then begin
   MedicMany -= (MedicMany*has_skill(dude_obj, SKILL_BARTER))/100;
   end

   if (MedicMany < 0) then begin
      MedicMany := 1;
   end
   if (global_var(GVAR_TITUL_PHENIX_CULT) >0) then begin
      MedicMany := 0;
   end
end

procedure NodeFAID100 begin
   MedicMany := (dude_max_hits-dude_cur_hits)*5;
   medicNodeOption(NodeFAID101)
end

procedure NodeFAID101 begin
   critter_heal(dude_obj,dude_max_hits-dude_cur_hits);
   call NodeFAIDEnd;
end

procedure NodeFAID200 begin
   if (critter_state(dude_obj) bwand DAM_CRIP_LEG_LEFT) then begin
   MedicMany += 20;
   end
   if (critter_state(dude_obj) bwand DAM_CRIP_LEG_RIGHT) then begin
   MedicMany += 20;
   end
   if (critter_state(dude_obj) bwand DAM_CRIP_ARM_LEFT) then begin
   MedicMany += 20;
   end
   if (critter_state(dude_obj) bwand DAM_CRIP_ARM_RIGHT) then begin
   MedicMany += 20;
   end
   if (critter_state(dude_obj) bwand DAM_BLIND) then begin
   MedicMany += 20;
   end

   medicNodeOption(NodeFAID201)
end

procedure NodeFAID201 begin
   critter_uninjure(dude_obj, (DAM_BLIND bwor DAM_CRIP_LEG_LEFT bwor DAM_CRIP_LEG_RIGHT bwor DAM_CRIP_ARM_LEFT bwor DAM_CRIP_ARM_RIGHT));
   call NodeFAIDEnd;
end

procedure NodeFAID300 begin
   MedicMany := get_critter_stat(dude_obj,STAT_current_rad);
   medicNodeOption(NodeFAID301)
end

procedure NodeFAID301 begin
   radiation_dec(dude_obj,get_critter_stat(dude_obj,STAT_current_rad));
   call NodeFAIDEnd;
end

procedure NodeFAID400 begin
   MedicMany := get_poison(dude_obj);
   medicNodeOption(NodeFAID401)
end

procedure NodeFAID401 begin
   poison(dude_obj,-(get_poison(dude_obj)));
   call NodeFAIDEnd;
end

procedure NodeFAIDEnd begin
   if (MedicMany >0) then begin
   item_remove(dude_obj, PID_BOOTLE_CAPS, MedicMany)
   end
   PLAY_FADE
   Reply(234)
   NAnswer(235,1,NodeFAID)
   NAnswer(237,1,Node999)
end
