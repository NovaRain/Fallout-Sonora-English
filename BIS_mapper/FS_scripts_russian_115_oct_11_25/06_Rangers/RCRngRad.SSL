#include "..\headers\define.h"
//---------------------

#define NAME                            SCRIPT_RCRngRad
#define TOWN_REP_VAR                    GVAR_TOWN_REP_RANGERS // привязка к репутации (-1, если не нужно)

#define NUM_TEAM                        TEAM_RANGERS          // группа, к которой принадлежит персонаж (-1 если нужно оставить Team, заданный в редакторе)
#define NUM_AI                          AI_RANGER             // AI персонажа (-1 если нужно оставить AI, заданный в редакторе)
#define KILL_SLAVA                      SLAVA_KILL_GOOD       // слава за убийство этого персонажа (SLAVA_KILL_GOOD, SLAVA_KILL_BAD, SLAVA_KILL_NEITRAL, SLAVA_KILL_CHILD)
#define KILL_TOWN_REP                   REP_KILL_CRITICAL     // репутация за убийство этого персонажа (-100 для враждебности всего поселения)
#define KILL_FRAC_REP                   FRAC_RANGER           // принадлежность определенной фракции (-1, если не нужно)

#define FLAG_STEAL                      60 // Нижний порог навыка для кражи (для торговцев 200, для животных 300)
#define FLAG_ALCOHOL                    1  // Примет ли алкоголь от ГГ: 0 - принимает, 1 - не принимает
#define FLAG_FOOD                       1  // Примет ли пищу от ГГ: 0 - принимает, 1 - не принимает

//---------------------

procedure start;
procedure map_enter_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure timed_event_p_proc;
procedure critter_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure pickup_p_proc;
procedure combat_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;

procedure Node998;
procedure Node999;
procedure NodeStartDialog;
procedure NodeFstDialog;
procedure NodeSndDialog;
procedure NodeSndDialog2;
procedure NodeSndDialog3;
procedure NodeAnswer100;
procedure NodeAnswer101;
procedure NodeAnswer102;
procedure NodeAnswer200;
procedure NodeAnswer201;
procedure NodeAnswer202;
procedure NodeAnswer203;
procedure NodeAnswer204;
procedure NodeAnswer205;
procedure NodeAnswer206;
procedure NodeAnswer300;
procedure NodeAnswer301;
procedure NodeAnswer400;
procedure NodeAnswer401;
procedure NodeQst100;
procedure NodeQst101;
procedure NodeQst102;
procedure NodeQst102b;
procedure NodeQst103;
procedure NodeQst104;
procedure NodeQst105;
procedure NodeQst106;
procedure NodeQst107;
procedure NodeQst108;
procedure NodeQst109;
procedure NodeQst110;

//---------------------

//#define LVAR_Flag_A                     (6) // отвечает за ...

//---------------------



procedure start begin
end

procedure map_enter_p_proc begin
   if (is_loading_game == false) then begin
       set_start_home
   end
end

procedure look_at_p_proc begin
   lookProcMsg
end

procedure description_p_proc begin
   dsrptProcMsg
end

procedure timed_event_p_proc begin
   // Таймер за номером 1 рарезервирован под перемещение персонажа по локации
   // Таймер за номером 2 рарезервирован под всплывающие реплики
   if (fixed_param == 1) then begin
       timer_move_to_home
   end
   if (fixed_param == 2) then begin
       //timer_float_reply(110,119)
   end
end

procedure critter_p_proc begin
   set_critter_options(1,0) //условие нападения (0 личная вражда, 1 вражда клановая, 2 всегда), разворот к ГГ
end

procedure use_skill_on_p_proc begin
   skillUseSteal
   skillUseFAid
end

procedure pickup_p_proc begin
   pickupProcCritter
end

procedure use_obj_on_p_proc begin
   UsedItemToCrit_Proc
end

procedure combat_p_proc begin
   effectAttak(0,0,1,1,1) //отравление min, облучение min, травма ног %, травма рук %, травма глаз %
end

procedure damage_p_proc begin
   set_damage_dude
end

procedure destroy_p_proc begin
   kill_critter_opt
end

procedure talk_p_proc begin
   setReaction(1) // Отношение к ГГ(1 - персонаж положительный, -1 отрицательный, 0 нейтральный)

   fracReaction(GVAR_TITUL_ARIZONA_RANGER,50) // Поправка к отношению за принадлежность к фракциям
   fracReaction(GVAR_TITUL_PHENIX_CULT,-40) // Поправка к отношению за принадлежность к фракциям
   fracReaction(GVAR_TITUL_BOS,-40) // Поправка к отношению за принадлежность к фракциям
   fracReaction(GVAR_TITUL_BOS_TRAITOR,20) // Поправка к отношению за принадлежность к фракциям
   fracReaction(GVAR_TITUL_WARRIOR_ROAD,-20) // Поправка к отношению за принадлежность к фракциям

   dialog_proc(0,0,NodeStartDialog,-1,-1)
end

procedure Node998 begin
   set_enemy_dude;
end

procedure Node999 begin
end

procedure NodeStartDialog begin
   if (bitDialog(bit_1) == 0) then begin
   call NodeFstDialog;
   end
   else if ((bitDialog(bit_4) == 0) and (global_var(GVAR_RANGERS_STATUS_SPY) == -2)) then begin
   call NodeSndDialog2;
   end
   else if ((bitDialog(bit_6) == 0) and (global_var(GVAR_JACKALS_STATUS_RANGER) > 0)) then begin
   call NodeSndDialog3;
   end
   else begin
   call NodeSndDialog;
   end
end

//--- ПЕРВЫЙ ДИАЛОГ

procedure NodeFstDialog begin
   bitDialogExp(bit_1,0)
   call NodeSndDialog;
   /*
   Reply(200)
   NAnswer(201,1,Node999)
   */
end

//--- ПОВТОРНЫЙ ДИАЛОГ

procedure NodeSndDialog begin
   Reply(210)

   if (getQuest(GVAR_RANGERS_QST_REPAIR_RADIO) == qStart) then begin
      if (bitDialog(bit_5) == 0) then begin
         NAnswer(280,1,NodeQst100)
      end
      else begin
         if (global_var(GVAR_RANGER_RADIO_MARK) == 1) then begin
            NAnswer(290,1,NodeQst104)
         end
         if (global_var(GVAR_RANGER_RADIO_MARK) == 2) then begin
            if (global_var(GVAR_RANGER_RADIOTRANSLTR) == 1) then begin
            NAnswer(291,1,NodeQst108)
            end
            if (global_var(GVAR_RANGER_RADIOTRANSLTR) <= 1) then begin
            NAnswer(292,1,NodeQst110)
            end
         end
      end
   end

   if (getQuest(GVAR_RANGERS_DUMB_DESTROY) >= qEnd) then begin
   NAnswer(260,1,NodeAnswer400)
   end
   NAnswer(220,1,NodeAnswer100)
   NAnswer(230,1,NodeAnswer200)
   if (gvar_bit(GVAR_RADIO_FLAGS_BIT, bit_3) == 0) then begin
      if (bitDialog(bit_7) != 0) then begin
      NAnswer(250,1,NodeAnswer300)
      end
   end
   NAnswer(211,1,Node999)
end

procedure NodeSndDialog2 begin
   bitDialogExp(bit_4,0)
   Reply(270)
   zNAnswer(271,1,NodeSndDialog)
   NAnswer(272,1,NodeSndDialog)
end

procedure NodeSndDialog3 begin
   bitDialogExp(bit_6,0)
   Reply(273)
   zNAnswer(274,1,NodeSndDialog)
   NAnswer(275,1,NodeSndDialog)
end

procedure NodeAnswer100 begin
   Reply(221)
   NAnswer(222,1,NodeAnswer101)
end

procedure NodeAnswer101 begin
   Reply(223)
   NAnswer(224,1,NodeAnswer102)
end

procedure NodeAnswer102 begin
   bitDialogExp(bit_2,10)
   Reply(225)
   NAnswer(226,1,NodeSndDialog)
   NAnswer(227,1,Node999)
end

procedure NodeAnswer200 begin
   bitDialogExp(bit_7,0)
   Reply(231)
   NAnswer(232,1,NodeAnswer201)
   NAnswer(234,1,NodeAnswer202)
   NAnswer(236,4,NodeAnswer203)
   NAnswer(242,1,NodeAnswer206)
   NAnswer(229,1,NodeSndDialog)
end

procedure NodeAnswer201 begin
   Reply(233)
   NAnswer(244,1,NodeAnswer200)
   NAnswer(229,1,NodeSndDialog)
end

procedure NodeAnswer202 begin
   Reply(235)
   NAnswer(244,1,NodeAnswer200)
   NAnswer(229,1,NodeSndDialog)
end

procedure NodeAnswer203 begin
   Reply(237)
   NAnswer(238,4,NodeAnswer204)
   NAnswer(244,1,NodeAnswer200)
   NAnswer(229,1,NodeSndDialog)
end

procedure NodeAnswer204 begin
   Reply(239)
   NAnswer(240,6,NodeAnswer205)
   NAnswer(244,1,NodeAnswer200)
   NAnswer(229,1,NodeSndDialog)
end

procedure NodeAnswer205 begin
   bitDialogExp(bit_3,25)
   Reply(241)
   NAnswer(244,1,NodeAnswer200)
   NAnswer(229,1,NodeSndDialog)
end

procedure NodeAnswer206 begin
   Reply(243)
   NAnswer(244,1,NodeAnswer200)
   NAnswer(229,1,NodeSndDialog)
end

procedure NodeAnswer300 begin
   Reply(251)
   if (global_var(GVAR_TITUL_ARIZONA_RANGER) >0) then begin
   NAnswer(252,1,NodeAnswer301)
   end
   NAnswer(253,1,NodeSndDialog)
   BAnswer(254,1,Node999)
end

procedure NodeAnswer301 begin
   set_gvar_bit_on(GVAR_RADIO_FLAGS_BIT, bit_3);
   Reply(255)
   NAnswer(256,1,NodeSndDialog)
   BAnswer(257,1,NodeSndDialog)
end

procedure NodeAnswer400 begin
   Reply(261)
   NAnswer(262,1,NodeAnswer401)
end

procedure NodeAnswer401 begin
   Reply(263)
   NAnswer(264,1,NodeSndDialog)
end

//--- КВЕСТЫ

procedure NodeQst100 begin
   bitDialogExp(bit_5,0)
   Reply(281)
   NAnswer(282,1,NodeQst101)
end

procedure NodeQst101 begin
   Reply(283)
   NAnswer(278,1,NodeQst102)
end

procedure NodeQst102 begin
   Reply(279)
   NAnswer(284,1,NodeQst102b)
end

procedure NodeQst102b begin
   Reply(285)
   NAnswer(286,1,Node999)
   /*
   if (global_var(GVAR_JACKALS_STATUS_RANGER) == 0) then begin
   NAnswer(286,1,NodeQst103)
   end
   else begin
   NAnswer(286,1,Node999)
   end
   */
end

procedure NodeQst103 begin
   Reply(287)
   NAnswer(288,1,Node999)
   NAnswer(289,1,Node999)
end

procedure NodeQst104 begin
   Reply(294)
   NAnswer(295,1,NodeQst105)
end

procedure NodeQst105 begin
   PLAY_FADE
   Reply(296)
   NAnswer(297,1,NodeQst106)
end

procedure NodeQst106 begin
   Reply(298)
   NAnswer(299,1,NodeQst107)
end

procedure NodeQst107 begin
   inc_global_var(GVAR_RANGER_RADIO_MARK);
   //set_gvar_bit_on(GVAR_RADIO_FLAGS_BIT, bit_3);
   if (item_amnt(self_obj,PID_TOOL_RADIO) > 0) then begin
   item_add(dude_obj,PID_TOOL_RADIO,1)
   item_remove(self_obj,PID_TOOL_RADIO,1)
   end
   Reply(300)
   NAnswer(301,1,Node999)
end

procedure NodeQst108 begin
   /*
   Reply(302)
   NAnswer(303,1,NodeQst109)
   */
   call NodeQst109;
end

procedure NodeQst109 begin
   inc_global_var(GVAR_RANGER_RADIOTRANSLTR);
   Reply(302)
   NAnswer(305,1,Node999)
end

procedure NodeQst110 begin
   Reply(293)
   NAnswer(264,1,NodeSndDialog)
   NAnswer(211,1,Node999)
end
