#include "..\headers\define.h"
//---------------------

#define NAME                            SCRIPT_MCMom
#define TOWN_REP_VAR                    GVAR_TOWN_REP_MOTEL   // привязка к репутации (-1, если не нужно)

#define NUM_TEAM                        TEAM_MOTEL_MUTANT     // группа, к которой принадлежит персонаж (-1 если нужно оставить Team, заданный в редакторе)
#define NUM_AI                          AI_MUTANT_MOTEL       // AI персонажа (-1 если нужно оставить AI, заданный в редакторе)
#define KILL_SLAVA                      (SLAVA_KILL_BAD*3)    // слава за убийство этого персонажа (SLAVA_KILL_GOOD, SLAVA_KILL_BAD, SLAVA_KILL_NEITRAL, SLAVA_KILL_CHILD)
#define KILL_TOWN_REP                   REP_KILL_CRITICAL     // репутация за убийство этого персонажа (REP_KILL_GOOD, REP_KILL_NEITRAL, REP_KILL_BAD, REP_KILL_CHILD, REP_KILL_CRITICAL)
#define KILL_FRAC_REP                   FRAC_NON              // принадлежность определенной фракции (-1, если не нужно)

#define FLAG_STEAL                      10 // Нижний порог навыка для кражи (для торговцев 200, для животных 300)
#define FLAG_ALCOHOL                    1  // Примет ли алкоголь от ГГ: 0 - принимает, 1 - отказывается
#define FLAG_FOOD                       1  // Примет ли пищу от ГГ: 0 - принимает, 1 - отказывается

//---------------------

procedure start;
procedure map_enter_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure timed_event_p_proc;
procedure critter_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure pickup_p_proc;
procedure combat_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;

procedure Node998;
procedure Node999;
procedure NodeStartDialog;
procedure NodeFstDialog;
procedure NodeFstDialog2;
procedure NodeFstDialog3;
procedure NodeFstDialog4;
procedure NodeFstDialog5;
procedure NodeFstDialog6;
procedure NodeFstDialog7;
procedure NodeFstDialog8;
procedure NodeFstDialog9;
procedure NodeFstDialog10;
procedure NodeFstDialog11;

//---------------------

//#define LVAR_Flag_A                     (5) // отвечает за ...

//---------------------



procedure start begin
end

procedure map_enter_p_proc begin
   if (is_loading_game == false) then begin
       set_start_home
   end
end

procedure look_at_p_proc begin
   lookProcMsg
end

procedure description_p_proc begin
   dsrptProcMsg
end

procedure timed_event_p_proc begin
   // Таймер за номером 1 зарезервирован под перемещение персонажа по локации
   // Таймер за номером 2 зарезервирован под всплывающие реплики
   if (fixed_param == 1) then begin
       timer_move_to_home
   end
   if (fixed_param == 2) then begin
       //timer_float_reply(120,121)
   end
end

procedure critter_p_proc begin
   //invisToDude(10,0) // Скрывание нпс от ГГ до некоторой дистанции, в скобках бонус к дальности и реплика для лога (устанавливать set_obj_visibility(self_obj, 1) в map_enter_p_proc)
   set_critter_options(0,0) //условие нападения (0 личная вражда, 1 вражда клановая, 2 всегда), разворот к ГГ
end

procedure use_skill_on_p_proc begin
   skillUseSteal
   skillUseFAid
end

procedure pickup_p_proc begin
   pickupProcCritter
end

procedure use_obj_on_p_proc begin
   UsedItemToCrit_Proc
end

procedure combat_p_proc begin
   effectAttak(0,0,0,0,0) //отравление min, облучение min, травма ног %, травма рук %, травма глаз %
   effectRegeratHP
end

procedure damage_p_proc begin
   set_damage_dude
end

procedure destroy_p_proc begin
   inc_map_var(MVAR_MOTEL_BRTHR);
   inc_global_var(GVAR_PHENIX_STATUS_MOTELMNSTR);
   kill_critter_opt
end

procedure talk_p_proc begin
   if (bitDialog(bit_1) == 0) then begin
      setReaction(0) // Отношение к ГГ (1 - персонаж положительный, -1 отрицательный, 0 нейтральный)
      dialog_proc(0,0,NodeStartDialog,-1,-1)
   end
   else begin
      if (map_var(MVAR_MOTEL_BRTHR)>=3) then begin
      floater(self_obj,102,COLOR_MSG_RED);
      end
      else begin
      floater(self_obj,103,COLOR_MSG_RED);
      end
   end
end

procedure Node998 begin
   setNodeCombat;
end

procedure Node999 begin
end

procedure NodeStartDialog begin
   call NodeFstDialog;
end

//--- ПЕРВЫЙ ДИАЛОГ

procedure NodeFstDialog begin
   bitDialogExp(bit_1,200)
   Reply(200)
   NAnswer(201,1,NodeFstDialog2)
end

procedure NodeFstDialog2 begin
   Reply(202)
   NAnswer(203,1,NodeFstDialog3)
   BAnswer(204,1,NodeFstDialog3)
end

procedure NodeFstDialog3 begin
   Reply(205)
   BAnswer(207,1,NodeFstDialog4)
   NAnswer(206,1,NodeFstDialog4)
end

procedure NodeFstDialog4 begin
   Reply(208)
   NAnswer(209,1,NodeFstDialog5)
   BAnswer(210,1,NodeFstDialog5)
end

procedure NodeFstDialog5 begin
   Reply(211)
   NAnswer(212,1,NodeFstDialog6)
end

procedure NodeFstDialog6 begin
   Reply(213)
   NAnswer(214,1,NodeFstDialog7)
end

procedure NodeFstDialog7 begin
   Reply(215)
   BAnswer(217,1,NodeFstDialog8)
   NAnswer(216,1,NodeFstDialog8)
end

procedure NodeFstDialog8 begin
   Reply(218)
   if (map_var(MVAR_MOTEL_BRTHR)>=3) then begin
   BAnswer(219,1,NodeFstDialog9)
   BAnswer(230,4,NodeFstDialog9)
   end
   else begin
   GAnswer(229,4,NodeFstDialog11)
   NAnswer(226,1,NodeFstDialog11)
   BAnswer(227,1,NodeFstDialog11)
   end
end

procedure NodeFstDialog9 begin
   Reply(220)
   NAnswer(221,1,NodeFstDialog10)
   NAnswer(222,1,NodeFstDialog10)
end

procedure NodeFstDialog10 begin
   Reply(223)
   NAnswer(224,1,Node999)
   BAnswer(225,1,Node999)
end

procedure NodeFstDialog11 begin
   Reply(228)
   NAnswer(224,1,Node999)
   BAnswer(225,1,Node999)
end
