#include "..\headers\define.h"
//---------------------

#define NAME                            SCRIPT_PCRedPst
#define TOWN_REP_VAR                    GVAR_TOWN_REP_PHOENIX // привязка к репутации (-1, если не нужно)

#define NUM_TEAM                        TEAM_PHOENIX_BANDIT   // группа, к которой принадлежит персонаж (-1 если нужно оставить Team, заданный в редакторе)
#define NUM_AI                          AI_BANDIT             // AI персонажа (-1 если нужно оставить AI, заданный в редакторе)
#define KILL_SLAVA                      SLAVA_KILL_BAD        // слава за убийство этого персонажа (SLAVA_KILL_GOOD, SLAVA_KILL_BAD, SLAVA_KILL_NEITRAL, SLAVA_KILL_CHILD)
#define KILL_TOWN_REP                   REP_KILL_BAD          // репутация за убийство этого персонажа (-100 для враждебности всего поселения)
#define KILL_FRAC_REP                   FRAC_NON              // принадлежность определенной фракции (-1, если не нужно)

#define FLAG_STEAL                      50 // Нижний порог навыка для кражи (для торговцев 200, для животных 300)
#define FLAG_ALCOHOL                    0  // Примет ли алкоголь от ГГ: 0 - принимает, 1 - не принимает
#define FLAG_FOOD                       1  // Примет ли пищу от ГГ: 0 - принимает, 1 - не принимает

//---------------------

procedure start;
procedure map_enter_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure timed_event_p_proc;
procedure critter_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure pickup_p_proc;
procedure combat_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;

procedure Node998;
procedure Node999;
procedure NodeStartDialog;
procedure NodeFstDialog;
procedure NodeFstDialog2;
procedure NodeFstDialog3;
procedure NodeFstDialog4;
procedure NodeFstDialog5;
procedure NodeSndDialog;
procedure NodeSndDialog2;
procedure NodeLetter;
procedure NodeLetter2;
procedure NodeLetter3;
procedure NodeLetter4;
procedure NodeLetter5;
procedure NodeLetter6;
procedure NodeLetter7;
procedure NodeLetter8;
procedure NodeLetter9;
procedure NodeLetter10;
procedure NodeLetter11;
procedure NodeLetter12;
procedure NodeLetterEnd;

//---------------------

//#define LVAR_Flag_A                     (6) // отвечает за ...

//---------------------



procedure start begin
end

procedure map_enter_p_proc begin
   if (is_loading_game == false) then begin
       set_start_home
   end
end

procedure look_at_p_proc begin
   lookProcMsg
end

procedure description_p_proc begin
   dsrptProcMsg
end

procedure timed_event_p_proc begin
   // Таймер за номером 1 рарезервирован под перемещение персонажа по локации
   // Таймер за номером 2 рарезервирован под всплывающие реплики
   if (fixed_param == 1) then begin
       timer_move_to_home
   end
   if (fixed_param == 2) then begin
       //timer_float_reply(110,111)
   end
end

procedure critter_p_proc begin
   set_critter_options(0,1) //условие нападения (0 личная вражда, 1 вражда клановая, 2 всегда), разворот к ГГ
   if (bitDialog(bit_1) == 0) then begin
   dialogue_system_forcing(5)
   end
end

procedure use_skill_on_p_proc begin
   skillUseSteal
   skillUseFAid
end

procedure pickup_p_proc begin
   pickupProcCritter
end

procedure use_obj_on_p_proc begin
   UsedItemToCrit_Proc
end

procedure combat_p_proc begin
   effectAttak(0,0,1,1,1) //отравление min, облучение min, травма ног %, травма рук %, травма глаз %
end

procedure damage_p_proc begin
   set_damage_dude
end

procedure destroy_p_proc begin
   kill_critter_opt
end

procedure talk_p_proc begin
   setReaction(-1) // Отношение к ГГ (1 - персонаж положительный, -1 отрицательный, 0 нейтральный)
   dialog_proc(0,0,NodeStartDialog,-1,-1)
end

procedure Node998 begin
   set_enemy_dude;
end

procedure Node999 begin
end

procedure NodeStartDialog begin
   if (getQuest(GVAR_PHENIX_QST_CARDINALS) > qZero) then begin
   bitDialogExp(bit_1,0)
   end

   if (bitDialog(bit_1) == 0) then begin
   call NodeFstDialog;
   end
   else begin
   call NodeSndDialog;
   end
end

//--- ПЕРВЫЙ ДИАЛОГ

procedure NodeFstDialog begin
   bitDialogExp(bit_1,0)
   Reply(200)
   NAnswer(201,1,NodeFstDialog2)
   BAnswer(209,1,NodeFstDialog5)
end

procedure NodeFstDialog2 begin
   zReply(202)
   NAnswer(203,1,NodeFstDialog3)
end

procedure NodeFstDialog3 begin
   Reply(204)
   NAnswer(206,1,NodeFstDialog4)
   NAnswer(205,1,Node999)
end

procedure NodeFstDialog4 begin
   Reply(207)
   NAnswer(208,1,Node999)
end

procedure NodeFstDialog5 begin
   Reply(210)
   NAnswer(206,1,NodeFstDialog4)
   NAnswer(205,1,Node999)
end

//--- ПОВТОРНЫЙ ДИАЛОГ

procedure NodeSndDialog begin
   if (global_var(GVAR_PHENIX_STATUS_CARDINAL) > 0) then begin
   Reply(213)
   end
   else if (global_var(GVAR_TITUL_REBIRTH)>0) then begin
   zReply(218)
   end
   else begin
   zReply(211)
   end

   if (bitDialog(bit_3) == 0) then begin
   if (getQuest(GVAR_PHENIX_QST_LETTERS) == qStart) then begin
      if (item_amnt(self_obj,PID_Q_LETTERS) > 0) then begin
      if (bitDialog(bit_2) == 0) then begin
      NAnswer(220,1,NodeLetter)
      end
      else begin
      NAnswer(235,1,NodeLetter7)
      end
      end
   end
   end

   if (getQuest(GVAR_PHENIX_QST_CARDINAL_SPY) == qStart) then begin
      NAnswer(214,1,NodeSndDialog2)
   end

   NAnswer(212,1,Node999)
end

procedure NodeSndDialog2 begin
   Reply(215)
   BAnswer(216,1,Node999)
   NAnswer(217,1,Node999)
end

procedure NodeLetter begin
   bitDialogExp(bit_2,0)
   Reply(221)
   NAnswer(222,1,NodeLetter2)
end

procedure NodeLetter2 begin
   Reply(223)
   NAnswer(224,1,NodeLetter3)
end

procedure NodeLetter3 begin
   Reply(225)
   BAnswer(226,1,NodeLetter4)
   NAnswer(229,1,NodeLetter5)
end

procedure NodeLetter4 begin
   Reply(227)
   NAnswer(228,1,NodeLetter6)
end

procedure NodeLetter5 begin
   Reply(230)
   NAnswer(231,1,NodeLetter6)
end

procedure NodeLetter6 begin
   Reply(232)
   BAnswer(244,1,Node998)
   GAnswer(233,1,NodeLetter8)
   if (global_var(GVAR_TITUL_PHENIX_CULT)>0) then begin
   BAnswer(246,1,NodeLetter9)
   end
   if (global_var(GVAR_TITUL_PHENIX_CASINO)>0) then begin
   BAnswer(249,1,NodeLetter10)
   end
   if (global_var(GVAR_PHENIX_STATUS_CARDINAL)>0) then begin
   BAnswer(252,1,NodeLetter11)
   end
   if (global_var(GVAR_TITUL_ARENA_MASTER)>0) then begin
   BAnswer(255,1,NodeLetter12)
   end
   NAnswer(245,1,Node999)
end

procedure NodeLetter7 begin
   Reply(236)
   NAnswer(237,1,NodeLetter6)
   NAnswer(238,1,Node999)
end

procedure NodeLetter8 begin
   if (item_amnt(dude_obj,PID_BOOTLE_CAPS)<30) then begin
   Reply(239)
   BAnswer(241,1,Node998)
   NAnswer(240,1,Node999)
   end
   else begin
   call NodeLetterEnd;
   item_remove(dude_obj,PID_BOOTLE_CAPS,30)
   item_add(self_obj,PID_BOOTLE_CAPS,30)
   Reply(242)
   NAnswer(243,1,Node999)
   end
end

procedure NodeLetter9 begin
   call NodeLetterEnd;
   Reply(247)
   NAnswer(248,1,Node999)
end

procedure NodeLetter10 begin
   call NodeLetterEnd;
   zReply(250)
   NAnswer(251,1,Node999)
end

procedure NodeLetter11 begin
   call NodeLetterEnd;
   zReply(253)
   NAnswer(254,1,Node999)
end

procedure NodeLetter12 begin
   call NodeLetterEnd;
   Reply(256)
   NAnswer(257,1,Node999)
end

procedure NodeLetterEnd begin
   bitDialogExp(bit_3,0)
   item_remove(self_obj,PID_Q_LETTERS,1)
   item_add(dude_obj,PID_Q_LETTERS,1)
end
