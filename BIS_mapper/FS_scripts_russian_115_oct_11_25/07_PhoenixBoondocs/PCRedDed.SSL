#include "..\headers\define.h"
//---------------------

#define NAME                            SCRIPT_PCRedDed
#define TOWN_REP_VAR                    GVAR_TOWN_REP_PHOENIX // привязка к репутации (-1, если не нужно)

#define NUM_TEAM                        TEAM_PHOENIX_BANDIT   // группа, к которой принадлежит персонаж (-1 если нужно оставить Team, заданный в редакторе)
#define NUM_AI                          AI_BANDIT             // AI персонажа (-1 если нужно оставить AI, заданный в редакторе)
#define KILL_SLAVA                      SLAVA_KILL_NEITRAL    // слава за убийство этого персонажа (SLAVA_KILL_GOOD, SLAVA_KILL_BAD, SLAVA_KILL_NEITRAL, SLAVA_KILL_CHILD)
#define KILL_TOWN_REP                   REP_KILL_NEITRAL      // репутация за убийство этого персонажа (-100 для враждебности всего поселения)
#define KILL_FRAC_REP                   FRAC_NON              // принадлежность определенной фракции (-1, если не нужно)

#define FLAG_STEAL                      50 // Нижний порог навыка для кражи (для торговцев 200, для животных 300)
#define FLAG_ALCOHOL                    0  // Примет ли алкоголь от ГГ: 0 - принимает, 1 - не принимает
#define FLAG_FOOD                       1  // Примет ли пищу от ГГ: 0 - принимает, 1 - не принимает

//---------------------

procedure start;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure timed_event_p_proc;
procedure critter_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure uninjure_proc;
procedure pickup_p_proc;
procedure combat_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;

procedure Node998;
procedure Node999;
procedure NodeStartDialog;
procedure NodeFstDialog;
procedure NodeFstDialog2;
procedure NodeFstDialog3;
procedure NodeSndDialog;

//---------------------

//#define LVAR_Flag_A                     (6) // отвечает за ...

variable floatReplyNum;

//---------------------



procedure start begin
end

procedure map_enter_p_proc begin
   if (is_loading_game == false) then begin
       set_start_home
       set_injure_start(0,0,1,0,0) // травмировать (отметить нужное цифрой 1): a - левая рука, b - правая рука, c - левая нога, d - правая нога, e - слепота

       set_obj_visibility(self_obj, 0);
       if (getQuest(GVAR_PHENIX_QST_CARDINALS) <= qZero) then begin
          rm_timer_event(self_obj);
          set_obj_visibility(self_obj, 1);
       end
       else begin
          if (global_var(GVAR_PHENIX_STATUS_CARD_PRISON) != 0) then begin
          if (get_Medic_Quest == 0) then begin
          kill_critter(self_obj, ANIM_fall_back_blood_sf);
          end
          end
       end
   end
end

procedure map_update_p_proc begin
   set_injure_update(100,104)
end

procedure look_at_p_proc begin
   lookProcMsg
end

procedure description_p_proc begin
   //dsrptProcMsg
   script_overrides;
   if (get_Medic_Quest == 0) then begin
   display_mstr(101);
   end
   else begin
   display_mstr(102);
   end
end

procedure timed_event_p_proc begin
   // Таймер за номером 1 рарезервирован под перемещение персонажа по локации
   // Таймер за номером 2 рарезервирован под всплывающие реплики
   if (fixed_param == 1) then begin
       timer_move_to_home
   end
   if (fixed_param == 2) then begin
       //timer_float_reply(110,111)
   end
end

procedure critter_p_proc begin
   set_critter_options(0,0) //условие нападения (0 личная вражда, 1 вражда клановая, 2 всегда), разворот к ГГ
end

procedure use_skill_on_p_proc begin
   skillUseSteal
   skillUseFAid
   skillUseDoctor(35)
end

procedure uninjure_proc begin
   //не удалять
end

procedure pickup_p_proc begin
   pickupProcCritter
end

procedure use_obj_on_p_proc begin
   UsedItemToCrit_Proc
   UsedToCrit_Stimpak_Doctor
end

procedure combat_p_proc begin
   effectAttak(0,0,0,0,0) //отравление min, облучение min, травма ног %, травма рук %, травма глаз %
end

procedure damage_p_proc begin
   set_damage_dude
end

procedure destroy_p_proc begin
   set_global_var(GVAR_PHENIX_STATUS_CARD_PRISON,1);
   kill_critter_opt
   floater(self_obj,103,COLOR_MSG_RED);
end

procedure talk_p_proc begin
   if (get_Medic_Quest == 0) then begin
      floatReplyNum += 1;
      floater(self_obj,109+floatReplyNum,COLOR_MSG_RED);
      if ((109+floatReplyNum) >= 119) then begin
      floater(dude_obj,120,COLOR_MSG_NORMAL);
      set_global_var(GVAR_PHENIX_STATUS_CARD_PRISON,1);
      kill_critter(self_obj, ANIM_fall_back_blood_sf);
      end
   end
   else begin
      dialog_proc(0,0,NodeStartDialog,-1,-1)
   end
end

procedure Node998 begin
end

procedure Node999 begin
end

procedure NodeStartDialog begin
   if (bitDialog(bit_1) == 0) then begin
   call NodeFstDialog;
   end
   else begin
   call NodeSndDialog;
   end
end

//----- ДИАЛОГ

procedure NodeFstDialog begin
   bitDialogExp(bit_1,0)
   set_REP(1)
   set_SLAVA(10)
   Reply(200)
   if (global_var(GVAR_PHENIX_STATUS_CARD_PRISON) == 0) then begin
   NAnswer(201,1,NodeFstDialog2)
   end
   NAnswer(207,1,Node999)
end

procedure NodeFstDialog2 begin
   Reply(202)
   NAnswer(203,1,NodeFstDialog3)
end

procedure NodeFstDialog3 begin
   set_global_var(GVAR_PHENIX_STATUS_CARD_PRISON,1);
   Reply(204)
   NAnswer(205,1,Node999)
   NAnswer(206,1,Node999)
end

procedure NodeSndDialog begin
   Reply(200)
   if (global_var(GVAR_PHENIX_STATUS_CARD_PRISON) == 0) then begin
   NAnswer(201,1,NodeFstDialog2)
   end
   NAnswer(207,1,Node999)
end
