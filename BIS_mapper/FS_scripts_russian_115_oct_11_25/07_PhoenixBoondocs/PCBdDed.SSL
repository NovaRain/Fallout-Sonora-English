#include "..\headers\define.h"
//---------------------

#define NAME                            SCRIPT_PCBdDed
#define TOWN_REP_VAR                    GVAR_TOWN_REP_PHOENIX // привязка к репутации (-1, если не нужно)

#define NUM_TEAM                        TEAM_PHOENIX_CITIZEN  // группа, к которой принадлежит персонаж (-1 если нужно оставить Team, заданный в редакторе)
#define NUM_AI                          AI_PERSON_WIMPY       // AI персонажа (-1 если нужно оставить AI, заданный в редакторе)
#define KILL_SLAVA                      SLAVA_KILL_GOOD       // слава за убийство этого персонажа (SLAVA_KILL_GOOD, SLAVA_KILL_BAD, SLAVA_KILL_NEITRAL, SLAVA_KILL_CHILD)
#define KILL_TOWN_REP                   REP_KILL_GOOD         // репутация за убийство этого персонажа (-100 для враждебности всего поселения)
#define KILL_FRAC_REP                   FRAC_NON              // принадлежность определенной фракции (-1, если не нужно)

#define FLAG_STEAL                      50 // Нижний порог навыка для кражи (для торговцев 200, для животных 300)
#define FLAG_ALCOHOL                    0  // Примет ли алкоголь от ГГ: 0 - принимает, 1 - не принимает
#define FLAG_FOOD                       0  // Примет ли пищу от ГГ: 0 - принимает, 1 - не принимает

//---------------------

procedure start;
procedure map_enter_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure timed_event_p_proc;
procedure critter_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure pickup_p_proc;
procedure combat_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;

procedure Node998;
procedure Node999;
procedure NodeStartDialog;
procedure NodeFstDialog;
procedure NodeFstDialog2;
procedure NodeFstDialog3;
procedure NodeFstDialog4;
procedure NodeFstDialog5;
procedure NodeFstDialog6;
procedure NodeFstDialog7;
procedure NodeFstDialog8;
procedure NodeSndDialog;
procedure NodeAnswer100;
procedure NodeAnswer101;
procedure NodeAnswer102;
procedure NodeAnswer103;
procedure NodeAnswer104;
procedure NodeAnswer105;
procedure NodeAnswer106;
procedure NodeAnswer200;
procedure NodeAnswer201;
procedure NodeAnswer202;
procedure NodeAnswer203;
procedure NodeAnswer300;
procedure NodeAnswer301;
procedure NodeAnswer302;
procedure NodeAnswer303;
procedure NodeAnswer400;
procedure NodeAnswer401;
procedure NodeAnswer402;
procedure NodeAnswer403;
procedure NodeAnswer404;
procedure NodeAnswer405;
procedure NodeAnswer406;
procedure NodeAnswer407;
procedure NodeAnswer408;
procedure NodeAnswer409;
procedure NodeAnswer410;
procedure NodeAnswer411;

//---------------------

//#define LVAR_Flag_A                     (6) // отвечает за ...

//---------------------



procedure start begin
end

procedure map_enter_p_proc begin
   if (is_loading_game == false) then begin
       set_start_home
   end
end

procedure look_at_p_proc begin
   lookProcMsg
end

procedure description_p_proc begin
   dsrptProcMsg
end

procedure timed_event_p_proc begin
   // Таймер за номером 1 рарезервирован под перемещение персонажа по локации
   // Таймер за номером 2 рарезервирован под всплывающие реплики
   if (fixed_param == 1) then begin
       timer_move_to_home
   end
   if (fixed_param == 2) then begin
       //timer_float_reply(110,111)
   end
end

procedure critter_p_proc begin
   set_critter_options(0,0) //условие нападения (0 личная вражда, 1 вражда клановая, 2 всегда), разворот к ГГ
end

procedure use_skill_on_p_proc begin
   skillUseSteal
   skillUseFAid
end

procedure pickup_p_proc begin
   pickupProcCritter
end

procedure use_obj_on_p_proc begin
   UsedItemToCrit_Proc
   if (itemTypeUseDude == 2) then begin
   setBonusReaction(10)
   end
end

procedure combat_p_proc begin
   effectAttak(0,0,0,0,0) //отравление min, облучение min, травма ног %, травма рук %, травма глаз %
end

procedure damage_p_proc begin
   set_damage_dude
end

procedure destroy_p_proc begin
   kill_critter_opt
end

procedure talk_p_proc begin
   setReaction(0) // Отношение к ГГ(1 - персонаж положительный, -1 отрицательный, 0 нейтральный)
   dialog_proc(0,0,NodeStartDialog,-1,-1)
end

procedure Node998 begin
   set_enemy_dude;
end

procedure Node999 begin
end

procedure NodeStartDialog begin
   if (bitDialog(bit_1) == 0) then begin
   call NodeFstDialog;
   end
   else if (bitDialog(bit_2) == 0) then begin
   call NodeFstDialog6;
   end
   else if ((bitDialog(bit_3) == 0) and (global_var(GVAR_TITUL_ARENA_MASTER) > 0)) then begin
   call NodeFstDialog7;
   end
   else begin
   call NodeSndDialog;
   end
end

//--- ПЕРВЫЙ ДИАЛОГ

procedure NodeFstDialog begin
   bitDialogExp(bit_1,0)
   zReply(200)
   NAnswer(201,1,NodeFstDialog2)
end

procedure NodeFstDialog2 begin
   Reply(202)
   NAnswer(203,1,NodeFstDialog3)
end

procedure NodeFstDialog3 begin
   Reply(204)
   BAnswer(205,1,NodeFstDialog4)
   NAnswer(mstr(209)+dude_name+mstr(210),1,NodeFstDialog5)
end

procedure NodeFstDialog4 begin
   setBonusReaction(-20)
   set_REP(-1)
   Reply(206)
   BAnswer(207,1,Node999)
   NAnswer(208,1,Node999)
end

procedure NodeFstDialog5 begin
   bitDialogExp(bit_2,0)
   Reply(211)
   NAnswer(219,1,NodeStartDialog)
   GAnswer(212,1,Node999)
   NAnswer(213,1,Node999)
end

procedure NodeFstDialog6 begin
   Reply(214)
   NAnswer(mstr(217)+dude_name+mstr(218),1,NodeFstDialog5)
   BAnswer(215,1,Node999)
   NAnswer(216,1,Node999)
end

procedure NodeFstDialog7 begin
   bitDialogExp(bit_3,0)
   setBonusReaction(25)
   Reply(mstr(230)+g_mstr(global_var(GVAR_PHENIX_TITUL_ARENA_NAME))+mstr(231))
   BAnswer(232,1,NodeStartDialog)
   GAnswer(233,1,NodeStartDialog)
   NAnswer(234,3,NodeFstDialog8)
end

procedure NodeFstDialog8 begin
   zReply(235)
   NAnswer(236,1,NodeStartDialog)
end

//--- ПОВТОРНЫЙ ДИАЛОГ

procedure NodeSndDialog begin
   if (getReaction <= -20) then begin
   Reply(random(225,226))
   end else begin
   Reply(random(220,223))
   end

   if (bitDialog(bit_4) == 0) then begin
   NAnswerReaction(250,3,NodeAnswer100,0,250,NodeAnswer101)
   end
   else begin
   NAnswer(255,1,NodeAnswer102)
   end
   NAnswer(350,1,NodeAnswer400)
   NAnswer(229,1,Node999)
end

procedure NodeAnswer100 begin
   Reply(254)
   NAnswer(255,1,NodeAnswer103)
   NAnswer(252,1,NodeAnswer400)
   NAnswer(253,1,Node999)
end

procedure NodeAnswer101 begin
   Reply(251)
   NAnswer(252,1,NodeAnswer400)
   NAnswer(253,1,Node999)
end

procedure NodeAnswer102 begin
   call NodeAnswer105;
end

procedure NodeAnswer103 begin
   Reply(256)
   if (town_known(AREA_GARAGE) == MARK_STATE_VISITED) then begin
   NAnswer(257,1,NodeAnswer104)
   end
   else begin
   NAnswer(260,1,NodeAnswer105)
   end
   NAnswer(262,1,NodeSndDialog)
end

procedure NodeAnswer104 begin
   Reply(258)
   NAnswer(259,1,NodeAnswer105)
end

procedure NodeAnswer105 begin
   Reply(263)
   NAnswer(264,1,NodeAnswer106)
end

procedure NodeAnswer106 begin
   bitDialogExp(bit_4,50)
   Reply(265)
   if (bitDialog(bit_5) == 0) then begin
   NAnswer(299,3,NodeAnswer200)
   end
   if (getQuest(GVAR_VAULT27_VISITED) == qStart) then begin
   NAnswer(270,3,NodeAnswer300)
   end
   NAnswer(266,1,NodeAnswer400)
   NAnswer(267,1,Node999)
end

procedure NodeAnswer200 begin
   if (town_rep_is_hated or (getReaction<=-50)) then begin
   call NodeAnswer201;
   end
   else begin
   call NodeAnswer202;
   end
end

procedure NodeAnswer201 begin
   Reply(291)
   NAnswer(292,1,NodeSndDialog)
   NAnswer(293,1,Node999)
end

procedure NodeAnswer202 begin
   bitDialogExp(bit_5,0)
   item_add(self_obj,PID_MAP_PHIENIX,1)
   Reply(300)
   NAnswer(301,1,NodeAnswer203)
end

procedure NodeAnswer203 begin
   goBarter(0);
   Reply(302)
   NAnswer(303,1,Node999)
end

procedure NodeAnswer300 begin
   Reply(271)
   NAnswer(272,1,NodeAnswer301)
end

procedure NodeAnswer301 begin
   Reply(273)
   NAnswer(274,1,NodeAnswer302)
end

procedure NodeAnswer302 begin
   Reply(275)
   NAnswer(276,1,NodeAnswer303)
end

procedure NodeAnswer303 begin
   Reply(277)
   NAnswer(280,1,NodeSndDialog)
   NAnswer(278,1,Node999)
   BAnswer(279,1,Node999)
end

procedure NodeAnswer400 begin
   if (getReaction>0) then begin
   call NodeAnswer402;
   end
   else begin
   call NodeAnswer401;
   end
end

procedure NodeAnswer401 begin
   Reply(351)
   if (bitDialog(bit_4) == 0) then begin
   NAnswerReaction(352,3,NodeAnswer100,0,352,NodeAnswer101)
   end else begin
   NAnswer(255,1,NodeAnswer102)
   end
   NAnswer(353,1,Node999)
end

procedure NodeAnswer402 begin
   Reply(354)
   NAnswer(356,1,NodeAnswer403)
   NAnswer(358,1,NodeAnswer404)
   NAnswer(355,1,NodeSndDialog)
end

procedure NodeAnswer403 begin
   Reply(357)
   NAnswer(359,1,NodeAnswer404)
   NAnswer(355,1,NodeSndDialog)
end

procedure NodeAnswer404 begin
   Reply(360)
   if (getQuest(GVAR_PHENIX_CULT_DESTROY) >= qEnd) then begin
   NAnswer(361,1,NodeAnswer411)
   end
   else begin
   NAnswer(361,1,NodeAnswer405)
   end
end

procedure NodeAnswer405 begin
   Reply(362)
   NAnswerSkill(370,3,NodeAnswer407,SKILL_CONVERSANT,50,366,NodeAnswer406)
   NAnswer(363,1,NodeAnswer403)
   NAnswer(364,1,NodeSndDialog)
end

procedure NodeAnswer406 begin
   Reply(367)
   NAnswer(368,1,NodeSndDialog)
   BAnswer(369,1,Node999)
end

procedure NodeAnswer407 begin
   bitDialogExp(bit_6,50)
   Reply(371)
   NAnswer(372,1,NodeAnswer408)
end

procedure NodeAnswer408 begin
   Reply(373)
   NAnswer(374,1,NodeAnswer409)
end

procedure NodeAnswer409 begin
   Reply(375)
   NAnswer(376,1,NodeAnswer410)
end

procedure NodeAnswer410 begin
   Reply(377)
   NAnswer(378,1,NodeSndDialog)
   BAnswer(379,1,Node999)
end

procedure NodeAnswer411 begin
   Reply(380)
   NAnswer(381,1,NodeSndDialog)
   BAnswer(382,1,Node999)
end
