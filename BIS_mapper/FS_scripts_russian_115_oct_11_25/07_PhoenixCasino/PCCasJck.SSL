#include "..\headers\define.h"
//---------------------

#define NAME                            SCRIPT_PCCasJck
#define TOWN_REP_VAR                    GVAR_TOWN_REP_PHOENIX_CASINO // привязка к репутации (-1, если не нужно)

#define NUM_TEAM                        TEAM_PHOENIX_CASINO   // группа, к которой принадлежит персонаж (-1 если нужно оставить Team, заданный в редакторе)
#define NUM_AI                          AI_PERSON_NORMAL      // AI персонажа (-1 если нужно оставить AI, заданный в редакторе)
#define KILL_SLAVA                      SLAVA_KILL_GOOD       // слава за убийство этого персонажа (SLAVA_KILL_GOOD, SLAVA_KILL_BAD, SLAVA_KILL_NEITRAL, SLAVA_KILL_CHILD)
#define KILL_TOWN_REP                   REP_KILL_CRITICAL     // репутация за убийство этого персонажа (-100 для враждебности всего поселения)
#define KILL_FRAC_REP                   FRAC_CASINO           // принадлежность определенной фракции (-1, если не нужно)

#define FLAG_STEAL                      50 // Нижний порог навыка для кражи (для торговцев 200, для животных 300)
#define FLAG_ALCOHOL                    1  // Примет ли алкоголь от ГГ: 0 - принимает, 1 - не принимает
#define FLAG_FOOD                       1  // Примет ли пищу от ГГ: 0 - принимает, 1 - не принимает

//---------------------

procedure start;
procedure map_enter_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure timed_event_p_proc;
procedure critter_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure pickup_p_proc;
procedure combat_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;

procedure Node998;
procedure Node999;
procedure NodeStartDialog;
procedure NodeFstDialog;
procedure NodeFstDialog2;
procedure NodeSndDialog;
procedure NodeSndDialog1;
procedure NodeSndDialog2;
procedure NodeStavka101;
procedure NodeStavka102;
procedure NodeStavka103;
procedure NodeStavka104;
procedure NodeStavka105;
procedure NodePartyStart;
procedure NodePartyStart2;
procedure NodePartyStart3;
procedure NodeParty000;
procedure NodeParty001;
procedure NodeParty100;
procedure NodeParty200;
procedure NodeParty300;
procedure NodeParty400;
procedure NodePartyDraw;
procedure NodePartyOk;
procedure NodePartyNo;

//---------------------

#define LVAR_GAME_DUDE_VICTORY                     (6) // число побед в ядер-джеке
#define LVAR_GAME_DUDE_LOSING                      (7) // число поражений в ядер-джеке

variable amntStavka;   // размер текущей ставки (обнуляется в начале каждой партии)
variable partyDubl;    // удвоение ставки (доступно только раз за партию)
variable partyPas;     // пасование игроком
variable partyMsg;     // реплика крупье по завершению игры
variable partyPointsA; // текущее количество очков у ГГ
variable partyPointsB; // текущее количество очков у дилера
variable partyCardA1;  // 1 карта ГГ
variable partyCardA2;  // 2 карта ГГ
variable partyCardA3;  // 3 карта ГГ
variable partyCardA4;  // 4 карта ГГ
variable partyCardA5;  // 5 карта ГГ
variable partyCardB1;  // 1 карта дилера
variable partyCardB2;  // 2 карта дилера
variable partyCardB3;  // 3 карта дилера
variable partyCardB4;  // 4 карта дилера
variable partyCardB5;  // 5 карта дилера

//---------------------


/*

Замечания:
	* В блэкджеке игра ведется против дилера, поэтому инфу про других игроков можно упустить.
	* В американском блэкджеке одна карта у дилера не видна до конца игры.
	* У каждой карты номинал от 1 (туз) до 10 (картинки). Хотя туз может быть 11, но только пока общая сумма очков не превышает 21 - тогда считается по 1. Для удобства скриптинга можно всегда считать за 1.
	* 3 карты-семёрки (777) иногда оплачиваются выигрышем 3 к 1
	* Еще вариант - сделать игру по типу канасты, где нужно собирать по 7 одноранговых карт.

Общий порядок игры:
	+ делаем ставку
	+ раздается по 2 карты случайным номиналом, считаем свой номинал, у дилера при этом одна карта скрыта
		- нужно набрать сумму карт до 21, но не менее, чем у соперника
	+ совершаем действия
		- взять еще карту
		- пасовать (остаёмся при своих)
		- сплит (разделение карт на две группы)
		- удвоение ставки (только раз за партию и пока на руках меньше пяти карт)
		- сдаться (половина ставки заберет казино)
	+ считаем полученные очки
		- если у кого-то выпадает блэкджек, тот сразу выигрывает
		- если у кого-то больше 21, тот сразу проигрывает
		- если на руках оказалось 5 карт, игра завершается, признается победителем тот, у кого больше очков
			если число очков одиннаково, то ничья, все остаются при своих ставках
		- иначе продолжаем играть

*/



procedure start begin
end

procedure map_enter_p_proc begin
   if (is_loading_game == false) then begin
       set_start_home
   end
end

procedure look_at_p_proc begin
   lookProcMsg
end

procedure description_p_proc begin
   dsrptProcMsg
end

procedure timed_event_p_proc begin
   // Таймер за номером 1 рарезервирован под перемещение персонажа по локации
   // Таймер за номером 2 рарезервирован под всплывающие реплики
   if (fixed_param == 1) then begin
       timer_move_to_home
   end
   if (fixed_param == 2) then begin
       //timer_float_reply(110,111)
   end
end

procedure critter_p_proc begin
   set_critter_options(0,0) //условие нападения (0 личная вражда, 1 вражда клановая, 2 всегда), разворот к ГГ
end

procedure use_skill_on_p_proc begin
   skillUseSteal
   skillUseFAid
end

procedure pickup_p_proc begin
   pickupProcCritter
end

procedure use_obj_on_p_proc begin
   UsedItemToCrit_Proc
end

procedure combat_p_proc begin
   effectAttak(0,0,0,0,0) //отравление min, облучение min, травма ног %, травма рук %, травма глаз %
end

procedure damage_p_proc begin
   set_damage_dude
end

procedure destroy_p_proc begin
   killCasinoRepCity(2)
   kill_critter_opt
end

procedure talk_p_proc begin
   if town_rep_is_vilified then begin
   z_floater(self_obj,103,COLOR_MSG_RED);
   end
   else begin
   setReaction(0) // Отношение к ГГ (1 - персонаж положительный, -1 отрицательный, 0 нейтральный)
   fracReaction(GVAR_TITUL_PHENIX_CASINO,50) // Поправка к отношению за принадлежность к фракциям
   dialog_proc(1,102,NodeStartDialog,-1,-1)
   end
end

procedure Node998 begin
   set_enemy_dude;
end

procedure Node999 begin
end

procedure NodeStartDialog begin
   if (bitDialog(bit_1) == 0) then begin
   call NodeFstDialog;
   end
   else begin
   call NodeSndDialog1;
   end
end

//--- ВСТУПЛЕНИЕ

procedure NodeFstDialog begin
   Reply(200)
   NAnswerSkill(203,1,NodeFstDialog2,SKILL_GAMBLING,60,202,Node999)
   NAnswer(201,1,Node999)
end

procedure NodeFstDialog2 begin
   bitDialogExp(bit_1,0)
   Reply(204)
   NAnswer(205,1,NodeSndDialog)
end

//--- СТАВКА

procedure NodeSndDialog begin
   amntStavka := 0;
   //Reply(mstr(210)+item_amnt(dude_obj,PID_POKER_FISH)+mstr(211))
   Reply(210)

   if (item_amnt(dude_obj,PID_POKER_FISH) >= 10) then begin
   NAnswer(214,1,NodeStavka101)
   end
   if (item_amnt(dude_obj,PID_POKER_FISH) >= 20) then begin
   NAnswer(215,3,NodeStavka102)
   end
   if (item_amnt(dude_obj,PID_POKER_FISH) >= 30) then begin
   NAnswer(216,4,NodeStavka103)
   end
   if (item_amnt(dude_obj,PID_POKER_FISH) >= 40) then begin
   NAnswer(217,4,NodeStavka104)
   end
   if (item_amnt(dude_obj,PID_POKER_FISH) >= 50) then begin
   NAnswer(226,5,NodeStavka105)
   end

   if ((local_var(LVAR_GAME_DUDE_VICTORY) != 0) or (local_var(LVAR_GAME_DUDE_LOSING) != 0)) then begin
   NAnswer(220,5,NodeSndDialog2)
   end

   if (item_amnt(dude_obj,PID_POKER_FISH) > 0) then begin
   NAnswer(212,1,Node999)
   end
   else begin
   zNAnswer(213,1,Node999)
   end
end

procedure NodeSndDialog1 begin
   Reply(206)
   NAnswer(207,1,NodeSndDialog)
   NAnswer(208,1,Node999)
end

procedure NodeSndDialog2 begin
   if (local_var(LVAR_GAME_DUDE_VICTORY) >= local_var(LVAR_GAME_DUDE_LOSING)) then begin
   Reply(mstr(221)+local_var(LVAR_GAME_DUDE_VICTORY)+mstr(222)+local_var(LVAR_GAME_DUDE_LOSING)+mstr(223))
   end
   else begin
   Reply(mstr(221)+local_var(LVAR_GAME_DUDE_VICTORY)+mstr(222)+local_var(LVAR_GAME_DUDE_LOSING)+mstr(224))
   end
   NAnswer(225,1,NodeSndDialog)
end

procedure NodeStavka101 begin   amntStavka := 10;    call NodePartyStart; end
procedure NodeStavka102 begin   amntStavka := 20;   call NodePartyStart; end
procedure NodeStavka103 begin   amntStavka := 30;   call NodePartyStart; end
procedure NodeStavka104 begin   amntStavka := 40;   call NodePartyStart; end
procedure NodeStavka105 begin   amntStavka := 50;   call NodePartyStart; end

//--- НАЧАЛО ИГРЫ

procedure NodePartyStart begin
   partyDubl := 0;
   partyPas := 0;
   partyMsg := 0;
   partyPointsA := 0;
   partyPointsB := 0;

   partyCardA1 := random(1,10);
   partyCardA2 := random(1,10);
   partyCardA3 := 0;
   partyCardA4 := 0;
   partyCardA5 := 0;

   partyCardB1 := random(1,10);
   partyCardB2 := random(1,10);
   partyCardB3 := 0;
   partyCardB4 := 0;
   partyCardB5 := 0;

   partyPointsA := partyCardA1 + partyCardA2 + partyCardA3 + partyCardA4 + partyCardA5;
   partyPointsB := partyCardB1 + partyCardB2 + partyCardB3 + partyCardB4 + partyCardB5;

   if (item_amnt(dude_obj,PID_POKER_FISH) >= 5) then begin
   item_remove(dude_obj,PID_POKER_FISH,amntStavka)
   Reply(218)
   NAnswer(219,1,NodePartyStart2)
   end
   else begin
   call NodeSndDialog;
   end
end

procedure NodePartyStart2 begin
   play_sfx("SHUFFLE");
   Reply(mstr(230)+partyCardB2+mstr(231))
   NAnswer(232,1,NodePartyStart3)
end

procedure NodePartyStart3 begin
   Reply(mstr(233)+partyPointsA+mstr(234))
   NAnswer(235,1,NodeParty000)
end

//--- ИГРА

procedure NodeParty000 begin
   Reply(mstr(236)+partyPointsA+mstr(237)+(partyPointsB-partyCardB1)+mstr(238))
   NAnswer(250,1,NodeParty400)
   NAnswer(247,1,NodeParty300)
   if ((partyDubl == 0) and (partyCardB5 == 0)) then begin
   NAnswer(243,1,NodeParty200)
   end
   //!!! Cплит - это разделение карт на две группы. Но как это реализовать?
   NAnswer(240,1,NodeParty100)
end

procedure NodeParty001 begin
   //--- Новая карта

        if (partyCardB5 != 0) then begin
   end
   else if (partyCardB4 != 0) then begin
      if (partyPointsB < 17) then begin
      partyCardB5 := random(1,10);
      end else begin
      partyCardB5 := 1;
      end
      if (partyPas == 0) then begin
      partyCardA5 := random(1,10);
      end
   end
   else if (partyCardB3 != 0) then begin
      if (partyPointsB < 17) then begin
      partyCardB4 := random(1,10);
      end else begin
      partyCardB5 := 1;
      end
      if (partyPas == 0) then begin
      partyCardA4 := random(1,10);
      end
   end
   else if (partyCardB2 != 0) then begin
      partyCardB3 := random(1,10);
      if (partyPas == 0) then begin
      partyCardA3 := random(1,10);
      end
   end
   else if (partyCardB1 != 0) then begin
      partyCardB2 := random(1,10);
      if (partyPas == 0) then begin
      partyCardA2 := random(1,10);
      end
   end

   partyPas := 0;

   //--- Сумма карт
   partyPointsA := partyCardA1 + partyCardA2 + partyCardA3 + partyCardA4 + partyCardA5;
   partyPointsB := partyCardB1 + partyCardB2 + partyCardB3 + partyCardB4 + partyCardB5;

   //--- Оценка результата

   if (partyPointsA == 21) then begin
      partyMsg := 260;
      call NodePartyOk; //игрок выиграл
   end
   else if (partyPointsB == 21) then begin
      partyMsg := 263;
      call NodePartyNo; //дилер выиграл
   end
   else if (partyPointsA > 21) then begin
      partyMsg := 266;
      call NodePartyNo; //проиграл игрок
   end
   else if (partyPointsB > 21) then begin
      partyMsg := 267;
      call NodePartyOk; //проиграл дилер
   end
   else if ((partyCardA5 != 0) or (partyCardB5 != 0)) then begin
      if (partyPointsA == partyPointsB) then begin
      call NodePartyDraw; //ничья
      end
      else if (partyPointsA < partyPointsB) then begin
      partyMsg := 266;
      call NodePartyNo; //проиграл игрок
      end
      else begin
      partyMsg := 267;
      call NodePartyOk; //проиграл дилер
      end
   end
   else begin
      call NodeParty000; // продолжение игры
   end
end

//--- ДЕЙСТВИЯ ИГРОКА

procedure NodeParty100 begin
   play_sfx("SHUFFLE");
   inc_local_var(LVAR_GAME_DUDE_LOSING);
   item_add(dude_obj,PID_POKER_FISH,(amntStavka/2))
   Reply(241)
   NAnswer(242,1,Node999)
end

procedure NodeParty200 begin
   partyDubl := 1;
   amntStavka := (amntStavka*2);
   Reply(random(244,245))
   NAnswer(246,1,NodeParty000)
end

procedure NodeParty300 begin
   partyPas := 1;
   Reply(248)
   NAnswer(249,1,NodeParty001)
end

procedure NodeParty400 begin
   Reply(251)
   NAnswer(252,1,NodeParty001)
end

//--- РЕЗУЛЬТАТ ИГРЫ

procedure NodePartyDraw begin
   if (partyMsg < 200) then begin
   partyMsg := 268;
   end
   item_add(dude_obj,PID_POKER_FISH,amntStavka)
   Reply(partyMsg)
   NAnswer(262,1,NodeSndDialog)
   NAnswer(261,1,Node999)
end

procedure NodePartyOk begin
   inc_local_var(LVAR_GAME_DUDE_VICTORY);
   item_add(dude_obj,PID_POKER_FISH,amntStavka*2)
   amntStavka := 0;
   if (partyMsg < 200) then begin
   partyMsg := 267;
   end
   Reply(partyMsg)
   NAnswer(262,1,NodeSndDialog)
   NAnswer(261,1,Node999)
end

procedure NodePartyNo begin
   inc_local_var(LVAR_GAME_DUDE_LOSING);
   if (partyMsg < 200) then begin
   partyMsg := 266;
   end
   amntStavka := 0;

   Reply(partyMsg)
   NAnswer(264,1,NodeSndDialog)
   NAnswer(265,1,Node999)
end
