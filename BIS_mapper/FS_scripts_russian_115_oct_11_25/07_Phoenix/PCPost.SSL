#include "..\headers\define.h"
//---------------------

#define NAME                            SCRIPT_PCPost
#define TOWN_REP_VAR                    GVAR_TOWN_REP_PHOENIX // привязка к репутации (-1, если не нужно)

#define NUM_TEAM                        TEAM_PHOENIX_CITIZEN  // группа, к которой принадлежит персонаж (-1 если нужно оставить Team, заданный в редакторе)
#define NUM_AI                          AI_PERSON_NORMAL      // AI персонажа (-1 если нужно оставить AI, заданный в редакторе)
#define KILL_SLAVA                      SLAVA_KILL_GOOD       // слава за убийство этого персонажа (SLAVA_KILL_GOOD, SLAVA_KILL_BAD, SLAVA_KILL_NEITRAL, SLAVA_KILL_CHILD)
#define KILL_TOWN_REP                   REP_KILL_GOOD         // репутация за убийство этого персонажа (REP_KILL_GOOD, REP_KILL_BAD, REP_KILL_NEITRAL, REP_KILL_CRITICAL для враждебности всего поселения, REP_KILL_CHILD)
#define KILL_FRAC_REP                   FRAC_NON              // принадлежность определенной фракции (-1, если не нужно)

#define FLAG_STEAL                      60 // Нижний порог навыка для кражи (для торговцев 200, для животных 300)
#define FLAG_ALCOHOL                    0  // Примет ли алкоголь от ГГ: 0 - принимает, 1 - не принимает
#define FLAG_FOOD                       1  // Примет ли пищу от ГГ: 0 - принимает, 1 - не принимает

//---------------------

procedure start;
procedure map_enter_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure timed_event_p_proc;
procedure critter_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure pickup_p_proc;
procedure combat_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;

procedure Node998;
procedure Node999;
procedure NodeStartDialog;
procedure NodeFstDialog;
procedure NodeFstDialog2;
procedure NodeFstDialog3;
procedure NodeSndDialog;
procedure NodeSndDialog2;
procedure NodeSndDialog3;
procedure NodeQst100;
procedure NodeQst101;
procedure NodeQst102;
procedure NodeQst103;
procedure NodeQst104;
procedure NodeQst105;
procedure NodeQst200;
procedure NodeQst201;
procedure NodeQst202;
procedure NodeQst203;
procedure NodeQst300;
procedure NodeQst301;
procedure NodeQst302;
procedure NodeQst303;
procedure NodeQst304;
procedure NodeQst305;
procedure NodeQst306;
procedure NodeQst307;
procedure NodeQst308;
procedure NodeCurier;
procedure NodeCurierSkidka;
procedure NodeCurier1;
procedure NodeCurier2;
procedure NodeCurierEnd;
procedure NodeTin100;
procedure NodeTin101;
procedure NodeTin102;
procedure NodeTin103;
procedure NodeTin104;

//---------------------

#define LVAR_Coast_Express              (6) // цена за посылку в Флагпул и ТуСан (устанавливается при первом запуске, затем меняется по ходу диалога)

variable dialogCityCurier;              // пункт назначения для отправки посылки
variable dialogCityCoast;               // модификатор цены на пересылку

//---------------------



procedure start begin
end

procedure map_enter_p_proc begin
   if (is_loading_game == false) then begin
       set_start_home
       if (map_first_run) then begin
       item_add(self_obj,PID_BOOTLE_CAPS,random(40,60))
       set_local_var(LVAR_Coast_Express,300);
       end
   end
end

procedure look_at_p_proc begin
   lookProcMsg
end

procedure description_p_proc begin
   dsrptProcMsg
end

procedure timed_event_p_proc begin
   // Таймер за номером 1 рарезервирован под перемещение персонажа по локации
   // Таймер за номером 2 рарезервирован под всплывающие реплики
   if (fixed_param == 1) then begin
       timer_move_to_home
   end
   if (fixed_param == 2) then begin
       //timer_float_reply(120,121)
   end
end

procedure critter_p_proc begin
   set_critter_options(0,0) //условие нападения (0 личная вражда, 1 вражда клановая, 2 всегда), разворот к ГГ
end

procedure use_skill_on_p_proc begin
   skillUseSteal
   skillUseFAid
end

procedure pickup_p_proc begin
   pickupProcCritter
end

procedure use_obj_on_p_proc begin
   UsedItemToCrit_Proc
end

procedure combat_p_proc begin
   effectAttak(0,0,0,0,1) //отравление min, облучение min, травма ног %, травма рук %, травма глаз %
end

procedure damage_p_proc begin
   set_damage_dude
end

procedure destroy_p_proc begin
   set_gvar_bit_on(GVAR_EXPRESS_FLAGS_BIT, bit_2);
   if (getQuest(GVAR_PHENIX_QST_LETTERS) == qStart) then begin
   setQuest(GVAR_PHENIX_QST_LETTERS,qStop);
   end
   else if (getQuest(GVAR_PHENIX_QST_LETTERS) == qEnd) then begin
   setQuest(GVAR_PHENIX_QST_LETTERS,qStop);
   end
   kill_critter_opt
end

procedure talk_p_proc begin
   setReaction(1) // Отношение к ГГ (1 - персонаж положительный, -1 отрицательный, 0 нейтральный)
   if (game_time_hour < 0600) then begin
   floater(self_obj,103,COLOR_MSG_RED);
   end
   else begin
   dialog_proc(0,0,NodeStartDialog,-1,-1)
   end
end

procedure Node998 begin
   set_enemy_dude;
end

procedure Node999 begin
end

procedure NodeStartDialog begin
   if (bitDialog(bit_1) == 0) then begin
   call NodeFstDialog;
   end
   else if (bitDialog(bit_3) != 0) then begin
      if ((global_var(GVAR_TITUL_PHENIX_CULT) == 0) or (getQuest(GVAR_PHENIX_CULT_DESTROY) >= qEnd)) then begin
      call NodeSndDialog2;
      end
      else begin
      call NodeSndDialog;
      end
   end
   else begin
   call NodeSndDialog;
   end
end

//--- ПЕРВЫЙ ДИАЛОГ

procedure NodeFstDialog begin
   bitDialogExp(bit_1,0)
   Reply(230)
   NAnswer(231,1,NodeFstDialog2)
end

procedure NodeFstDialog2 begin
   Reply(232)
   NAnswer(233,1,NodeFstDialog3)
end

procedure NodeFstDialog3 begin
   Reply(234)
   NAnswer(235,1,NodeFstDialog2)
   NAnswer(236,1,Node999)
   BAnswer(237,1,Node999)
end

//--- ПОВТОРНЫЙ ДИАЛОГ

procedure NodeSndDialog begin
   Reply(200)

   /*
   if (town_known(AREA_FLAGSTAFF) > MARK_STATE_UNKNOWN) then begin
   NAnswer(202,1,NodeCurier1)
   end
   if (town_known(AREA_TWO_SUN) > MARK_STATE_UNKNOWN) then begin
   NAnswer(203,1,NodeCurier2)
   end
   */

   if ((bitDialog(bit_3) == 0) and (global_var(GVAR_TITUL_PHENIX_CULT) > 0) and (getQuest(GVAR_PHENIX_CULT_DESTROY) < qEnd)) then begin
   zNAnswer(220,1,NodeCurierSkidka)
   end

   if (bitDialog(bit_2) == 0) then begin
   BAnswer(204,3,NodeSndDialog3)
   end

   //--- квест
   if (getQuest(GVAR_PHENIX_QST_LETTERS) == qZero) then begin
      if (item_amnt(dude_obj,PID_Q_LETTERS) > 0) then begin
      NAnswer(316,1,NodeQst203)
      end
      else begin
      NAnswer(300,4,NodeQst100)
      end
   end
   if (getQuest(GVAR_PHENIX_QST_LETTERS) == qStart) then begin
      if (item_amnt(dude_obj,PID_Q_LETTERS) > 0) then begin
      NAnswer(320,1,NodeQst200)
      end
      else begin
      NAnswer(312,3,NodeQst105)
      end
   end
   if (getQuest(GVAR_PHENIX_QST_LETTERS) == qEnd) then begin
      NAnswer(342,3,NodeQst304)
      if (gvar_bit(GVAR_DIALOGS_FLAGS_BIT, bit_22) != 0) then begin
      NAnswer(335,1,NodeQst302)
      end
      else if (gvar_bit(GVAR_DIALOGS_FLAGS_BIT, bit_21) != 0) then begin
      NAnswer(330,1,NodeQst300)
      end
   end

   //--- Посылка найденная на карте мира
   if (getQuest(GVAR_ENCOUNTER_CURIER_BOX) < qEnd) then begin
      if (item_amnt(dude_obj,PID_Q_CASE_CURIER) > 0) then begin
      NAnswer(290,1,NodeQst305)
      end
   end

   //--- Тин-Тан на Платформе
   if (gvar_bit(GVAR_OIL_PLATFORM_QST_KILL_BIT, bit_2) != 0) then begin
   if (gvar_bit(GVAR_OIL_PLATFORM_QST_KILL_BIT, bit_3) == 0) then begin
      NAnswerRep(280,1,NodeTin103,10,280,NodeTin100)
   end
   end

   NAnswer(201,1,Node999)
end

procedure NodeSndDialog2 begin
   set_local_var(LVAR_Coast_Express,local_var(LVAR_Coast_Express)*2);
   bitDialogZero(bit_3)
   Reply(223)
   NAnswer(224,1,Node999)
   BAnswer(225,1,Node999)
end

procedure NodeSndDialog3 begin
   bitDialogExp(bit_2,25)
   Reply(205)
   NAnswer(206,1,NodeSndDialog)
   NAnswer(226,1,Node999)
end

//--- КВЕСТ

procedure NodeQst100 begin
   Reply(301)
   NAnswer(302,1,NodeQst101)
end

procedure NodeQst101 begin
   Reply(303)
   NAnswer(304,1,NodeQst102)
end

procedure NodeQst102 begin
   Reply(305)
   NAnswer(306,1,NodeQst103)
   NAnswer(309,1,NodeQst104)
end

procedure NodeQst103 begin
   setQuest(GVAR_PHENIX_QST_LETTERS,qStart);
   Reply(307)
   NAnswer(308,1,Node999)
end

procedure NodeQst104 begin
   Reply(310)
   NAnswer(311,1,Node999)
end

procedure NodeQst105 begin
   Reply(313)
   NAnswer(314,1,NodeSndDialog)
   NAnswer(315,1,Node999)
end

procedure NodeQst200 begin
   Reply(321)
   NAnswer(322,1,NodeQst201)
end

procedure NodeQst201 begin
   setQuest(GVAR_PHENIX_QST_LETTERS,qEnd);
   item_add(dude_obj,PID_BOOTLE_CAPS,50)
   setBonusReaction(25)
   Reply(323)
   NAnswer(324,1,NodeQst202)
   BAnswer(325,1,NodeQst202)
end

procedure NodeQst202 begin
   Reply(326)
   NAnswer(327,1,Node999)
end

procedure NodeQst203 begin
   Reply(317)
   NAnswer(318,1,NodeQst201)
end

procedure NodeQst300 begin
   setQuest(GVAR_PHENIX_QST_LETTERS,qEnd+1);
   item_add(dude_obj,PID_BOOTLE_CAPS,25)
   exp_add(350);
   set_REP(2)
   setBonusReaction(25)
   Reply(331)
   NAnswer(332,1,NodeQst301)
end

procedure NodeQst301 begin
   Reply(333)
   //NAnswer(334,1,Node999)
   NAnswer(341,1,Node999)
end

procedure NodeQst302 begin
   setQuest(GVAR_PHENIX_QST_LETTERS,qEnd+1);
   item_add(dude_obj,PID_BOOTLE_CAPS,12)
   item_remove(dude_obj,PID_Q_LETTERS,1)
   exp_add(100);
   Reply(336)
   BAnswer(337,1,NodeQst303)
   NAnswer(341,1,Node999)
end

procedure NodeQst303 begin
   setBonusReaction(-25)
   Reply(338)
   NAnswer(339,1,Node999)
end

procedure NodeQst304 begin
   Reply(343)
   BAnswer(344,1,Node999)
   NAnswer(345,1,Node999)
end

procedure NodeQst305 begin
   setQuest(GVAR_ENCOUNTER_CURIER_BOX,qEnd);
   item_remove(dude_obj,PID_Q_CASE_CURIER,1)
   setBonusReaction(10)
   Reply(291)
   NAnswer(292,1,NodeQst306)
end

procedure NodeQst306 begin
   Reply(293)
   NAnswer(294,1,NodeQst307)
   GAnswer(297,1,NodeQst308)
end

procedure NodeQst307 begin
   exp_add(500);
   item_add(dude_obj,PID_BOOTLE_CAPS,150)
   Reply(295)
   NAnswer(296,1,Node999)
end

procedure NodeQst308 begin
   exp_add(500);
   set_SLAVA(25)
   set_REP(2)
   setBonusReaction(20)
   Reply(298)
   zNAnswer(299,1,Node999)
end

//--- ОТПРАВКА ПОСЫЛКИ

procedure NodeCurier begin
   Reply(mstr(210)+dialogCityCoast+mstr(211))
   NAnswer(212,1,NodeCurierEnd)
   NAnswer(213,1,Node999)
end

procedure NodeCurierSkidka begin
   bitDialogExp(bit_3,50)
   set_local_var(LVAR_Coast_Express,local_var(LVAR_Coast_Express)/2);
   Reply(221)
   NAnswer(222,1,NodeSndDialog)
end

procedure NodeCurier1 begin
   dialogCityCurier := bit_4;
   dialogCityCoast := local_var(LVAR_Coast_Express)*1;
   call NodeCurier;
end

procedure NodeCurier2 begin
   dialogCityCurier := bit_6;
   dialogCityCoast := local_var(LVAR_Coast_Express)*1;
   call NodeCurier;
end

procedure NodeCurierEnd begin
   if (item_amnt(dude_obj,PID_BOOTLE_CAPS) >= dialogCityCoast) then begin
      item_remove(dude_obj,PID_BOOTLE_CAPS,dialogCityCoast)
      item_add(self_obj,PID_BOOTLE_CAPS,dialogCityCoast)
      play_sfx("BELLBOX1");
      set_gvar_bit_on(GVAR_EXPRESS_FLAGS_BIT, dialogCityCurier);
      Reply(217)
      NAnswer(218,1,Node999)
   end
   else begin
      Reply(214)
      NAnswer(216,1,Node999)
   end
end

//--- ТИН-ТАН из Платформы

procedure NodeTin100 begin
   Reply(281)
   NAnswer(282,1,NodeTin101)
   NAnswer(283,1,Node999)
end

procedure NodeTin101 begin
   if (item_amnt(dude_obj,PID_BOOTLE_CAPS)>=10) then begin
   call NodeTin102;
   end
   else begin
   call NodeTin100;
   end
end

procedure NodeTin102 begin
   item_remove(dude_obj,PID_BOOTLE_CAPS,10)
   call NodeTin103;
end

procedure NodeTin103 begin
   Reply(284)
   NAnswer(285,1,NodeTin104)
end

procedure NodeTin104 begin
   set_gvar_bit_on(GVAR_OIL_PLATFORM_QST_KILL_BIT, bit_3);
   Reply(286)
   NAnswer(287,1,Node999)
end
