#include "..\headers\define.h"
//---------------------

#define NAME                            SCRIPT_FCTom
#define TOWN_REP_VAR                    GVAR_TOWN_REP_FLAGSTAFF   // привязка к репутации (-1, если не нужно)

#define NUM_TEAM                        TEAM_FLAGSTAFF_CITIZEN // группа, к которой принадлежит персонаж (-1 если нужно оставить Team, заданный в редакторе)
#define NUM_AI                          AI_PERSON_WIMPY       // AI персонажа (-1 если нужно оставить AI, заданный в редакторе)
#define KILL_SLAVA                      SLAVA_KILL_GOOD       // слава за убийство этого персонажа (SLAVA_KILL_GOOD, SLAVA_KILL_BAD, SLAVA_KILL_NEITRAL, SLAVA_KILL_CHILD)
#define KILL_TOWN_REP                   REP_KILL_NEITRAL      // репутация за убийство этого персонажа (REP_KILL_GOOD, REP_KILL_BAD, REP_KILL_NEITRAL, REP_KILL_CRITICAL для враждебности всего поселения, REP_KILL_CHILD)
#define KILL_FRAC_REP                   FRAC_NON              // принадлежность определенной фракции (-1, если не нужно)

#define FLAG_STEAL                      25 // Нижний порог навыка для кражи (для торговцев 200, для животных 300)
#define FLAG_ALCOHOL                    0  // Примет ли алкоголь от ГГ: 0 - принимает, 1 - не принимает
#define FLAG_FOOD                       0  // Примет ли пищу от ГГ: 0 - принимает, 1 - не принимает

//---------------------

procedure start;
procedure map_enter_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure timed_event_p_proc;
procedure critter_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure pickup_p_proc;
procedure combat_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;

procedure Node998;
procedure Node999;
procedure NodeStartDialog;
procedure NodeFstDialog;
procedure NodeFstDialog2;
procedure NodeFstDialog3;
procedure NodeSndDialog;
procedure NodeAnswer100;
procedure NodeAnswer101;
procedure NodeAnswer102;
procedure NodeAnswer103;
procedure NodeAnswer104;
procedure NodeAnswer105;
procedure NodeAnswer200;
procedure NodeAnswer201;
procedure NodeAnswer202;
procedure NodeAnswer203;
procedure NodeAnswer204;
procedure NodeAnswer300;
procedure NodeAnswer301;
procedure NodeAnswer302;
procedure NodeAnswer303;
procedure NodeAnswer304;
procedure NodeAnswer305;
procedure NodeAnswer306;

//---------------------

//#define LVAR_Flag_A                     (6) // отвечает за ...

//---------------------



procedure start begin
end

procedure map_enter_p_proc begin
   if (is_loading_game == false) then begin
       set_start_home
   end
end

procedure look_at_p_proc begin
   lookProcMsg
end

procedure description_p_proc begin
   dsrptProcMsg
end

procedure timed_event_p_proc begin
   // Таймер за номером 1 рарезервирован под перемещение персонажа по локации
   // Таймер за номером 2 рарезервирован под всплывающие реплики
   if (fixed_param == 1) then begin
       timer_move_to_home
   end
   if (fixed_param == 2) then begin
       //timer_float_reply(120,121)
   end
end

procedure critter_p_proc begin
   set_critter_options(0,0) //условие нападения (0 личная вражда, 1 вражда клановая, 2 всегда), разворот к ГГ
end

procedure use_skill_on_p_proc begin
   skillUseSteal
   skillUseFAid
end

procedure pickup_p_proc begin
   pickupProcCritter
end

procedure use_obj_on_p_proc begin
   UsedItemToCrit_Proc
end

procedure combat_p_proc begin
   effectAttak(0,0,0,0,0) //отравление min, облучение min, травма ног %, травма рук %, травма глаз %
end

procedure damage_p_proc begin
   set_damage_dude
end

procedure destroy_p_proc begin
   if (map_var(MVAR_FLAG_Vor) == 0) then begin
   set_map_var(MVAR_FLAG_Vor,1);
   end
   kill_critter_opt
end

procedure talk_p_proc begin
   setReaction(1) // Отношение к ГГ(1 - персонаж положительный, -1 отрицательный, 0 нейтральный)
   fracReaction(GVAR_TITUL_DUDE_IS_SLAVE,50) // Поправка к отношению за принадлежность к фракциям
   dialog_proc(0,0,NodeStartDialog,-1,-1)
end

procedure Node998 begin
   set_enemy_dude;
end

procedure Node999 begin
end

procedure NodeStartDialog begin
   if (bitDialog(bit_1) == 0) then begin
      call NodeFstDialog;
   end
   else begin
      call NodeSndDialog;
   end
end

//--- ПЕРВЫЙ ДИАЛОГ

procedure NodeFstDialog begin
   bitDialogExp(bit_1,0)
   Reply(200)
   NAnswer(201,1,NodeFstDialog2)
end

procedure NodeFstDialog2 begin
   Reply(202)
   NAnswer(203,1,NodeFstDialog3)
end

procedure NodeFstDialog3 begin
   Reply(204)
   NAnswer(205,1,NodeStartDialog)
   NAnswer(206,1,Node999)
end

//--- ПОВТОРНЫЙ ДИАЛОГ

procedure NodeSndDialog begin
   Reply(210)

   NAnswer(220,1,NodeAnswer100)
   NAnswer(240,1,NodeAnswer200)
   NAnswer(243,1,NodeAnswer201)
   if (global_var(GVAR_STATUS_FLAGSTAFF_FABER) < 0) then begin
   if (bitDialog(bit_2) != 0) then begin
   NAnswer(246,1,NodeAnswer202)
   end
   end
   if (getQuest(GVAR_FLAGSTAFF_ROBOT_REPAIR) == qStart) then begin
   NAnswer(250,1,NodeAnswer203)
   end
   if (getQuest(GVAR_FLAGSTAFF_POST_VOR) == qStart) then begin
   if (map_var(MVAR_FLAG_Vor) == 0) then begin
   NAnswer(260,1,NodeAnswer300)
   end
   end
   NAnswer(211,1,Node999)
end

//--- РАССПРОСЫ

procedure NodeAnswer100 begin
   Reply(221)
   NAnswer(222,1,NodeAnswer101)
end

procedure NodeAnswer101 begin
   Reply(223)
   NAnswerSkill(228,3,NodeAnswer103,SKILL_CONVERSANT,40,225,NodeAnswer102)
   NAnswer(224,1,NodeSndDialog)
end

procedure NodeAnswer102 begin
   Reply(226)
   NAnswer(227,1,NodeSndDialog)
end

procedure NodeAnswer103 begin
   bitDialogExp(bit_2,35)
   Reply(229)
   NAnswer(230,1,NodeAnswer104)
   BAnswer(231,1,NodeAnswer104)
end

procedure NodeAnswer104 begin
   Reply(232)
   NAnswer(233,1,NodeAnswer105)
end

procedure NodeAnswer105 begin
   Reply(234)
   NAnswer(235,1,NodeSndDialog)
   zBAnswer(236,1,NodeSndDialog)
end

procedure NodeAnswer200 begin
   Reply(241)
   NAnswer(243,1,NodeAnswer201)
   if (getQuest(GVAR_FLAGSTAFF_ROBOT_REPAIR) == qStart) then begin
   NAnswer(250,1,NodeAnswer203)
   end
   NAnswer(242,1,NodeSndDialog)
end

procedure NodeAnswer201 begin
   Reply(244)
   NAnswer(240,1,NodeAnswer200)
   NAnswer(242,1,NodeSndDialog)
end

procedure NodeAnswer202 begin
   bitDialogExp(bit_3,25)
   Reply(247)
   NAnswer(248,1,NodeSndDialog)
   BAnswer(249,1,NodeSndDialog)
end

procedure NodeAnswer203 begin
   Reply(251)
   NAnswer(252,1,NodeAnswer204)
   BAnswer(253,1,NodeAnswer204)
end

procedure NodeAnswer204 begin
   mark_on_map(AREA_GARAGE)
   Reply(254)
   NAnswer(255,1,NodeSndDialog)
   BAnswer(256,1,NodeSndDialog)
end

procedure NodeAnswer300 begin
   Reply(261)
   NAnswer(262,1,NodeAnswer301)
end

procedure NodeAnswer301 begin
   Reply(263)
   NAnswer(265,1,NodeAnswer302)
   NAnswerSkill(276,3,NodeAnswer306,SKILL_CONVERSANT,40,272,NodeAnswer305)
   NAnswer(264,1,Node999)
end

procedure NodeAnswer302 begin
   Reply(266)
   if (item_amnt(dude_obj,PID_BOOTLE_CAPS)>=10) then begin
   NAnswer(268,1,NodeAnswer303)
   end
   NAnswerSkill(276,3,NodeAnswer306,SKILL_CONVERSANT,40,272,NodeAnswer305)
   NAnswer(267,1,Node999)
end

procedure NodeAnswer303 begin
   if (item_amnt(dude_obj,PID_BOOTLE_CAPS)>=10) then begin
   call NodeAnswer304;
   end
   else begin
   call NodeAnswer302;
   end
end

procedure NodeAnswer304 begin
   set_map_var(MVAR_FLAG_Vor,1);
   item_remove(dude_obj,PID_BOOTLE_CAPS,10)
   Reply(269)
   NAnswer(270,1,Node999)
   zBAnswer(271,1,Node999)
end

procedure NodeAnswer305 begin
   Reply(273)
   NAnswer(265,1,NodeAnswer302)
   BAnswer(274,1,Node999)
   NAnswer(275,1,Node999)
end

procedure NodeAnswer306 begin
   set_map_var(MVAR_FLAG_Vor,1);
   Reply(277)
   NAnswer(270,1,Node999)
   zBAnswer(271,1,Node999)
end
