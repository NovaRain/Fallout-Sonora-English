#include "..\headers\define.h"
//---------------------

#define NAME                            SCRIPT_GCBossB
#define TOWN_REP_VAR                    GVAR_TOWN_REP_GARAGE  // привязка к репутации (-1, если не нужно)

#define NUM_TEAM                        TEAM_GARAGE_CLAN_A    // группа, к которой принадлежит персонаж (-1 если нужно оставить Team, заданный в редакторе)
#define NUM_AI                          AI_PERSON_TOUGH       // AI персонажа (-1 если нужно оставить AI, заданный в редакторе)
#define KILL_SLAVA                      SLAVA_KILL_BAD        // слава за убийство этого персонажа (SLAVA_KILL_GOOD, SLAVA_KILL_BAD, SLAVA_KILL_NEITRAL, SLAVA_KILL_CHILD)
#define KILL_TOWN_REP                   REP_KILL_NEITRAL      // репутация за убийство этого персонажа (REP_KILL_GOOD, REP_KILL_BAD, REP_KILL_NEITRAL, REP_KILL_CRITICAL для враждебности всего поселения, REP_KILL_CHILD)
#define KILL_FRAC_REP                   FRAC_NON              // принадлежность определенной фракции (-1, если не нужно)

#define FLAG_STEAL                      50 // Нижний порог навыка для кражи (для торговцев 200, для животных 300)
#define FLAG_ALCOHOL                    1  // Примет ли алкоголь от ГГ: 0 - принимает, 1 - не принимает
#define FLAG_FOOD                       1  // Примет ли пищу от ГГ: 0 - принимает, 1 - не принимает

#define TILE_EXIT                       29309  // Тайл ухода с карты

//---------------------

procedure start;
procedure map_enter_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure timed_event_p_proc;
procedure scena_proc;
procedure critter_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure pickup_p_proc;
procedure combat_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;
procedure Node998;
procedure Node999;
procedure NodeDialog;
procedure NodeDialog1;
procedure NodeDialog2;
procedure NodeDialog3;
procedure NodeDialog4;

//---------------------

//#define LVAR_Flag_A                     (6) // отвечает за ...

import variable obj_critter_a; // указатель на Когана
import variable obj_critter_b; // указатель на Лукаса

//---------------------



procedure start begin
end

procedure map_enter_p_proc begin
   if (is_loading_game == false) then begin
       set_start_home
       rm_timer_event(self_obj);
       set_obj_visibility(self_obj, 1);

       /*
       ! Синхронизировать появление персонажей между: GCBossB, GCLucasB, GCLcsGrd, GCBosGrd
       */

       if (global_var(GVAR_GARAGE_STATUS_BOSS) < 0) then begin
          set_map_var(MVAR_GARAGE_TRADE_STATUS,2);
       end
       else if (getQuest(GVAR_GARAGE_QST_BOSS_TRADE) == 2) then begin
          set_obj_visibility(self_obj, 0);
          add_timer_event(self_obj, 2, 4);
          add_timer_event(self_obj, 10, 3);
       end
       else if (getQuest(GVAR_GARAGE_QST_LUCS_TRADE) == 2) then begin
          set_obj_visibility(self_obj, 0);
       end
   end
end

procedure look_at_p_proc begin
   lookProcMsg
   //display_msg("a "+obj_critter_a);
end

procedure description_p_proc begin
   dsrptProcMsg
end

procedure timed_event_p_proc begin
   // Таймер за номером 1 зарезервирован под перемещение персонажа по локации
   // Таймер за номером 2 зарезервирован под всплывающие реплики
   if (fixed_param == 1) then begin
   end
   if (fixed_param == 2) then begin
       //timer_float_reply(120,121)
   end
   if (fixed_param == 3) then begin
       if (obj_critter_b > 0) then begin
       floater(self_obj,121,COLOR_MSG_RED);
       end
       else begin
       floater(self_obj,120,COLOR_MSG_NORMAL);
       end
   end
   if (fixed_param == 4) then begin
       if (combat_is_initialized == false) then begin
       move_to(dude_obj,tile_num_in_direction(self_tile,3,4),0);
       end
   end
end

procedure scena_proc begin
   if (getQuest(GVAR_GARAGE_QST_BOSS_TRADE) == 2) then begin
       if (getQuest(GVAR_GARAGE_STATUS_CARAVAN) >= 0) then begin
          if (tile_distance(self_tile, TILE_CRVN) < 2) then begin
              floater(self_obj,122,COLOR_MSG_GREEN);
              display_mstr(102);
              setQuest(GVAR_GARAGE_QST_BOSS_TRADE,3);
              rm_timer_event(self_obj);
          end
       end
   end
end

procedure critter_p_proc begin
   obj_critter_a := 0;
   if (self_visible == true) then begin
       obj_critter_a := self_obj;

       if (map_var(MVAR_GARAGE_TRADE_STATUS) == 2) then begin
          if (self_tile == TILE_EXIT) then begin
          obj_critter_a := 0;
          set_obj_visibility(self_obj, 1);
          destroy_object(self_obj);
          end
          else begin
          move_to_tile(0,TILE_EXIT,0)
          end
       end
       else if (map_var(MVAR_GARAGE_TRADE_STATUS) != 0) then begin
          call scena_proc;
          move_to_tile(0,TILE_CRVN,0)
       end

       if (map_var(MVAR_GARAGE_TRADE_STATUS) == -1) then begin
          if (obj_critter_b > 0) then begin
          attack(obj_critter_b);
          end
       end

       set_critter_options(0,0) //условие нападения (0 личная вражда, 1 вражда клановая, 2 всегда), разворот к ГГ
   end
end

procedure use_skill_on_p_proc begin
   skillUseSteal
   skillUseFAid
end

procedure pickup_p_proc begin
   pickupProcCritter
end

procedure use_obj_on_p_proc begin
   UsedItemToCrit_Proc
end

procedure combat_p_proc begin
   effectAttak(0,0,1,1,1) //отравление min, облучение min, травма ног %, травма рук %, травма глаз %
end

procedure damage_p_proc begin
   set_damage_dude
end

procedure destroy_p_proc begin
   obj_critter_a := 0;
   set_map_var(MVAR_GARAGE_TRADE_STATUS,-1);
   set_global_var(GVAR_GARAGE_STATUS_BOSS,-1);
   setQuest(GVAR_GARAGE_QST_BOSS_TRADE,qStop);
   if (getQuest(GVAR_GARAGE_QST_BOSS) <= qEnd) then begin
   setQuest(GVAR_GARAGE_QST_BOSS,qZero);
   end
   if (getQuest(GVAR_GARAGE_QST_BOSS) == qStart) then begin
   setQuest(GVAR_GARAGE_QST_FABRICA,qStop);
   end
   kill_critter_opt
end

procedure talk_p_proc begin
   call scena_proc;

   if (map_var(MVAR_GARAGE_TRADE_STATUS) == 2) then begin
      floater(self_obj,114,COLOR_MSG_NORMAL);
   end
   else if (getQuest(GVAR_GARAGE_QST_BOSS_TRADE) >= 3) then begin
      floater(self_obj,112,COLOR_MSG_GREEN);
   end
   else if (getQuest(GVAR_GARAGE_QST_BOSS_TRADE) == 2) then begin
      if (obj_critter_b > 0) then begin
      floater(self_obj,111,COLOR_MSG_RED);
      end
      else begin
      floater(self_obj,110,COLOR_MSG_NORMAL);
      end
   end
   else if ((getQuest(GVAR_GARAGE_QST_LUCS_TRADE) == 2) and (map_var(MVAR_GARAGE_TRADE_STATUS) == 0)) then begin
      dialog_proc(0,0,NodeDialog,HEAD_GARAGE_BOSS_B,BACKGROUND_WASTELND)
   end
   else begin
      if (global_var(GVAR_GARAGE_STATUS_CARAVAN) < 0) then begin
      floater(self_obj,115,COLOR_MSG_RED);
      end
      else begin
      floater(self_obj,113,COLOR_MSG_RED);
      end
   end
end

procedure Node998 begin
   setNodeCombat;
end

procedure Node999 begin
end

procedure NodeDialog begin
   Reply(200)
   BAnswer(201,1,NodeDialog1)
end

procedure NodeDialog1 begin
   Reply(202)
   GAnswerSkill(207,1,NodeDialog3,SKILL_CONVERSANT,50,210,NodeDialog2)
   BAnswer(203,1,NodeDialog2)
   NAnswer(204,1,NodeDialog2)
end

procedure NodeDialog2 begin
   set_map_var(MVAR_GARAGE_TRADE_STATUS,-1);
   Reply(205)
   NAnswer(206,1,Node999)
end

procedure NodeDialog3 begin
   Reply(208)
   NAnswer(209,1,NodeDialog4)
end

procedure NodeDialog4 begin
   set_map_var(MVAR_GARAGE_TRADE_STATUS,2);
   set_SLAVA(35)
   Reply(211)
   NAnswer(212,1,Node999)
end
