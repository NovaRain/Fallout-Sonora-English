#include "..\headers\define.h"
//---------------------

#define NAME                            SCRIPT_JCMerc
#define TOWN_REP_VAR                    -1 // привязка к репутации (-1, если не нужно)

#define NUM_TEAM                        TEAM_PLAYER           // группа, к которой принадлежит персонаж (-1 если нужно оставить Team, заданный в редакторе)
#define NUM_AI                          AI_BANDIT             // AI персонажа (-1 если нужно оставить AI, заданный в редакторе)
#define KILL_SLAVA                      SLAVA_KILL_GOOD       // слава за убийство этого персонажа (SLAVA_KILL_GOOD, SLAVA_KILL_BAD, SLAVA_KILL_NEITRAL, SLAVA_KILL_CHILD)
#define KILL_TOWN_REP                   REP_KILL_NEITRAL      // репутация за убийство этого персонажа (REP_KILL_GOOD, REP_KILL_BAD, REP_KILL_NEITRAL, REP_KILL_CRITICAL для враждебности всего поселения, REP_KILL_CHILD)
#define KILL_FRAC_REP                   FRAC_NON              // принадлежность определенной фракции (-1, если не нужно)

#define FLAG_STEAL                      0  // Нижний порог навыка для кражи (для торговцев 200, для животных 300)
#define FLAG_ALCOHOL                    1  // Примет ли алкоголь от ГГ: 0 - принимает, 1 - не принимает
#define FLAG_FOOD                       1  // Примет ли пищу от ГГ: 0 - принимает, 1 - не принимает

//---------------------

procedure start;
procedure map_enter_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure timed_event_p_proc;
procedure critter_p_proc;
procedure push_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure pickup_p_proc;
procedure combat_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;

procedure Node998;
procedure Node999;
procedure NodeStartDialog;
procedure NodeFstDialog;
procedure NodeFstDialog1;
procedure NodeFstDialog2;
procedure NodeFstDialog3;
procedure NodeFstDialog4;

//---------------------

//#define LVAR_Flag_A                     (6) // отвечает за ...

//---------------------



procedure start begin
end

procedure map_enter_p_proc begin
   if (is_loading_game == false) then begin
       set_start_home
       if (map_first_run) then begin
       inc_map_var(MVAR_JKLS_Merc_Life);
       end
       set_obj_visibility(self_obj, 1);

       if (getQuest(GVAR_JACKALS_MERC_ATAK) > qZero) then begin
          if (global_var(GVAR_JACKALS_RANGER_CONTRAKT) >0) then begin
          setQuest(GVAR_JACKALS_MERC_ATAK,-1);
          end
       end

       if (getQuest(GVAR_JACKALS_MERC_ATAK) == qStart) then begin
          set_map_var(MVAR_Jkls_Dopusk,-1);
          set_global_var(GVAR_TOWN_REP_JACKALS,-100);
          set_obj_visibility(self_obj, 0);
       end
   end
end

procedure look_at_p_proc begin
   lookProcMsg
end

procedure description_p_proc begin
   dsrptProcMsg
end

procedure timed_event_p_proc begin
   // Таймер за номером 1 рарезервирован под перемещение персонажа по локации
   // Таймер за номером 2 рарезервирован под всплывающие реплики
   if (fixed_param == 1) then begin
       //timer_move_to_home
   end
   if (fixed_param == 2) then begin
       //timer_float_reply(120,123)
   end
end

procedure critter_p_proc begin
   set_critter_options(0,0) //условие нападения (0 личная вражда, 1 вражда клановая, 2 всегда), разворот к ГГ
   if (getQuest(GVAR_JACKALS_MERC_ATAK) == qStart) then begin
   partyRunToDude //персонаж следует за ГГ
   end
end

procedure push_p_proc begin
end

procedure use_skill_on_p_proc begin
   skillUseSteal
   skillUseFAid
end

procedure pickup_p_proc begin
   pickupProcCritter
end

procedure use_obj_on_p_proc begin
   UsedItemToCrit_Proc
end

procedure combat_p_proc begin
   effectAttak(0,0,1,1,1) //отравление min, облучение min, травма ног %, травма рук %, травма глаз %
end

procedure damage_p_proc begin
   set_damage_dude
end

procedure destroy_p_proc begin
   kill_critter_opt
   dec_map_var(MVAR_JKLS_Merc_Life);
end

procedure talk_p_proc begin
   if (getQuest(GVAR_JACKALS_MERC_ATAK) > qStart) then begin
   floater(self_obj,102,COLOR_MSG_NORMAL);
   end
   else begin
   dialog_proc(0,0,NodeStartDialog,-1,-1)
   end
end

procedure Node998 begin
   set_enemy_dude;
end

procedure Node999 begin
end

procedure NodeStartDialog begin
   if ((bitDialog(bit_2) == 0) and (global_var(GVAR_JACKALS_STATUS_RANGER) > 0)) then begin
   call NodeFstDialog1;
   end
   else if (global_var(GVAR_JACKALS_DEAD) >= LIMIT_JACKALS_DEAD) then begin
   call NodeFstDialog4;
   end
   else begin
   call NodeFstDialog;
   end
end

procedure NodeFstDialog begin
   bitDialogExp(bit_1,0)
   if (dude_elevation == 0) then begin
   Reply(200)
   end
   else begin
   Reply(207)
   end
   NAnswer(201,1,NodeFstDialog2)
   NAnswer(203,1,Node999)
end

procedure NodeFstDialog1 begin
   bitDialogExp(bit_2,0)
   Reply(208)
   NAnswer(212,1,NodeStartDialog)
end

procedure NodeFstDialog2 begin
   Reply(202)
   NAnswer(205,1,NodeFstDialog3)
   NAnswer(204,1,Node999)
end

procedure NodeFstDialog3 begin
   Reply(206)
   NAnswer(204,1,Node999)
end

procedure NodeFstDialog4 begin
   Reply(210)
   NAnswer(211,1,Node999)
end
